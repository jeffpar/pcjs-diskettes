Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-1
                                                            

                                ;MS-DOS PRINT program for background printing o
				f text files to the list 
                                ;        device.  INT 28H is a software interru
				pt generated by the  DOS 
                                ;        in  its  I/O  wait  loops.   This spoo
				ler can be assembled for 
                                ;        operation using only this interrupt  w
				hich  is  portable  from 
                                ;        system to  system.  It may also be ass
				embled to use a hardware 
                                ;        timer interrupt in addition to  the  s
				oftware  INT  28H.   The 
                                ;        purpose  of  using hardware interrupts
				 is to allow printing to 
                                ;        continue during programs which do not 
				 enter  the  system  and 
                                ;        therefore causes the INT 28H to go awa
				y.  A timer interrupt is 
                                ;        chosen in preference to a  "printer  b
				uffer  empty"  interrupt 
                                ;        because  PRINT  in the timer form is g
				eneric.  It can be given 
                                ;        the name of any currently installed ch
				aracter  device  as  the 
                                ;        "printer",  this  makes  it  portable 
				 to  devices  which  are 
                                ;        installed by the user even in the hard
				ware case.  It could  be 
                                ;        modified to use a buffer empty interru
				pt (no code is given for 
                                ;        this case), if this is done the PROMPT
				 and BADMES messages and 
                                ;        their associated  code should be remov
				ed as PRINT will then be 
                                ;        device specific. 
                                ; 
                                ;  VERSION      1.00    07/03/82 
                                 
                                 
 = 0000                         FALSE   EQU     0 
 = FFFF                         TRUE    EQU     NOT FALSE 
                                 
 =                              IBM     EQU     TRUE 
 =                              IBMVER  EQU     IBM 
 =                              MSVER   EQU     FALSE 
                                 
                                        ENDIF 
                                 
                                        IF      IBM 
 =                              HARDINT EQU     TRUE 
 = 001C                         INTLOC  EQU     1CH             ;Hardware inter
				rupt location (Timer) 
 =                              AINT    EQU     TRUE            ;Acknowledge in
				terrupts 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-2
                                                            

 = 0020                         EOI     EQU     20H             ;End Of Interru
				pt "instruction" 
 = 0020                         AKPORT  EQU     20H             ;Interrupt Ackn
				owledge port 
                                        ENDIF 
                                 
                                ;The following values have to do with the ERRCN
				T variable and the 
                                ;  CNTMES message. The values define levels at 
				wich it is assumed 
                                ;  an off-line error exists. ERRCNT1 defines th
				e value of ERRCNT above 
                                ;  which the CNTMES message is printed by the t
				ransient. ERRCNT2 
                                ;  defines the value of ERRCNT above which the 
				resident will give up 
                                ;  trying to print messages on the printer, it 
				is much greater than 
                                ;  ERRCNT1 because a much tighter loop is invol
				ved. The bounding event 
                                ;  which determines the correct value is the ti
				me required to do a 
                                ;  form feed. 
                                 
                                        IF      IBM 
 = 03E8                         ERRCNT1 EQU     1000 
 = 4E20                         ERRCNT2 EQU     20000 
                                        ENDIF 
                                 
                                        IF      HARDINT 
 = 0008                         TIMESLICE EQU   8               ;The PRINT sche
				duling time slice. PRINT 
                                                                ; lets this man
				y "ticks" go by before 
                                                                ; using a time 
				slice to pump out characters. 
                                                                ; Setting this 
				to 3 for instance means PRINT 
                                                                ; Will skip 3 s
				lices, then take the fourth. 
                                                                ; Thus using up
				 1/4 of the CPU. Setting it 
                                                                ; to one gives 
				PRINT 1/2 of the CPU. 
                                                                ; The above exa
				mples assume MAXTICK is 
                                                                ; 1. The actual
				 PRINT CPU percentage is 
                                                                ; (MAXTICK/(1+T
				IMESLICE))*100 
                                 
 = 0002                         MAXTICK EQU     2               ;The PRINT in t
				imeslice. PRINT will pump 
                                                                ; out character
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-3
                                                            

				s for this many clock ticks 
                                                                ; and then exit
				. The selection of a value 
                                                                ; for this is d
				ependent on the timer rate. 
                                 
 = 0001                         BUSYTICK EQU    1               ;If PRINT sits 
				in a wait loop waiting for 
                                                                ; output device
				 to come ready for this 
                                                                ; many ticks, i
				t gives up its time slice. 
                                                                ; Setting it gr
				eater than or equal to 
                                                                ; MAXTICK cause
				s it to be ignored. 
                                 
                                ;User gets TIMESLICE ticks and then PRINT takes
				 MAXTICK ticks unless BUSYTICK 
                                ;       ticks go by without getting a character
				 out. 
                                        ENDIF 
                                 
                                 
                                ;WARNING DANGER WARNING: 
                                ;   PRINT is a systems utility. It is clearly u
				nderstood that it may have 
                                ;   to be entirely re-written for future versio
				ns of MS-DOS. The following 
                                ;   TWO vectors are version specific, they may 
				not exist at all in future 
                                ;   versions. If they do exist, they may functi
				on differently. 
                                ; ANY PROGRAM WHICH IMITATES PRINTS USE OF THES
				E VECTORS IS ALSO A SYSTEMS 
                                ; UTILITY AND IS THEREFORE NOT VERSION PORTABLE
				 IN ANY WAY SHAPE OR FORM. 
                                ; YOU HAVE BEEN WARNED, "I DID IT THE SAME WAY 
				PRINT DID" IS NOT AN REASON 
                                ; TO EXPECT A PROGRAM TO WORK ON FUTURE VERSION
				S OF MS-DOS. 
 = 0028                         SOFTINT EQU     28H             ;Software inter
				rupt generated by DOS 
 = 002F                         COMINT  EQU     2FH             ;Communications
				 interrupt used by PRINT 
                                                                ;  This vector 
				number is DOS reserved. It 
                                                                ;  is not gener
				ally available to programs 
                                                                ;  other than P
				RINT. 
                                 
 = 0200                         BLKSIZ  EQU     512             ;Size of the PR
				INT I/O block in bytes 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-4
                                                            

 = 0028                         FCBSIZ  EQU     40              ;Size of an FCB
				 
                                 
                             C          INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-5
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-10
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-11
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-12
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-13
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-14
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-15
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-16
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-17
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-18
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-19
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-20
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-21
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  ELSE 
                             C    IF IBM 
                             C      ENDIF 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (DOSVER / 100) 
 = 000B                      C  DOS_MINOR_VERSION   EQU     (DOSVER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-22
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-23
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-24
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-25
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-26
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-27
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-28
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-29
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-30
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-31
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-32
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-33
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-34
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-35
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-36
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-37
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-38
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-39
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-40
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-41
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-42
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-43
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-44
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-45
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-46
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-47
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-48
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-49
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-50
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-51
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-52
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-53
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-54
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-55
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-56
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-57
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-58
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-59
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-60
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                                 
                                 
 = 005C                         FCB     EQU     5CH 
 = 0080                         PARMS   EQU     80H 
                                 
                                DG      GROUP   CODE,DATA 
                                 
 0000                           CODE    SEGMENT 
                                ASSUME  CS:DG 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-61
                                                            

                                 
 0100                                   ORG     100H 
 0100                           START: 
 0100  E9 0D5C R                        JMP     TRANSIENT 
                                 
 0103  56 65 72 73 20 31 2E     HEADER  DB      "Vers 1.00" 
       30 30                    
                                 
 010C  0080[                            DB      128 DUP (?) 
            ??                  
                         ]      
                                
 018C                           ISTACK  LABEL   WORD            ;Stack starts h
				ere and grows down 
                                 
                                ;Resident data 
                                 
                                        IF      HARDINT 
 018C  ????????                 INDOS   DD      ?               ;DOS buisy flag
				 
 0190  ????????                 NEXTINT DD      ?               ;Chain for int 
 0194  00                       BUSY    DB      0               ;Internal ME fl
				ag 
 0195  00                       SOFINT  DB      0               ;Internal ME fl
				ag 
 0196  00                       TICKCNT DB      0               ;Tick counter 
 0197  00                       TICKSUB DB      0               ;Tick miss coun
				ter 
 0198  08                       SLICECNT DB     TIMESLICE       ;Time slice cou
				nter 
                                        ENDIF 
                                 
 0199  00                       CBUSY   DB      0               ;ME on com inte
				rrupt 
 019A  ????????                 SPNEXT  DD      ?               ;Chain location
				 for INT 28 
 019E  00                       PCANMES DB      0               ;Cancel message
				 flag 
 019F  ????                     SSsave  DW      ?               ;Stack save are
				a for INT 24 
 01A1  ????                     SPsave  DW      ? 
 01A3  ????????                 DMAADDR DD      ?               ;Place to save 
				DMA address 
 01A7  ????????                 HERRINT DD      ?               ;Place to save 
				Hard error interrupt 
 01AB  ????????                 LISTDEV DD      ?               ;Pointer to Dev
				ice 
 01AF  00                       COLPOS  DB      0               ;Column positio
				n for TAB processing 
 01B0  0505 R                   NXTCHR  DW      OFFSET DG:BUFFER + BLKSIZ     ;
				Buffer pointer 
 01B2  0A73 R                   CURRFIL DW      OFFSET DG:SPLFCB    ;Current fi
				le being printed 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-62
                                                            

 01B4  ????                     LASTFCB DW      ?               ;Back pointer 
 01B6  ????                     LASTFCB2 DW     ?               ;Another back p
				ointer 
 01B8  00                       PABORT  DB      0               ;Abort flag 
                                 
                                ;Resident messages 
                                 
 01B9  0D 0A 0D 0A 2A 2A 2A     ERRMES  DB      13,10,13,10,"**********",13,10,
				"$" 
       2A 2A 2A 2A 2A 2A 2A     
       0D 0A 24                 
 01CA  20 65 72 72 6F 72 20     ERRMEST DB      " error reading file",13,10 
       72 65 61 64 69 6E 67     
       20 66 69 6C 65 0D 0A     
 01DF  20 3A 20 20 20 20 20     EMFILNAM DB     " :        .   " 
       20 20 20 2E 20 20 20     
                                
 01ED  0D 0C 07 24              BELMES  DB     13,0CH,7,"$" 
                                 
 01F1  0D 0A 0D 0A              CANMES  DB      13,10,13,10 
 01F5  20 3A 20 20 20 20 20     CANFILNAM DB    " :        .   " 
       20 20 20 2E 20 20 20     
                                
 0203  20 43 61 6E 63 65 6C             DB      " Canceled by operator$" 
       65 64 20 62 79 20 6F     
       70 65 72 61 74 6F 72     
       24                       
                                 
 0219  0D 0A 0D 0A 41 6C 6C     ALLCAN  DB      13,10,13,10,"All files canceled
				 by operator$" 
       20 66 69 6C 65 73 20     
       63 61 6E 63 65 6C 65     
       64 20 62 79 20 6F 70     
       65 72 61 74 6F 72 24     
                                
                                 
 023C  0256 R                   MESBAS  DW      OFFSET DG:ERR0 
 023E  0264 R                           DW      OFFSET DG:ERR1 
 0240  026D R                           DW      OFFSET DG:ERR2 
 0242  0277 R                           DW      OFFSET DG:ERR3 
 0244  0283 R                           DW      OFFSET DG:ERR4 
 0246  0288 R                           DW      OFFSET DG:ERR5 
 0248  0298 R                           DW      OFFSET DG:ERR6 
 024A  029D R                           DW      OFFSET DG:ERR7 
 024C  02AA R                           DW      OFFSET DG:ERR8 
 024E  02BB R                           DW      OFFSET DG:ERR9 
 0250  02C4 R                           DW      OFFSET DG:ERR10 
 0252  02D0 R                           DW      OFFSET DG:ERR11 
 0254  02DB R                           DW      OFFSET DG:ERR12 
                                 
                                ;INT 24 messages A La COMMAND 
                                 
 0256  57 72 69 74 65 20 70     ERR0    DB      "Write protect$" 
       72 6F 74 65 63 74 24     
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-63
                                                            

                                
 0264  42 61 64 20 75 6E 69     ERR1    DB      "Bad unit$" 
       74 24                    
 026D  4E 6F 74 20 72 65 61     ERR2    DB      "Not ready$" 
       64 79 24                 
 0277  42 61 64 20 63 6F 6D     ERR3    DB      "Bad command$" 
       6D 61 6E 64 24           
 0283  44 61 74 61 24           ERR4    DB      "Data$" 
 0288  42 61 64 20 63 61 6C     ERR5    DB      "Bad call format$" 
       6C 20 66 6F 72 6D 61     
       74 24                    
 0298  53 65 65 6B 24           ERR6    DB      "Seek$" 
 029D  4E 6F 6E 2D 44 4F 53     ERR7    DB      "Non-DOS disk$" 
       20 64 69 73 6B 24        
 02AA  53 65 63 74 6F 72 20     ERR8    DB      "Sector not found$" 
       6E 6F 74 20 66 6F 75     
       6E 64 24                 
 02BB  4E 6F 20 70 61 70 65     ERR9    DB      "No paper$" 
       72 24                    
 02C4  57 72 69 74 65 20 66     ERR10   DB      "Write fault$" 
       61 75 6C 74 24           
 02D0  52 65 61 64 20 66 61     ERR11   DB      "Read fault$" 
       75 6C 74 24              
 02DB  44 69 73 6B 24           ERR12   DB      "Disk$" 
                                 
 02E0  46 69 6C 65 20 61 6C     FATMES  DB     "File allocation table bad drive
				 " 
       6C 6F 63 61 74 69 6F     
       6E 20 74 61 62 6C 65     
       20 62 61 64 20 64 72     
       69 76 65 20              
 0300  41 2E 0D 0A 24           BADDRVM DB     "A.",13,10,"$" 
                                 
                                ;The DATA buffer 
 0305  0200[                    BUFFER  DB      BLKSIZ DUP(0) 
            00                  
                         ]      
                                
 0505  ??                               DB      ? 
 0506                           CODE    ENDS 
                                 
                                ;Transient data 
                                 
 0000                           DATA    SEGMENT BYTE 
 0000                                   ORG     0 
 0000  ??                       SWITCHAR DB     ?               ;User switch ch
				aracter 
 0001  00                       FULLFLAG DB     0               ;Flag for print
				ing queue full message 
 0002  00                       MAKERES DB      0               ;Flag to indica
				te presence of resident 
 0003  00                       ARGSETUP DB     0               ;Flag to indica
				te a formatted FCB exists at 5C 
 0004  00                       DEFDRV  DB      0               ;Default drive 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-64
                                                            

 0005  00                       CANFLG  DB      0               ;Flag to indica
				te cancel 
 0006  00                       FILCNT  DB      0               ;Number of file
				s 
 0007  ????????                 SPLIST  DD      ?               ;Pointer to FCB
				s in resident 
 000B  ????????                 CURFILE DD      ?               ;Pointer to cur
				rent FCB 
 000F  0026[                    SRCHFCB DB      38 DUP (0)      ;SEARCH-FIRST/N
				EXT FCB 
            00                  
                         ]      
                                
 0035  0C03 R                   ENDRES  DW      OFFSET DG:DEF_ENDRES    ;Term-R
				es location 
                                 
                                ;Messages 
                                 
 0037  50 52 49 4E 54 20 71     NOFILS  DB      "PRINT queue is empty",13,10,"$
				" 
       75 65 75 65 20 69 73     
       20 65 6D 70 74 79 0D     
       0A 24                    
 004E  0D 0A 20 20 20 20 20     CURMES  DB      13,10,"        " 
       20 20 20                 
 0058  20 3A 20 20 20 20 20     CURFNAM DB      " :        .    is currently be
				ing printed",13,10,"$" 
       20 20 20 2E 20 20 20     
       20 69 73 20 63 75 72     
       72 65 6E 74 6C 79 20     
       62 65 69 6E 67 20 70     
       72 69 6E 74 65 64 0D     
       0A 24                    
 0084  20 20 20 20 20 20 20     FILMES  DB      "        " 
       20                       
 008C  20 3A 20 20 20 20 20     FILFNAM DB      " :        .    is in queue" 
       20 20 20 2E 20 20 20     
       20 69 73 20 69 6E 20     
       71 75 65 75 65           
 00A6  0D 0A 24                 CRLF    DB      13,10,"$" 
 00A9  43 61 6E 6E 6F 74 20     OPMES    DB     "Cannot open " 
       6F 70 65 6E 20           
 00B5  20 3A 20 20 20 20 20     OPFILNAM DB     " :        .    ",13,10,"$" 
       20 20 20 2E 20 20 20     
       20 0D 0A 24              
 00C7  50 52 49 4E 54 20 71     FULLMES DB      "PRINT queue is full",13,10,"$"
				 
       75 65 75 65 20 69 73     
       20 66 75 6C 6C 0D 0A     
       24                       
 00DD                           SRCHMES LABEL   BYTE 
 00DD  20 3A 20 20 20 20 20     SRCHFNAM DB     " :        .    "," File not fo
				und",13,10,"$" 
       20 20 20 2E 20 20 20     
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-65
                                                            

       20 20 46 69 6C 65 20     
       6E 6F 74 20 66 6F 75     
       6E 64 0D 0A 24           
 00FE  4C 69 73 74 20 6F 75     BADMES  DB      "List output is not assigned to
				 a device",13,10,"$" 
       74 70 75 74 20 69 73     
       20 6E 6F 74 20 61 73     
       73 69 67 6E 65 64 20     
       74 6F 20 61 20 64 65     
       76 69 63 65 0D 0A 24     
 0128  52 65 73 69 64 65 6E     GOODMES DB      "Resident part of PRINT install
				ed",13,10,"$" 
       74 20 70 61 72 74 20     
       6F 66 20 50 52 49 4E     
       54 20 69 6E 73 74 61     
       6C 6C 65 64 0D 0A 24     
 014B  4E 61 6D 65 20 6F 66     PROMPT  DB      "Name of list device [PRN]: $" 
       20 6C 69 73 74 20 64     
       65 76 69 63 65 20 5B     
       50 52 4E 5D 3A 20 24     
                                
 0167  45 72 72 6F 72 73 20     CNTMES  DB      "Errors on list device indicate
				 that it",13,10 
       6F 6E 20 6C 69 73 74     
       20 64 65 76 69 63 65     
       20 69 6E 64 69 63 61     
       74 65 20 74 68 61 74     
       20 69 74 0D 0A           
 018F  6D 61 79 20 62 65 20             DB      "may be off-line. Please check 
				it.",13,10,13,10,"$" 
       6F 66 66 2D 6C 69 6E     
       65 2E 20 50 6C 65 61     
       73 65 20 63 68 65 63     
       6B 20 69 74 2E 0D 0A     
       0D 0A 24                 
 01B5  49 6E 76 61 6C 69 64     BADSWT  DB      "Invalid parameter",13,10,"$" 
       20 70 61 72 61 6D 65     
       74 65 72 0D 0A 24        
                                 
                                 
 01C9  49 6E 63 6F 72 72 65     BADVER  DB      "Incorrect DOS version",13,10,"
				$" 
       63 74 20 44 4F 53 20     
       76 65 72 73 69 6F 6E     
       0D 0A 24                 
                                 
                                        IF      IBM 
                                ;Reserved names for parallel card 
 01E1                           INT_17_HITLIST LABEL BYTE 
 01E1  08 50 52 4E 20 20 20             DB      8,"PRN     ",0 
       20 20 00                 
 01EB  08 4C 50 54 31 20 20             DB      8,"LPT1    ",0 
       20 20 00                 
 01F5  08 4C 50 54 32 20 20             DB      8,"LPT2    ",1 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-66
                                                            

       20 20 01                 
 01FF  08 4C 50 54 33 20 20             DB      8,"LPT3    ",2 
       20 20 02                 
 0209  00                               DB      0 
                                ;Reserved names for Async adaptor 
 020A                           INT_14_HITLIST  LABEL BYTE 
 020A  08 41 55 58 20 20 20             DB      8,"AUX     ",0 
       20 20 00                 
 0214  08 43 4F 4D 31 20 20             DB      8,"COM1    ",0 
       20 20 00                 
 021E  08 43 4F 4D 32 20 20             DB      8,"COM2    ",1 
       20 20 01                 
 0228  00                               DB      0 
                                        ENDIF 
                                 
 0229  0E 00                    COMBUF  DB      14,0            ;Device name bu
				ffer 
 022B  000E[                            DB      14 DUP (?) 
            ??                  
                         ]      
                                
 0239  00 50 52 4E 20 20 20     LISTFCB DB      0,"PRN        " ;Device name FC
				B 
       20 20 20 20 20           
 0245  0019[                            DB      25 DUP (0) 
            00                  
                         ]      
                                
 025E  0050[                    PARSEBUF DB     80 DUP (?)      ;Parsing space 
            ??                  
                         ]      
                                
                                 
 02AE                           DATA    ENDS 
                                 
 0506                           CODE    SEGMENT 
                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
                                 
                                 
                                ;Interrupt routines 
                                ASSUME  CS:DG,DS:NOTHING,ES:NOTHING,SS:NOTHING 
                                        IF      HARDINT 
 0506                           HDSPINT:                        ;Hardware inter
				rupt entry point 
 0506  2E: FE 06 0196 R                 INC     [TICKCNT]       ;Tick 
 050B  2E: FE 06 0197 R                 INC     [TICKSUB]       ;Tick 
 0510  2E: 80 3E 0198 R 00              CMP     [SLICECNT],0 
 0516  74 07                            JZ      TIMENOW 
 0518  2E: FE 0E 0198 R                 DEC     [SLICECNT]      ;Count down 
 051D  EB 3C                            JMP     SHORT CHAININT  ;Not time yet 
 051F                           TIMENOW: 
 051F  2E: 80 3E 0194 R 00              CMP     [BUSY],0        ;See if interru
				pting ourself 
 0525  75 34                            JNZ     CHAININT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-67
                                                            

 0527  1E                               PUSH    DS 
 0528  56                               PUSH    SI 
 0529  2E: C5 36 018C R                 LDS     SI,[INDOS]      ;Check for maki
				ng DOS calls 
 052E  80 3C 00                         CMP     BYTE PTR [SI],0 
 0531  5E                               POP     SI 
 0532  1F                               POP     DS 
 0533  75 26                            JNZ     CHAININT        ;DOS is Buisy 
 0535  2E: FE 06 0194 R                 INC     [BUSY]          ;Exclude furthu
				r interrupts 
 053A  2E: C6 06 0196 R 00              MOV     [TICKCNT],0     ;Reset tick cou
				nter 
 0540  2E: C6 06 0197 R 00              MOV     [TICKSUB],0     ;Reset tick cou
				nter 
 0546  FB                               STI                     ;Keep things ro
				lling 
                                 
                                        IF      AINT 
 0547  B0 20                            MOV     AL,EOI          ;Acknowledge in
				terrupt 
 0549  E6 20                            OUT     AKPORT,AL 
                                        ENDIF 
                                 
 054B  E8 058E R                        CALL    DOINT 
 054E  FA                               CLI 
 054F  2E: C6 06 0198 R 08              MOV     [SLICECNT],TIMESLICE    ;Either
				 soft or hard int resets time slice 
 0555  2E: C6 06 0194 R 00              MOV     [BUSY],0        ;Done, let othe
				rs in 
 055B                           CHAININT: 
 055B  2E: FF 2E 0190 R                 JMP     [NEXTINT]       ;Chain to next 
				clock routine 
                                        ENDIF 
                                 
                                 
 0560                           SPINT:                          ;INT 28H entry 
				point 
                                        IF      HARDINT 
 0560  2E: 80 3E 0194 R 00              CMP     [BUSY],0 
 0566  75 21                            JNZ     NXTSP 
 0568  2E: FE 06 0194 R                 INC     [BUSY]          ;Exclude hardwa
				re interrupt 
 056D  2E: FE 06 0195 R                 INC     [SOFINT]        ;Indicate a sof
				tware int in progress 
                                        ENDIF 
                                 
 0572  FB                               STI                     ;Hardware inter
				rupts ok on INT 28H entry 
 0573  E8 058E R                        CALL    DOINT 
                                 
                                        IF      HARDINT 
 0576  FA                               CLI 
 0577  2E: C6 06 0195 R 00              MOV     [SOFINT],0      ;Indicate INT d
				one 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-68
                                                            

 057D  2E: C6 06 0198 R 08              MOV     [SLICECNT],TIMESLICE    ;Either
				 soft or hard int resets time slice 
 0583  2E: C6 06 0194 R 00              MOV     [BUSY],0 
                                        ENDIF 
                                 
 0589  2E: FF 2E 019A R         NXTSP:  JMP     [SPNEXT]        ;Chain to next 
				INT 28 
                                 
 058E                           DOINT: 
 058E  56                               PUSH    SI 
 058F  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
 0594  46                               INC     SI 
 0595  46                               INC     SI 
 0596  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
 059A  5E                               POP     SI 
 059B  75 03                            JNZ     GOAHEAD 
 059D  E9 065E R                        JMP     SPRET           ;Nothing to do 
 05A0                           GOAHEAD: 
 05A0  50                               PUSH    AX              ;Need a working
				 register 
 05A1  2E: 8C 16 019F R                 MOV     [SSsave],SS 
 05A6  2E: 89 26 01A1 R                 MOV     [SPsave],SP 
 05AB  8C C8                            MOV     AX,CS 
 05AD  FA                               CLI 
                                ;Go to internal stack to prevent INT 24 overflo
				wing system stack 
 05AE  8E D0                            MOV     SS,AX 
 05B0  BC 018C R                        MOV     SP,OFFSET DG:ISTACK 
 05B3  FB                               STI 
 05B4  06                               PUSH    ES 
 05B5  1E                               PUSH    DS 
 05B6  53                               PUSH    BX 
 05B7  51                               PUSH    CX 
 05B8  52                               PUSH    DX 
 05B9  56                               PUSH    SI 
 05BA  57                               PUSH    DI 
 05BB  0E                               PUSH    CS 
 05BC  1F                               POP     DS 
                                ASSUME  DS:DG 
                                 
 05BD  8B 1E 01B0 R                     MOV     BX,[NXTCHR] 
 05C1  81 FB 0505 R                     CMP     BX,OFFSET DG:BUFFER + BLKSIZ 
 05C5  75 03                            JNZ     PLOOP 
 05C7  E9 0662 R                        JMP     READBUFF                ;Buffer
				 empty 
                                 
 05CA                           PLOOP: 
                                        IF      HARDINT 
 05CA  8B 1E 01B0 R                     MOV     BX,[NXTCHR] 
 05CE  81 FB 0505 R                     CMP     BX,OFFSET DG:BUFFER + BLKSIZ 
 05D2  74 76                            JZ      DONEJMP                 ;Buffer
				 has become empty 
 05D4  80 3E 0195 R 00                  CMP     [SOFINT],0 
 05D9  75 07                            JNZ     STATCHK 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-69
                                                            

 05DB  80 3E 0196 R 02                  CMP     [TICKCNT],MAXTICK       ;Check 
				our time slice 
 05E0  73 68                            JAE     DONEJMP 
 05E2                           STATCHK: 
                                        ENDIF 
                                 
 05E2  E8 0959 R                        CALL    PSTAT 
                                 
                                        IF      HARDINT 
 05E5  74 10                            JZ      DOCHAR                  ;Printe
				r ready 
 05E7  80 3E 0195 R 00                  CMP     [SOFINT],0 
                                        ENDIF 
                                 
 05EC  75 5C                            JNZ     DONEJMP                 ;If sof
				t int give up 
                                 
                                        IF      HARDINT 
 05EE  80 3E 0197 R 01                  CMP     [TICKSUB],BUSYTICK      ;Check 
				our busy timeout 
 05F3  73 55                            JAE     DONEJMP 
 05F5  EB D3                            JMP     PLOOP 
                                        ENDIF 
                                 
 05F7                           DOCHAR: 
 05F7  8A 07                            MOV     AL,BYTE PTR [BX] 
 05F9  3C 1A                            CMP     AL,1AH                  ;^Z? 
 05FB  74 62                            JZ      FILEOFJ                 ;CPM EO
				F 
 05FD  3C 0D                            CMP     AL,0DH                  ;CR? 
 05FF  75 05                            JNZ     NOTCR 
 0601  C6 06 01AF R 00                  MOV     [COLPOS],0 
 0606                           NOTCR: 
 0606  3C 09                            CMP     AL,9                    ;TAB? 
 0608  75 1D                            JNZ     NOTABDO 
 060A  8A 0E 01AF R                     MOV     CL,[COLPOS] 
 060E  80 C9 F8                         OR      CL,0F8H 
 0611  F6 D9                            NEG     CL 
 0613  32 ED                            XOR     CH,CH 
 0615  E3 23                            JCXZ    TABDONE 
 0617                           TABLP: 
 0617  B0 20                            MOV     AL," " 
 0619  FE 06 01AF R                     INC     [COLPOS] 
 061D  51                               PUSH    CX 
 061E  E8 0981 R                        CALL    POUT 
 0621  59                               POP     CX 
 0622  E2 F3                            LOOP    TABLP 
 0624  EB 14 90                         JMP     TABDONE 
                                 
 0627                           NOTABDO: 
 0627  3C 08                            CMP     AL,8                    ;Back s
				pace? 
 0629  75 04                            JNZ     NOTBACK 
 062B  FE 0E 01AF R                     DEC     [COLPOS] 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-70
                                                            

 062F                           NOTBACK: 
 062F  3C 20                            CMP     AL,20H                  ;Non Pr
				inting char? 
 0631  72 04                            JB      NOCHAR 
 0633  FE 06 01AF R                     INC     [COLPOS]                ;Printi
				ng char 
 0637                           NOCHAR: 
 0637  E8 0981 R                        CALL    POUT                    ;Print 
				it 
 063A                           TABDONE: 
 063A  FF 06 01B0 R                     INC     [NXTCHR]                ;Next c
				har 
                                 
                                        IF      HARDINT 
 063E  C6 06 0197 R 00                  MOV     [TICKSUB],0             ;Got a 
				character out, Reset counter 
 0643  80 3E 0195 R 00                  CMP     [SOFINT],0              ;Soft i
				nt does one char at a time 
 0648  74 80                            JZ      PLOOP 
                                        ENDIF 
                                 
 064A                           DONEJMP: 
 064A  5F                               POP     DI 
 064B  5E                               POP     SI 
 064C  5A                               POP     DX 
 064D  59                               POP     CX 
 064E  5B                               POP     BX 
 064F  1F                               POP     DS 
 0650  07                               POP     ES 
                                ASSUME  DS:NOTHING,ES:NOTHING 
 0651  FA                               CLI 
 0652  2E: 8E 16 019F R                 MOV     SS,[SSsave]             ;Restor
				e Entry Stack 
 0657  2E: 8B 26 01A1 R                 MOV     SP,[SPsave] 
 065C  FB                               STI 
 065D  58                               POP     AX 
 065E                           SPRET: 
 065E  C3                               RET 
                                 
 065F  EB 65 90                 FILEOFJ: JMP    FILEOF 
                                 
 0662                           READBUFF: 
                                ASSUME  DS:DG,ES:NOTHING 
                                 
 0662  B0 24                            MOV     AL,24H 
 0664  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0666  CD 21                            INT     21H 
 0668  8C 06 01A9 R                     MOV     WORD PTR [HERRINT+2],ES        
				 ;Save current vector 
 066C  89 1E 01A7 R                     MOV     WORD PTR [HERRINT],BX 
 0670  BA 06D1 R                        MOV     DX,OFFSET DG:DSKERR 
 0673  B0 24                            MOV     AL,24H 
 0675  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR        
				 ;Install our own 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-71
                                                            

 0677  CD 21                            INT     21H             ;Spooler must c
				atch its errors 
 0679  B4 2F                            MOV     AH,GET_DMA 
 067B  CD 21                            INT     21H 
 067D  8C 06 01A5 R                     MOV     WORD PTR [DMAADDR+2],ES        
				 ;Save DMA address 
 0681  89 1E 01A3 R                     MOV     WORD PTR [DMAADDR],BX 
 0685  BA 0305 R                        MOV     DX,OFFSET DG:BUFFER 
 0688  B4 1A                            MOV     AH,SET_DMA 
 068A  CD 21                            INT     21H             ;New DMA addres
				s 
 068C  C6 06 01B8 R 00                  MOV     [PABORT],0      ;No abort 
 0691  8B 16 01B2 R                     MOV     DX,[CURRFIL]    ;Read 
 0695  42                               INC     DX 
 0696  42                               INC     DX              ;Skip over poin
				ter 
 0697  B4 14                            MOV     AH,FCB_SEQ_READ 
 0699  CD 21                            INT     21H 
 069B  50                               PUSH    AX 
 069C  C5 16 01A3 R                     LDS     DX,[DMAADDR] 
                                ASSUME  DS:NOTHING 
 06A0  B4 1A                            MOV     AH,SET_DMA 
 06A2  CD 21                            INT     21H             ;Restore DMA 
 06A4  2E: C5 16 01A7 R                 LDS     DX,[HERRINT] 
 06A9  B0 24                            MOV     AL,24H 
 06AB  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 06AD  CD 21                            INT     21H             ;Restore Error 
				INT 
 06AF  58                               POP     AX 
 06B0  0E                               PUSH    CS 
 06B1  1F                               POP     DS 
                                ASSUME  DS:DG 
 06B2  80 3E 01B8 R 00                  CMP     [PABORT],0 
 06B7  75 12                            JNZ     TONEXTFIL       ;Barf on this f
				ile, got INT 24 
 06B9  3C 01                            CMP     AL,01 
 06BB  74 09                            JZ      FILEOF          ;Read EOF? 
 06BD  BB 0305 R                        MOV     BX,OFFSET DG:BUFFER     ;Buffer
				 full 
 06C0  89 1E 01B0 R                     MOV     [NXTCHR],BX 
 06C4  EB 84                            JMP     DONEJMP 
                                 
 06C6                           FILEOF: 
 06C6  B0 0C                            MOV     AL,0CH          ;Form feed 
 06C8  E8 0929 R                        CALL    LOUT 
 06CB                           TONEXTFIL: 
 06CB  E8 0904 R                        CALL    NEXTFIL 
 06CE  E9 064A R                        JMP     DONEJMP 
                                 
                                ;INT 24 handler 
                                 
 06D1                           DSKERR: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 06D1  FB                               STI 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-72
                                                            

 06D2  2E: 80 3E 01B8 R 00              CMP     [PABORT],0 
 06D8  75 5B                            JNZ     IGNRET 
 06DA  53                               PUSH    BX 
 06DB  51                               PUSH    CX 
 06DC  52                               PUSH    DX 
 06DD  57                               PUSH    DI 
 06DE  56                               PUSH    SI 
 06DF  55                               PUSH    BP 
 06E0  06                               PUSH    ES 
 06E1  1E                               PUSH    DS 
 06E2  0E                               PUSH    CS 
 06E3  1F                               POP     DS 
 06E4  0E                               PUSH    CS 
 06E5  07                               POP     ES 
                                ASSUME  DS:DG,ES:DG 
 06E6  00 06 0300 R                     ADD     [BADDRVM],AL    ;Set correct dr
				ive letter 
 06EA  BE 01B9 R                        MOV     SI,OFFSET DG:ERRMES 
 06ED  E8 091E R                        CALL    LISTMES 
 06F0  F6 C4 80                         TEST    AH,080H 
 06F3  75 43                            JNZ     FATERR 
 06F5  81 E7 00FF                       AND     DI,0FFH 
 06F9  83 FF 0C                         CMP     DI,12 
 06FC  76 03                            JBE     HAVCOD 
 06FE  BF 000C                          MOV     DI,12 
 0701                           HAVCOD: 
 0701  D1 E7                            SHL     DI,1 
 0703  8B BD 023C R                     MOV     DI,WORD PTR [DI+MESBAS] ; Get p
				ointer to error message 
 0707  8B F7                            MOV     SI,DI 
 0709  E8 091E R                        CALL    LISTMES          ; Print error 
				type 
 070C  BF 01DF R                        MOV     DI,OFFSET DG:EMFILNAM 
 070F  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
 0713  83 C6 02                         ADD     SI,2             ;Get to file n
				ame 
 0716  AC                               LODSB 
 0717  04 40                            ADD     AL,'@' 
 0719  AA                               STOSB 
 071A  47                               INC     DI 
 071B  B9 0004                          MOV     CX,4 
 071E  F3/ A5                           REP     MOVSW 
 0720  47                               INC     DI 
 0721  A5                               MOVSW 
 0722  A4                               MOVSB 
 0723  BE 01CA R                        MOV     SI,OFFSET DG:ERRMEST 
 0726  E8 091E R                        CALL    LISTMES 
 0729                           SETABORT: 
 0729  FE 06 01B8 R                     INC     [PABORT]                ;Indica
				te abort 
 072D  1F                               POP     DS 
 072E  07                               POP     ES 
 072F  5D                               POP     BP 
 0730  5E                               POP     SI 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-73
                                                            

 0731  5F                               POP     DI 
 0732  5A                               POP     DX 
 0733  59                               POP     CX 
 0734  5B                               POP     BX 
 0735                           IGNRET: 
 0735  32 C0                            XOR     AL,AL                   ;Ignore
				 
 0737  CF                               IRET 
                                 
 0738                           FATERR: 
 0738  BE 02E0 R                        MOV     SI,OFFSET DG:FATMES 
 073B  E8 091E R                        CALL    LISTMES 
 073E  EB E9                            JMP     SHORT SETABORT 
                                 
 0740  E9 08B1 R                ADDFILJ: JMP    ADDFIL 
                                 
 0743                           COMBUSY: 
 0743  B8 FFFF                          MOV     AX,-1 
 0746  CF                               IRET 
                                 
                                ;Communications interrupt 
 0747                           SPCOMINT: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0747  2E: 80 3E 0199 R 00              CMP     [CBUSY],0 
 074D  75 F4                            JNZ     COMBUSY 
 074F  2E: FE 06 0199 R                 INC     [CBUSY]                 ;Exclud
				e 
 0754  FB                               STI                             ;Turn i
				nts back on 
 0755  56                               PUSH    SI 
 0756  57                               PUSH    DI 
 0757  51                               PUSH    CX 
 0758  1E                               PUSH    DS 
 0759  0E                               PUSH    CS 
 075A  1F                               POP     DS 
                                ASSUME  DS:DG 
 075B  C6 06 019E R 00                  MOV     [PCANMES],0             ;Havn't
				 printed cancel message 
 0760  0A E4                            OR      AH,AH 
 0762  74 DC                            JZ      ADDFILJ                 ;Add fi
				le 
 0764  80 FC 01                         CMP     AH,1 
 0767  74 48                            JZ      CANFIL                  ;Cancel
				 File(s) 
 0769  32 C0                            XOR     AL,AL 
 076B                           SETCOUNT: 
 076B  50                               PUSH    AX              ;Save AL return
				 code 
 076C  32 E4                            XOR     AH,AH 
 076E  BE 0A73 R                        MOV     SI,OFFSET DG:SPLFCB 
 0771  8B 0E 0A6F R                     MOV     CX,[NUMFCBS] 
 0775                           CNTFILS: 
 0775  80 7C 02 FF                      CMP     BYTE PTR [SI+2],-1        ;Vali
				d? 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-74
                                                            

 0779  74 02                            JZ      LNEXT 
 077B  FE C4                            INC     AH 
 077D                           LNEXT: 
 077D  83 C6 28                         ADD     SI,FCBSIZ 
 0780  E2 F3                            LOOP    CNTFILS 
 0782                           COMRET: 
 0782  BB 0A73 R                        MOV     BX,OFFSET DG:SPLFCB 
 0785  8B 16 01B2 R                     MOV     DX,[CURRFIL] 
 0789  1E                               PUSH    DS 
 078A  07                               POP     ES 
                                ASSUME  ES:NOTHING 
 078B  8A EC                            MOV     CH,AH 
 078D  58                               POP     AX                      ;Get AL
				 return 
 078E  8A E5                            MOV     AH,CH 
                                 
                                        IF      HARDINT 
 0790                           BWAIT3: 
 0790  80 3E 0194 R 00                  CMP     [BUSY],0 
 0795  75 F9                            JNZ     BWAIT3 
 0797  FE 06 0194 R                     INC     [BUSY] 
                                        ENDIF 
                                 
 079B  E8 0959 R                        CALL    PSTAT                   ; Tweek
				 error counter 
                                 
                                        IF      HARDINT 
 079E  C6 06 0194 R 00                  MOV     [BUSY],0 
                                        ENDIF 
                                 
 07A3  1F                               POP     DS 
                                ASSUME  DS:NOTHING 
 07A4  59                               POP     CX 
 07A5  5F                               POP     DI 
 07A6  5E                               POP     SI 
 07A7  2E: C6 06 0199 R 00              MOV     [CBUSY],0 
 07AD  CF                               IRET 
                                 
 07AE  E9 087B R                DELALLJ: JMP    DELALL 
                                 
 07B1                           CANFIL: 
                                ASSUME  DS:DG,ES:NOTHING 
 07B1  8B 0E 0A6F R                     MOV     CX,[NUMFCBS] 
                                 
                                        IF      HARDINT 
 07B5                           BWAIT: 
 07B5  80 3E 0194 R 00                  CMP     [BUSY],0 
 07BA  75 F9                            JNZ     BWAIT 
 07BC  FE 06 0194 R                     INC     [BUSY] 
                                        ENDIF 
                                 
 07C0  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
 07C4  83 FA FF                         CMP     DX,-1 
 07C7  74 E5                            JZ      DELALLJ 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-75
                                                            

 07C9  8B 1C                            MOV     BX,[SI] 
 07CB  53                               PUSH    BX 
 07CC                           LOOKEND:                        ;Set initial po
				inter values 
 07CC  3B DE                            CMP     BX,SI 
 07CE  74 06                            JZ      GOTLAST 
 07D0  58                               POP     AX 
 07D1  53                               PUSH    BX 
 07D2  8B 1F                            MOV     BX,[BX] 
 07D4  EB F6                            JMP     SHORT LOOKEND 
                                 
 07D6                           GOTLAST: 
 07D6  5B                               POP     BX 
 07D7  89 1E 01B4 R                     MOV     [LASTFCB],BX 
 07DB  89 1E 01B6 R                     MOV     [LASTFCB2],BX 
 07DF  07                               POP     ES 
 07E0  06                               PUSH    ES 
 07E1  8B DE                            MOV     BX,SI 
 07E3                           LOOKMATCH: 
 07E3  8B FA                            MOV     DI,DX 
 07E5  83 C6 02                         ADD     SI,2                    ;Skip p
				ointer 
 07E8  80 3C FF                         CMP     BYTE PTR [SI],-1 
 07EB  74 6A                            JZ      CANTERMJ                ;No mor
				e 
 07ED  A6                               CMPSB 
 07EE  75 5D                            JNZ     SKIPFIL                 ;DRIVE 
 07F0  51                               PUSH    CX 
 07F1  B9 000B                          MOV     CX,11 
 07F4                           NXTCHAR: 
 07F4  26: 8A 05                        MOV     AL,ES:[DI] 
 07F7  47                               INC     DI 
 07F8  E8 08A6 R                        CALL    UPCONV 
 07FB  8A E0                            MOV     AH,AL 
 07FD  AC                               LODSB 
 07FE  E8 08A6 R                        CALL    UPCONV 
 0801  80 FC 3F                         CMP     AH,"?"                  ;Wild c
				ard? 
 0804  74 04                            JZ      NXTCHRLP                ;Yes 
 0806  3A E0                            CMP     AH,AL 
 0808  75 42                            JNZ     SKIPFILC 
 080A                           NXTCHRLP: 
 080A  E2 E8                            LOOP    NXTCHAR 
 080C                           MATCH: 
 080C  59                               POP     CX 
 080D  B4 FF                            MOV     AH,-1 
 080F  86 67 02                         XCHG    AH,[BX+2]               ;Zap it
				 
 0812  3B 1E 01B2 R                     CMP     BX,[CURRFIL]            ;Is cur
				rent file? 
 0816  75 41                            JNZ     REQUEUE                 ;No 
 0818  B0 01                            MOV     AL,1 
 081A  86 06 019E R                     XCHG    AL,[PCANMES] 
 081E  0A C0                            OR      AL,AL 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-76
                                                            

 0820  75 26                            JNZ     DIDCMES                 ;Only p
				rint cancel message once 
 0822  06                               PUSH    ES 
 0823  0E                               PUSH    CS 
 0824  07                               POP     ES 
 0825  BF 01F5 R                        MOV     DI,OFFSET DG:CANFILNAM 
 0828  8B F3                            MOV     SI,BX 
 082A  83 C6 03                         ADD     SI,3             ;Get to file n
				ame 
 082D  8A C4                            MOV     AL,AH 
 082F  04 40                            ADD     AL,'@' 
 0831  AA                               STOSB 
 0832  47                               INC     DI 
 0833  B9 0004                          MOV     CX,4 
 0836  F3/ A5                           REP     MOVSW 
 0838  47                               INC     DI 
 0839  A5                               MOVSW 
 083A  A4                               MOVSB 
 083B  07                               POP     ES 
 083C  BE 01F1 R                        MOV     SI,OFFSET DG:CANMES 
 083F  E8 091E R                        CALL    LISTMES 
 0842  BE 01ED R                        MOV     SI,OFFSET DG:BELMES 
 0845  E8 091E R                        CALL    LISTMES 
 0848                           DIDCMES: 
 0848  51                               PUSH    CX 
 0849  E8 0904 R                        CALL    NEXTFIL 
 084C                           SKIPFILC: 
 084C  59                               POP     CX 
 084D                           SKIPFIL: 
 084D  89 1E 01B6 R                     MOV     [LASTFCB2],BX 
 0851  8B 1F                            MOV     BX,[BX] 
 0853                           NEXTFC: 
 0853  8B F3                            MOV     SI,BX 
 0855  E2 8C                            LOOP    LOOKMATCH 
 0857  EB 43                    CANTERMJ: JMP   SHORT CANTERM 
                                 
 0859                           REQUEUE: 
 0859  8B 07                            MOV     AX,[BX] 
 085B  3B 06 01B2 R                     CMP     AX,[CURRFIL]            ;Is las
				t FCB? 
 085F  74 EC                            JZ      SKIPFIL                 ;Yes, i
				s in right place 
 0861  8B 36 01B6 R                     MOV     SI,[LASTFCB2] 
 0865  89 04                            MOV     [SI],AX                 ;Unlink
				 FCB 
 0867  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
 086B  89 37                            MOV     [BX],SI 
 086D  8B 36 01B4 R                     MOV     SI,[LASTFCB] 
 0871  89 1C                            MOV     [SI],BX                 ;Link F
				CB at end 
 0873  89 1E 01B4 R                     MOV     [LASTFCB],BX            ;New en
				d 
 0877  8B D8                            MOV     BX,AX                   ;Proces
				s what it pointed to 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-77
                                                            

 0879  EB D8                            JMP     SHORT NEXTFC 
                                 
 087B                           DELALL: 
 087B  2E: 80 7C 02 FF                  CMP     BYTE PTR CS:[SI+2],-1   ;Examin
				e current file 
 0880                           DELALL2: 
 0880  C6 44 02 FF                      MOV     BYTE PTR [SI+2],-1      ;Zap it
				 
 0884  8B 34                            MOV     SI,[SI] 
 0886  E2 F8                            LOOP    DELALL2 
 0888  74 0C                            JZ      CANTERM1                ;No mes
				sage if nothing was in progress 
 088A  BE 0219 R                        MOV     SI,OFFSET DG:ALLCAN 
 088D  E8 091E R                        CALL    LISTMES 
 0890  BE 01ED R                        MOV     SI,OFFSET DG:BELMES 
 0893  E8 091E R                        CALL    LISTMES 
 0896                           CANTERM1: 
 0896  C7 06 01B0 R 0505 R              MOV     [NXTCHR],OFFSET DG:BUFFER + BLK
				SIZ  ;Buffer empty 
 089C                           CANTERM: 
                                 
                                        IF      HARDINT 
 089C  C6 06 0194 R 00                  MOV     [BUSY],0 
                                        ENDIF 
                                 
 08A1  33 C0                            XOR     AX,AX 
 08A3  E9 076B R                        JMP     SETCOUNT 
                                 
 08A6                           UPCONV: 
 08A6  3C 61                            CMP     AL,'a' 
 08A8  72 06                            JB      NOCONV 
 08AA  3C 7A                            CMP     AL,'z' 
 08AC  77 02                            JA      NOCONV 
 08AE  2C 20                            SUB     AL,20H 
 08B0                           NOCONV: 
 08B0  C3                               RET 
                                 
 08B1                           ADDFIL: 
                                ASSUME  DS:DG,ES:NOTHING 
 08B1  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
 08B5  8B 0E 0A6F R                     MOV     CX,[NUMFCBS] 
                                 
                                        IF      HARDINT 
 08B9                           BWAIT2: 
 08B9  80 3E 0194 R 00                  CMP     [BUSY],0 
 08BE  75 F9                            JNZ     BWAIT2 
 08C0  FE 06 0194 R                     INC     [BUSY] 
                                        ENDIF 
                                 
 08C4                           LOOKSPOT: 
 08C4  80 7C 02 FF                      CMP     BYTE PTR [SI+2],-1 
 08C8  74 0E                            JZ      GOTSPOT 
 08CA  8B 34                            MOV     SI,[SI] 
 08CC  E2 F6                            LOOP    LOOKSPOT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-78
                                                            

                                 
                                        IF      HARDINT 
 08CE  C6 06 0194 R 00                  MOV     [BUSY],0 
                                        ENDIF 
                                 
 08D3  B0 01                            MOV     AL,1 
 08D5  E9 076B R                        JMP     SETCOUNT 
                                 
 08D8                           GOTSPOT: 
 08D8  1E                               PUSH    DS 
 08D9  07                               POP     ES 
 08DA  1F                               POP     DS 
 08DB  1E                               PUSH    DS 
                                ASSUME  DS:NOTHING 
 08DC  56                               PUSH    SI 
 08DD  8B FE                            MOV     DI,SI 
 08DF  83 C7 02                         ADD     DI,2 
 08E2  8B F2                            MOV     SI,DX 
 08E4  B9 0013                          MOV     CX,19 
 08E7  F3/ A5                           REP     MOVSW           ;Copy in and se
				t FCB 
 08E9  5E                               POP     SI 
 08EA  06                               PUSH    ES 
 08EB  1F                               POP     DS 
                                ASSUME  DS:DG 
 08EC  C7 44 0E 0000                    MOV     WORD PTR [SI+2+fcb_EXTENT],0 
 08F1  C6 44 22 00                      MOV     BYTE PTR [SI+2+fcb_NR],0 
 08F5  C7 44 10 0200                    MOV     WORD PTR [SI+2+fcb_RECSIZ],BLKS
				IZ 
                                 
                                        IF      HARDINT 
 08FA  C6 06 0194 R 00                  MOV     [BUSY],0 
                                        ENDIF 
                                 
 08FF  32 C0                            XOR     AL,AL 
 0901  E9 076B R                        JMP     SETCOUNT 
                                 
 0904                           NEXTFIL: 
                                ASSUME  DS:DG,ES:NOTHING 
 0904  8B 36 01B2 R                     MOV     SI,[CURRFIL] 
 0908  C6 44 02 FF                      MOV     BYTE PTR [SI+2],-1      ;Done w
				ith current file 
 090C  8B 34                            MOV     SI,[SI] 
 090E  89 36 01B2 R                     MOV     [CURRFIL],SI 
 0912  C7 06 01B0 R 0505 R              MOV     [NXTCHR],OFFSET DG:BUFFER + BLK
				SIZ  ;Buffer empty 
 0918  C6 06 01AF R 00                  MOV     [COLPOS],0                     
				     ;Start of line 
 091D  C3                               RET 
                                 
 091E                           LISTMES: 
                                ASSUME  DS:DG,ES:NOTHING 
 091E  AC                               LODSB 
 091F  3C 24                            CMP     AL,"$" 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-79
                                                            

 0921  74 05                            JZ      LMESDONE 
 0923  E8 0929 R                        CALL    LOUT 
 0926  EB F6                            JMP     LISTMES 
                                 
 0928                           LMESDONE: 
 0928  C3                               RET 
                                 
 0929                           LOUT: 
 0929  53                               PUSH    BX 
 092A                           LWAIT: 
 092A  E8 0959 R                        CALL    PSTAT 
 092D  74 0A                            JZ      PREADY 
 092F  81 3E 0A71 R 4E20                CMP     [ERRCNT],ERRCNT2 
 0935  77 05                            JA      POPRET                  ;Don't 
				get stuck 
 0937  EB F1                            JMP     SHORT LWAIT 
 0939                           PREADY: 
 0939  E8 0981 R                        CALL    POUT 
 093C                           POPRET: 
 093C  5B                               POP     BX 
 093D  C3                               RET 
                                 
                                ;Stuff for BIOS interface 
 = 0200                         IOBUSY  EQU     0200H 
 = 8000                         IOERROR EQU     8000H 
                                 
 093E  ??                       BYTEBUF DB      ? 
                                 
 093F  ????????                 CALLAD  DD      ? 
                                 
 0943  16                       IOCALL  DB      22 
 0944  00                               DB      0 
 0945  ??                       IOREQ   DB      ? 
 0946  0000                     IOSTAT  DW      0 
 0948  0008[                            DB      8 DUP(?) 
            ??                  
                         ]      
                                
 0950  00                               DB      0 
 0951  093E R                           DW      OFFSET DG:BYTEBUF 
 0953  ????                     INTSEG  DW      ? 
 0955  0001                     IOCNT   DW      1 
 0957  0000                             DW      0 
                                 
 0959                           PSTAT: 
                                ASSUME  DS:DG 
 0959  53                               PUSH    BX 
 095A  FF 06 0A71 R                     INC     [ERRCNT] 
 095E  B3 0A                            MOV     BL,10 
 0960  E8 0986 R                        CALL    DOCALL 
 0963  F7 06 0946 R 8000                TEST    [IOSTAT],IOERROR 
 0969  74 06                            JZ      NOSTATERR 
 096B  81 0E 0946 R 0200                OR      [IOSTAT],IOBUSY         ;If err
				or, show buisy 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-80
                                                            

 0971                           NOSTATERR: 
 0971  F7 06 0946 R 0200                TEST    [IOSTAT],IOBUSY 
 0977  75 06                            JNZ     RET13P                  ;Shows 
				buisy 
 0979  C7 06 0A71 R 0000                MOV     [ERRCNT],0 
 097F                           RET13P: 
 097F  5B                               POP     BX 
 0980  C3                               RET 
                                 
 0981                           POUT: 
                                ASSUME  DS:DG 
 0981  A2 093E R                        MOV     [BYTEBUF],AL 
 0984  B3 08                            MOV     BL,8 
 0986                           DOCALL: 
 0986  06                               PUSH    ES 
 0987  88 1E 0945 R                     MOV     [IOREQ],BL 
 098B  8C CB                            MOV     BX,CS 
 098D  8E C3                            MOV     ES,BX 
 098F  BB 0943 R                        MOV     BX,OFFSET DG:IOCALL 
 0992  C7 06 0946 R 0000                MOV     [IOSTAT],0 
 0998  C7 06 0955 R 0001                MOV     [IOCNT],1 
 099E  1E                               PUSH    DS 
 099F  56                               PUSH    SI 
 09A0  50                               PUSH    AX 
 09A1  C5 36 01AB R                     LDS     SI,[LISTDEV] 
                                ASSUME  DS:NOTHING 
 09A5  8B 44 06                         MOV     AX,[SI+6] 
 09A8  2E: A3 093F R                    MOV     WORD PTR [CALLAD],AX 
 09AC  2E: FF 1E 093F R                 CALL    [CALLAD] 
 09B1  8B 44 08                         MOV     AX,[SI+8] 
 09B4  2E: A3 093F R                    MOV     WORD PTR [CALLAD],AX 
 09B8  2E: FF 1E 093F R                 CALL    [CALLAD] 
 09BD  58                               POP     AX 
 09BE  5E                               POP     SI 
 09BF  1F                               POP     DS 
                                ASSUME  DS:DG 
 09C0  07                               POP     ES 
 09C1  C3                               RET 
                                 
                                        IF      IBM 
 09C2  ????????                 REAL_INT_13 DD  ? 
 09C6  09DF R                   INT_13_RETADDR DW OFFSET DG:INT_13_BACK 
                                 
 09C8                           INT_13  PROC    FAR 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 09C8  9C                               PUSHF 
 09C9  2E: FE 06 0194 R                 INC     [BUSY]                  ;Exclud
				e if dumb program call ROM 
 09CE  0E                               PUSH    CS 
 09CF  2E: FF 36 09C6 R                 PUSH    [INT_13_RETADDR] 
 09D4  2E: FF 36 09C4 R                 PUSH    WORD PTR [REAL_INT_13+2] 
 09D9  2E: FF 36 09C2 R                 PUSH    WORD PTR [REAL_INT_13] 
 09DE  CB                               RET 
                                INT_13  ENDP 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-81
                                                            

                                 
 09DF                           INT_13_BACK     PROC    FAR 
 09DF  9C                               PUSHF 
 09E0  2E: FE 0E 0194 R                 DEC     [BUSY] 
 09E5  9D                               POPF 
 09E6  CA 0002                          RET     2               ;Chuck saved fl
				ags 
                                INT_13_BACK     ENDP 
                                        ENDIF 
                                 
                                 
                                        IF      IBM 
                                 
 09E9  ????????                 REAL_INT_5  DD  ? 
 09ED  ????????                 REAL_INT_17 DD  ? 
 09F1  0000                     INT_17_NUM  DW  0 
                                 
 09F3                           INT_17: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 09F3  56                               PUSH    SI 
 09F4  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
 09F9  46                               INC     SI 
 09FA  46                               INC     SI 
 09FB  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
 09FF  5E                               POP     SI 
 0A00  74 13                            JZ      DO_INT_17               ;Nothin
				g pending, so OK 
 0A02  2E: 3B 16 09F1 R                 CMP     DX,[INT_17_NUM] 
 0A07  75 0C                            JNZ     DO_INT_17               ;Not my
				 unit 
 0A09  2E: 80 3E 0194 R 00              CMP     [BUSY],0 
 0A0F  75 04                            JNZ     DO_INT_17               ;You ar
				e me 
 0A11  FB                               STI 
 0A12  B4 A1                            MOV     AH,0A1H                 ;You ar
				e bad, get out of paper 
 0A14  CF                               IRET 
                                 
 0A15                           DO_INT_17: 
 0A15  2E: FF 2E 09ED R                 JMP     [REAL_INT_17]           ;Do a 1
				7 
                                 
 0A1A  ????????                 REAL_INT_14 DD  ? 
 0A1E  0000                     INT_14_NUM  DW  0 
                                 
 0A20                           INT_14: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0A20  56                               PUSH    SI 
 0A21  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
 0A26  46                               INC     SI 
 0A27  46                               INC     SI 
 0A28  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
 0A2C  5E                               POP     SI 
 0A2D  74 1E                            JZ      DO_INT_14               ;Nothin
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-82
                                                            

				g pending, so OK 
 0A2F  2E: 3B 16 0A1E R                 CMP     DX,[INT_14_NUM] 
 0A34  75 17                            JNZ     DO_INT_14               ;Not my
				 unit 
 0A36  2E: 80 3E 0194 R 00              CMP     [BUSY],0 
 0A3C  75 0F                            JNZ     DO_INT_14               ;You ar
				e me 
 0A3E  FB                               STI 
 0A3F  0A E4                            OR      AH,AH 
 0A41  74 05                            JZ      SET14_AX 
 0A43  80 FC 02                         CMP     AH,2 
 0A46  76 02                            JBE     SET14_AH 
 0A48                           SET14_AX: 
 0A48  B0 00                            MOV     AL,0 
 0A4A                           SET14_AH: 
 0A4A  B4 80                            MOV     AH,80H                  ;Time o
				ut 
 0A4C  CF                               IRET 
                                 
 0A4D                           DO_INT_14: 
 0A4D  2E: FF 2E 0A1A R                 JMP     [REAL_INT_14]           ;Do a 1
				4 
                                 
 0A52                           INT_5: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0A52  56                               PUSH    SI 
 0A53  2E: 8B 36 01B2 R                 MOV     SI,[CURRFIL] 
 0A58  46                               INC     SI 
 0A59  46                               INC     SI 
 0A5A  2E: 80 3C FF                     CMP     BYTE PTR CS:[SI],-1 
 0A5E  5E                               POP     SI 
 0A5F  74 09                            JZ      DO_INT_5                ;Nothin
				g pending, so OK 
 0A61  2E: 83 3E 09F1 R 00              CMP     [INT_17_NUM],0 
 0A67  75 01                            JNZ     DO_INT_5                ;Only c
				are about unit 0 
 0A69  CF                               IRET                            ;Preten
				d it worked 
                                 
 0A6A                           DO_INT_5: 
 0A6A  2E: FF 2E 09E9 R                 JMP     [REAL_INT_5]            ;Do a 5
				 
                                        ENDIF 
                                 
                                 
                                ;The following data is order and position depen
				dant 
 0A6F  000A                     NUMFCBS DW      10 
 0A71  0000                     ERRCNT  DW      0 
                                 
 0A73  0A9B R                   SPLFCB  DW      OFFSET DG:FC1 
 0A75  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-83
                                                            

                                
 0A9B  0AC3 R                   FC1     DW      OFFSET DG:FC2 
 0A9D  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0AC3  0AEB R                   FC2     DW      OFFSET DG:FC3 
 0AC5  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0AEB  0B13 R                   FC3     DW      OFFSET DG:FC4 
 0AED  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0B13  0B3B R                   FC4     DW      OFFSET DG:FC5 
 0B15  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0B3B  0B63 R                   FC5     DW      OFFSET DG:FC6 
 0B3D  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0B63  0B8B R                   FC6     DW      OFFSET DG:FC7 
 0B65  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0B8B  0BB3 R                   FC7     DW      OFFSET DG:FC8 
 0B8D  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0BB3  0BDB R                   FC8     DW      OFFSET DG:FC9 
 0BB5  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
 0BDB  0A73 R                   FC9     DW      OFFSET DG:SPLFCB 
 0BDD  0026[                            DB      (FCBSIZ - 2) DUP (-1) 
            FF                  
                         ]      
                                
                                 
 0C03                           DEF_ENDRES      LABEL   BYTE 
                                 
                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
                                 
 0C03                           BADSPOOL: 
 0C03  BA 00FE R                        MOV     DX,OFFSET DG:BADMES 
 0C06  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-84
                                                            

 0C08  CD 21                            INT     21H 
 0C0A  CD 20                            INT     20H 
                                 
 0C0C                           SETUP: 
                                ;Called once to install resident 
 0C0C  FC                               CLD 
 0C0D  8C 0E 0953 R                     MOV     [INTSEG],CS 
 0C11  BA 014B R                        MOV     DX,OFFSET DG:PROMPT 
 0C14  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0C16  CD 21                            INT     21H 
 0C18  BA 0229 R                        MOV     DX,OFFSET DG:COMBUF 
 0C1B  B4 0A                            MOV     AH,STD_CON_STRING_INPUT 
 0C1D  CD 21                            INT     21H                     ;Get de
				vice name 
 0C1F  BA 00A6 R                        MOV     DX,OFFSET DG:CRLF 
 0C22  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0C24  CD 21                            INT     21H 
 0C26  8A 0E 022A R                     MOV     CL,[COMBUF+1] 
 0C2A  0A C9                            OR      CL,CL 
 0C2C  74 0A                            JZ      DEFSPOOL                ;User d
				idn't specify one 
 0C2E  32 ED                            XOR     CH,CH 
 0C30  BF 023A R                        MOV     DI,OFFSET DG:LISTFCB + 1 
 0C33  BE 022B R                        MOV     SI,OFFSET DG:COMBUF + 2 
 0C36  F3/ A4                           REP     MOVSB 
 0C38                           DEFSPOOL: 
 0C38  BA 0239 R                        MOV     DX,OFFSET DG:LISTFCB 
 0C3B  B4 0F                            MOV     AH,FCB_OPEN 
 0C3D  CD 21                            INT     21H 
 0C3F  0A C0                            OR      AL,AL 
 0C41  75 C0                            JNZ     BADSPOOL                ;Bad 
 0C43  F6 06 0251 R 80                  TEST    BYTE PTR [LISTFCB.fcb_DEVID],08
				0H 
 0C48  74 B9                            JZ      BADSPOOL                ;Must b
				e a device 
 0C4A  C5 36 0252 R                     LDS     SI,DWORD PTR [LISTFCB.fcb_FIRCL
				US] 
                                ASSUME  DS:NOTHING 
 0C4E  36: 8C 1E 0941 R                 MOV     WORD PTR [CALLAD+2],DS     ;Get
				 I/O routines 
 0C53  36: 8C 1E 01AD R                 MOV     WORD PTR [LISTDEV+2],DS    ;Get
				 I/O routines 
 0C58  36: 89 36 01AB R                 MOV     WORD PTR [LISTDEV],SI 
 0C5D  0E                               PUSH    CS 
 0C5E  1F                               POP     DS 
                                ASSUME  DS:DG 
 0C5F  BA 0560 R                        MOV     DX,OFFSET DG:SPINT 
 0C62  B0 28                            MOV     AL,SOFTINT 
 0C64  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0C66  CD 21                            INT     21H                     ;Get so
				ft vector 
 0C68  8C 06 019C R                     MOV     WORD PTR [SPNEXT+2],ES 
 0C6C  89 1E 019A R                     MOV     WORD PTR [SPNEXT],BX 
 0C70  B0 28                            MOV     AL,SOFTINT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-85
                                                            

 0C72  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 0C74  CD 21                            INT     21H                     ;Set so
				ft vector 
 0C76  BA 0747 R                        MOV     DX,OFFSET DG:SPCOMINT 
 0C79  B0 2F                            MOV     AL,COMINT 
 0C7B  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR        
				      ;Set communication vector 
 0C7D  CD 21                            INT     21H 
                                 
                                        IF      IBM 
 0C7F  B0 13                            MOV     AL,13H 
 0C81  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0C83  CD 21                            INT     21H 
 0C85  8C 06 09C4 R                     MOV     WORD PTR [REAL_INT_13+2],ES 
 0C89  89 1E 09C2 R                     MOV     WORD PTR [REAL_INT_13],BX 
 0C8D  BA 09C8 R                        MOV     DX,OFFSET DG:INT_13 
 0C90  B0 13                            MOV     AL,13H 
 0C92  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 0C94  CD 21                            INT     21H             ;Set diskI/O in
				terrupt 
 0C96  B0 17                            MOV     AL,17H 
 0C98  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0C9A  CD 21                            INT     21H 
 0C9C  8C 06 09EF R                     MOV     WORD PTR [REAL_INT_17+2],ES 
 0CA0  89 1E 09ED R                     MOV     WORD PTR [REAL_INT_17],BX 
 0CA4  B0 14                            MOV     AL,14H 
 0CA6  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0CA8  CD 21                            INT     21H 
 0CAA  8C 06 0A1C R                     MOV     WORD PTR [REAL_INT_14+2],ES 
 0CAE  89 1E 0A1A R                     MOV     WORD PTR [REAL_INT_14],BX 
 0CB2  B0 05                            MOV     AL,5H 
 0CB4  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0CB6  CD 21                            INT     21H 
 0CB8  8C 06 09EB R                     MOV     WORD PTR [REAL_INT_5+2],ES 
 0CBC  89 1E 09E9 R                     MOV     WORD PTR [REAL_INT_5],BX 
 0CC0  0E                               PUSH    CS 
 0CC1  07                               POP     ES 
 0CC2  BD 023A R                        MOV     BP,OFFSET DG:LISTFCB + 1 
 0CC5  8B F5                            MOV     SI,BP 
 0CC7  B9 0008                          MOV     CX,8 
 0CCA                           CONLP:                  ;Make sure device name 
				in upper case 
 0CCA  AC                               LODSB 
 0CCB  3C 61                            CMP     AL,'a' 
 0CCD  72 08                            JB      DOCONLP 
 0CCF  3C 7A                            CMP     AL,'z' 
 0CD1  77 04                            JA      DOCONLP 
 0CD3  80 6C FF 20                      SUB     BYTE PTR [SI-1],20H 
 0CD7                           DOCONLP: 
 0CD7  E2 F1                            LOOP    CONLP 
 0CD9  BF 01E1 R                        MOV     DI,OFFSET DG:INT_17_HITLIST 
 0CDC                           CHKHIT: 
 0CDC  8B F5                            MOV     SI,BP 
 0CDE  8A 0D                            MOV     CL,[DI] 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-86
                                                            

 0CE0  47                               INC     DI 
 0CE1  E3 25                            JCXZ    NOTONHITLIST 
 0CE3  F3/ A6                           REPE    CMPSB 
 0CE5  9F                               LAHF 
 0CE6  03 F9                            ADD     DI,CX           ;Bump to next p
				osition without affecting flags 
 0CE8  8A 1D                            MOV     BL,[DI]         ;Get device num
				ber 
 0CEA  47                               INC     DI 
 0CEB  9E                               SAHF 
 0CEC  75 EE                            JNZ     CHKHIT 
 0CEE  32 FF                            XOR     BH,BH 
 0CF0  89 1E 09F1 R                     MOV     [INT_17_NUM],BX 
 0CF4  BA 09F3 R                        MOV     DX,OFFSET DG:INT_17 
 0CF7  B0 17                            MOV     AL,17H 
 0CF9  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 0CFB  CD 21                            INT     21H             ;Set printer in
				terrupt 
 0CFD  BA 0A52 R                        MOV     DX,OFFSET DG:INT_5 
 0D00  B0 05                            MOV     AL,5H 
 0D02  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 0D04  CD 21                            INT     21H             ;Set print scre
				en interrupt 
 0D06  EB 24                            JMP     SHORT ALLSET 
 0D08                           NOTONHITLIST: 
 0D08  BF 020A R                        MOV     DI,OFFSET DG:INT_14_HITLIST 
 0D0B                           CHKHIT2: 
 0D0B  8B F5                            MOV     SI,BP 
 0D0D  8A 0D                            MOV     CL,[DI] 
 0D0F  47                               INC     DI 
 0D10  E3 1A                            JCXZ    ALLSET 
 0D12  F3/ A6                           REPE    CMPSB 
 0D14  9F                               LAHF 
 0D15  03 F9                            ADD     DI,CX           ;Bump to next p
				osition without affecting flags 
 0D17  8A 1D                            MOV     BL,[DI]         ;Get device num
				ber 
 0D19  47                               INC     DI 
 0D1A  9E                               SAHF 
 0D1B  75 EE                            JNZ     CHKHIT2 
 0D1D  32 FF                            XOR     BH,BH 
 0D1F  89 1E 0A1E R                     MOV     [INT_14_NUM],BX 
 0D23  BA 0A20 R                        MOV     DX,OFFSET DG:INT_14 
 0D26  B0 14                            MOV     AL,14H 
 0D28  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 0D2A  CD 21                            INT     21H             ;Set RS232 port
				 interrupt 
 0D2C                           ALLSET: 
                                        ENDIF 
                                 
                                        IF      HARDINT 
 0D2C  B4 34                            MOV     AH,GET_INDOS_FLAG 
 0D2E  CD 21                            INT     21H 
 0D30  8C 06 018E R                     MOV     WORD PTR [INDOS+2],ES   ;Get in
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-87
                                                            

				dos flag location 
 0D34  89 1E 018C R                     MOV     WORD PTR [INDOS],BX 
 0D38  B0 1C                            MOV     AL,INTLOC 
 0D3A  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0D3C  CD 21                            INT     21H 
 0D3E  8C 06 0192 R                     MOV     WORD PTR [NEXTINT+2],ES 
 0D42  89 1E 0190 R                     MOV     WORD PTR [NEXTINT],BX 
 0D46  BA 0506 R                        MOV     DX,OFFSET DG:HDSPINT 
 0D49  B0 1C                            MOV     AL,INTLOC 
 0D4B  B4 25                            MOV     AH,SET_INTERRUPT_VECTOR 
 0D4D  CD 21                            INT     21H             ;Set hardware i
				nterrupt 
                                        ENDIF 
                                 
 0D4F  C6 06 0002 R 01                  MOV     [MAKERES],1     ;Indicate to do
				 a terminate stay resident 
 0D54  BA 0128 R                        MOV     DX,OFFSET DG:GOODMES 
 0D57  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0D59  CD 21                            INT     21H 
 0D5B  C3                               RET 
                                 
                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
                                 
 0D5C                           TRANSIENT: 
                                ;User interface 
 0D5C  FC                               CLD 
                                 
                                ;Code to print header 
                                ;       MOV     DX,OFFSET DG:HEADER 
                                ;       MOV     AH,STD_CON_STRING_OUTPUT 
                                ;       INT     21H 
                                 
 = 0136                         DOSVER_LOW      EQU  0136H   ;1.54 in hex 
 = 020B                         DOSVER_HIGH     EQU  020BH   ;2.11 in hex 
 0D5D  B4 30                            MOV     AH,GET_VERSION 
 0D5F  CD 21                            INT     21H 
 0D61  86 E0                            XCHG    AH,AL           ;Turn it around
				 to AH.AL 
 0D63  3D 0136                          CMP     AX,DOSVER_LOW 
 0D66  72 05                            JB      GOTBADDOS 
 0D68  3D 020B                          CMP     AX,DOSVER_HIGH 
 0D6B  76 0B                            JBE     OKDOS 
 0D6D                           GOTBADDOS: 
 0D6D  0E                               PUSH    CS 
 0D6E  1F                               POP     DS 
 0D6F  BA 01C9 R                        MOV     DX,OFFSET DG:BADVER 
 0D72  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0D74  CD 21                            INT     21H 
 0D76  CD 20                            INT     20H 
 0D78                           OKDOS: 
 0D78  B8 3700                          MOV     AX,CHAR_OPER SHL 8 
 0D7B  CD 21                            INT     21H 
 0D7D  88 16 0000 R                     MOV     [SWITCHAR],DL           ;Get us
				er switch character 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-88
                                                            

 0D81  B4 35                            MOV     AH,GET_INTERRUPT_VECTOR 
 0D83  B0 2F                            MOV     AL,COMINT 
 0D85  CD 21                            INT     21H 
                                ASSUME  ES:NOTHING 
 0D87  8B FB                            MOV     DI,BX 
 0D89  BE 0747 R                        MOV     SI,OFFSET DG:SPCOMINT 
 0D8C  B9 000D                          MOV     CX,13 
 0D8F  F3/ A6                           REPE    CMPSB 
 0D91  74 05                            JZ      GOTRES          ;Signature matc
				hed 
 0D93  0E                               PUSH    CS 
 0D94  07                               POP     ES 
 0D95  E8 0C0C R                        CALL    SETUP 
 0D98                           GOTRES: 
 0D98  0E                               PUSH    CS 
 0D99  07                               POP     ES 
 0D9A  B4 19                            MOV     AH,GET_DEFAULT_DRIVE 
 0D9C  CD 21                            INT     21H 
 0D9E  A2 0004 R                        MOV     [DEFDRV],AL 
 0DA1  BE 0080                          MOV     SI,PARMS 
 0DA4  AC                               LODSB 
 0DA5  0A C0                            OR      AL,AL 
 0DA7  75 1E                            JNZ     GOTPARMS 
 0DA9                           TRANEXIT: 
 0DA9  E8 0EFB R                        CALL    GETSPLIST 
 0DAC  80 3E 0002 R 00                  CMP     [MAKERES],0 
 0DB1  75 02                            JNZ     SETRES 
 0DB3  CD 20                            INT     20H 
                                 
 0DB5                           SETRES: 
 0DB5  8B 16 0035 R                     MOV     DX,[ENDRES] 
 0DB9  CD 27                            INT     27H 
                                 
 0DBB                           ARGSDONE: 
 0DBB  80 3E 0003 R 00                  CMP     [ARGSETUP],0 
 0DC0  74 E7                            JZ      TRANEXIT 
 0DC2  E8 0E46 R                        CALL    PROCESS 
 0DC5  EB E2                            JMP     SHORT TRANEXIT 
                                 
 0DC7                           GOTPARMS: 
 0DC7                           PARSE: 
 0DC7  BF 025E R                        MOV     DI,OFFSET DG:PARSEBUF 
 0DCA  E8 0F83 R                        CALL    CPARSE 
 0DCD  72 EC                            JC      ARGSDONE 
 0DCF  3D 0004                          CMP     AX,4            ;Switch? 
 0DD2  75 36                            JNZ     GOTNORMARG 
 0DD4  8A 05                            MOV     AL,[DI]         ;Get the switch
				 character 
 0DD6  3C 43                            CMP     AL,'C' 
 0DD8  74 04                            JZ      SETCAN 
 0DDA  3C 63                            CMP     AL,'c' 
 0DDC  75 07                            JNZ     CHKSPL 
 0DDE                           SETCAN: 
 0DDE  C6 06 0005 R 01                  MOV     [CANFLG],1 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-89
                                                            

 0DE3  EB E2                            JMP     SHORT PARSE 
 0DE5                           CHKSPL: 
 0DE5  3C 50                            CMP     AL,'P' 
 0DE7  74 04                            JZ      RESETCAN 
 0DE9  3C 70                            CMP     AL,'p' 
 0DEB  75 07                            JNZ     CHKTERM 
 0DED                           RESETCAN: 
 0DED  C6 06 0005 R 00                  MOV     [CANFLG],0 
 0DF2  EB D3                            JMP     SHORT PARSE 
 0DF4                           CHKTERM: 
 0DF4  3C 54                            CMP     AL,'T' 
 0DF6  74 0D                            JZ      SETTERM 
 0DF8  3C 74                            CMP     AL,'t' 
 0DFA  74 09                            JZ      SETTERM 
 0DFC  BA 01B5 R                        MOV     DX,OFFSET DG:BADSWT 
 0DFF  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0E01  CD 21                            INT     21H 
 0E03  EB C2                            JMP     SHORT PARSE 
                                 
 0E05                           SETTERM: 
 0E05  E8 0E36 R                        CALL    TERMPROCESS 
 0E08  EB 9F                            JMP     TRANEXIT        ; Ignore everyt
				hing after T switch 
                                 
 0E0A                           GOTNORMARG: 
 0E0A  32 C0                            XOR     AL,AL 
 0E0C  86 06 0003 R                     XCHG    AL,[ARGSETUP] 
 0E10  0A C0                            OR      AL,AL 
 0E12  74 03                            JZ      PARSEARG 
 0E14  E8 0E4D R                        CALL    NORMPROC        ;Don't test ARG
				SETUP, it just got zeroed 
 0E17                           PARSEARG: 
 0E17  56                               PUSH    SI 
 0E18  8B F7                            MOV     SI,DI 
 0E1A  BF 005C                          MOV     DI,FCB 
 0E1D  B8 2901                          MOV     AX,(PARSE_FILE_DESCRIPTOR SHL 8
				) OR 1 
 0E20  CD 21                            INT     21H             ;Parse the arg 
 0E22  80 3D 00                         CMP     BYTE PTR [DI],0 
 0E25  75 08                            JNZ     DRVOK 
 0E27  8A 16 0004 R                     MOV     DL,[DEFDRV] 
 0E2B  FE C2                            INC     DL 
 0E2D  88 15                            MOV     BYTE PTR [DI],DL        ;Set th
				e default drive 
 0E2F                           DRVOK: 
 0E2F  5E                               POP     SI 
 0E30  FE 06 0003 R                     INC     [ARGSETUP] 
 0E34  EB 91                            JMP     SHORT PARSE 
                                 
 0E36                           TERMPROCESS: 
 0E36  BA FFFF                          MOV     DX,-1 
 0E39                           PROCRET: 
 0E39  B4 01                            MOV     AH,1 
 0E3B  E8 0EB4 R                        CALL    DOSET 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-90
                                                            

 0E3E                           PROCRETNFUNC: 
 0E3E  C6 06 0003 R 00                  MOV     [ARGSETUP],0 
 0E43  0E                               PUSH    CS 
 0E44  07                               POP     ES 
 0E45  C3                       RET14:  RET 
                                 
 0E46                           PROCESS: 
 0E46  80 3E 0003 R 00                  CMP     [ARGSETUP],0 
 0E4B  74 F8                            JZ      RET14                   ;Nothin
				g to process 
 0E4D                           NORMPROC: 
 0E4D  A0 005D                          MOV     AL,BYTE PTR DS:[FCB+1] 
 0E50  3C 20                            CMP     AL," " 
 0E52  74 2E                            JZ      SRCHBADJ 
 0E54  BA 005C                          MOV     DX,FCB 
 0E57  8A 26 0005 R                     MOV     AH,[CANFLG] 
 0E5B  80 FC 00                         CMP     AH,0 
 0E5E  75 D9                            JNZ     PROCRET 
 0E60  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
 0E63  B4 1A                            MOV     AH,SET_DMA 
 0E65  CD 21                            INT     21H 
 0E67  BA 005C                          MOV     DX,FCB 
 0E6A  B4 11                            MOV     AH,DIR_SEARCH_FIRST 
 0E6C  CD 21                            INT     21H 
 0E6E  0A C0                            OR      AL,AL 
 0E70  75 10                            JNZ     SRCHBADJ 
 0E72                           SRCHLOOP: 
 0E72  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
 0E75  B4 0F                            MOV     AH,FCB_OPEN 
 0E77  CD 21                            INT     21H 
 0E79  0A C0                            OR      AL,AL 
 0E7B  74 08                            JZ      OPENOK 
 0E7D  E8 0ECB R                        CALL    OPENERR 
 0E80  EB 1E                            JMP     SHORT NEXTSEARCH 
 0E82  EB 5E 90                 SRCHBADJ: JMP   SRCHBAD 
 0E85                           OPENOK: 
 0E85  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
 0E88  B4 00                            MOV     AH,0 
 0E8A  E8 0EB4 R                        CALL    DOSET 
 0E8D  0A C0                            OR      AL,AL 
 0E8F  74 0F                            JZ      NEXTSEARCH 
 0E91  86 06 0001 R                     XCHG    AL,[FULLFLAG]           ;Know A
				L non-zero 
 0E95  0A C0                            OR      AL,AL 
 0E97  75 07                            JNZ     NEXTSEARCH              ;Only p
				rint message once 
 0E99  BA 00C7 R                        MOV     DX,OFFSET DG:FULLMES    ;Queue 
				full 
 0E9C  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0E9E  CD 21                            INT     21H 
 0EA0                           NEXTSEARCH: 
 0EA0  BA 000F R                        MOV     DX,OFFSET DG:SRCHFCB 
 0EA3  B4 1A                            MOV     AH,SET_DMA 
 0EA5  CD 21                            INT     21H 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-91
                                                            

 0EA7  BA 005C                          MOV     DX,FCB 
 0EAA  B4 12                            MOV     AH,DIR_SEARCH_NEXT 
 0EAC  CD 21                            INT     21H 
 0EAE  0A C0                            OR      AL,AL 
 0EB0  75 8C                            JNZ     PROCRETNFUNC 
 0EB2  EB BE                            JMP     SRCHLOOP 
                                 
 0EB4                           DOSET: 
 0EB4  CD 2F                            INT     COMINT 
 0EB6  88 26 0006 R                     MOV     [FILCNT],AH             ;Suck u
				p return info 
 0EBA  8C 06 0009 R                     MOV     WORD PTR [SPLIST+2],ES 
 0EBE  8C 06 000D R                     MOV     WORD PTR [CURFILE+2],ES 
 0EC2  89 1E 0007 R                     MOV     WORD PTR [SPLIST],BX 
 0EC6  89 16 000B R                     MOV     WORD PTR [CURFILE],DX 
 0ECA  C3                               RET 
                                 
 0ECB                           OPENERR: 
 0ECB  56                               PUSH    SI 
 0ECC  57                               PUSH    DI 
 0ECD  BE 00B5 R                        MOV     SI,OFFSET DG:OPFILNAM 
 0ED0  1E                               PUSH    DS 
 0ED1  07                               POP     ES 
 0ED2  BF 000F R                        MOV     DI,OFFSET DG:SRCHFCB 
 0ED5  E8 0F57 R                        CALL    MVFNAM 
 0ED8  BA 00A9 R                        MOV     DX,OFFSET DG:OPMES 
 0EDB  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0EDD  CD 21                            INT     21H 
 0EDF  5F                               POP     DI 
 0EE0  5E                               POP     SI 
 0EE1  C3                               RET 
                                 
 0EE2                           SRCHBAD: 
 0EE2  56                               PUSH    SI 
 0EE3  57                               PUSH    DI 
 0EE4  BE 00DD R                        MOV     SI,OFFSET DG:SRCHFNAM 
 0EE7  1E                               PUSH    DS 
 0EE8  07                               POP     ES 
 0EE9  BF 005C                          MOV     DI,FCB 
 0EEC  E8 0F57 R                        CALL    MVFNAM 
 0EEF  BA 00DD R                        MOV     DX,OFFSET DG:SRCHMES 
 0EF2  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0EF4  CD 21                            INT     21H 
 0EF6  5F                               POP     DI 
 0EF7  5E                               POP     SI 
 0EF8  E9 0E3E R                        JMP     PROCRETNFUNC 
                                 
 0EFB                           GETSPLIST: 
 0EFB  B4 FF                            MOV     AH,0FFH 
 0EFD  E8 0EB4 R                        CALL    DOSET 
 0F00  1E                               PUSH    DS 
 0F01  C5 3E 0007 R                     LDS     DI,[SPLIST] 
 0F05  8B 7D FE                         MOV     DI,[DI-2]               ;Get th
				e error count 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-92
                                                            

 0F08  1F                               POP     DS 
 0F09  81 FF 03E8                       CMP     DI,ERRCNT1 
 0F0D  72 07                            JB      CNTOK 
 0F0F  BA 0167 R                        MOV     DX,OFFSET DG:CNTMES 
 0F12  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0F14  CD 21                            INT     21H 
 0F16                           CNTOK: 
 0F16  8A 0E 0006 R                     MOV     CL,[FILCNT] 
 0F1A  0A C9                            OR      CL,CL 
 0F1C  74 31                            JZ      NOFILES 
 0F1E  32 ED                            XOR     CH,CH 
 0F20  C4 3E 000B R                     LES     DI,[CURFILE] 
 0F24  57                               PUSH    DI 
 0F25  47                               INC     DI 
 0F26  47                               INC     DI 
 0F27  BE 0058 R                        MOV     SI,OFFSET DG:CURFNAM 
 0F2A  E8 0F57 R                        CALL    MVFNAM 
 0F2D  5F                               POP     DI 
 0F2E  BA 004E R                        MOV     DX,OFFSET DG:CURMES 
 0F31  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0F33  CD 21                            INT     21H 
 0F35  49                               DEC     CX 
 0F36  E3 16                            JCXZ    RET12 
 0F38                           FILOOP: 
 0F38  26: 8B 3D                        MOV     DI,ES:[DI] 
 0F3B  57                               PUSH    DI 
 0F3C  47                               INC     DI 
 0F3D  47                               INC     DI 
 0F3E  BE 008C R                        MOV     SI,OFFSET DG:FILFNAM 
 0F41  E8 0F57 R                        CALL    MVFNAM 
 0F44  5F                               POP     DI 
 0F45  BA 0084 R                        MOV     DX,OFFSET DG:FILMES 
 0F48  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0F4A  CD 21                            INT     21H 
 0F4C  E2 EA                            LOOP    FILOOP 
 0F4E  C3                       RET12:  RET 
                                 
 0F4F                           NOFILES: 
 0F4F  BA 0037 R                        MOV     DX,OFFSET DG:NOFILS 
 0F52  B4 09                            MOV     AH,STD_CON_STRING_OUTPUT 
 0F54  CD 21                            INT     21H 
 0F56  C3                               RET 
                                 
                                ;Make a message with the file name 
 0F57                           MVFNAM: 
                                ASSUME  DS:NOTHING,ES:NOTHING 
 0F57  56                               PUSH    SI 
 0F58  57                               PUSH    DI 
 0F59  51                               PUSH    CX 
 0F5A  8C C0                            MOV     AX,ES 
 0F5C  1E                               PUSH    DS 
 0F5D  07                               POP     ES 
 0F5E  8E D8                            MOV     DS,AX 
 0F60  87 F7                            XCHG    SI,DI 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-93
                                                            

 0F62  AC                               LODSB 
 0F63  04 40                            ADD     AL,"@" 
 0F65  3C 40                            CMP     AL,"@" 
 0F67  75 06                            JNZ     STCHR 
 0F69  36: A0 0004 R                    MOV     AL,[DEFDRV] 
 0F6D  04 41                            ADD     AL,"A" 
 0F6F                           STCHR: 
 0F6F  AA                               STOSB 
 0F70  47                               INC     DI 
 0F71  B9 0004                          MOV     CX,4 
 0F74  F3/ A5                           REP     MOVSW 
 0F76  47                               INC     DI 
 0F77  A5                               MOVSW 
 0F78  A4                               MOVSB 
 0F79  8C C0                            MOV     AX,ES 
 0F7B  1E                               PUSH    DS 
 0F7C  07                               POP     ES 
 0F7D  8E D8                            MOV     DS,AX 
 0F7F  59                               POP     CX 
 0F80  5F                               POP     DI 
 0F81  5E                               POP     SI 
 0F82  C3                               RET 
                                 
                                ;----------------------------------------------
				-------------------------; 
                                ; ENTRY:                                       
				                         ; 
                                ;       DS:SI   Points input buffer            
				                         ; 
                                ;       ES:DI   Points to the token buffer     
				                         ; 
                                ;                                              
				                         ; 
                                ; EXIT:                                        
				                         ; 
                                ;       DS:SI   Points to next char in the inpu
				t buffer                 ; 
                                ;       ES:DI   Points to the token buffer     
				                         ; 
                                ;       CX      Character count                
				                         ; 
                                ;       AX      Condition Code                 
				                         ; 
                                ;               =1 same as carry set           
				                         ; 
                                ;               =2 normal token                
				                         ; 
                                ;               =4 switch character, char in to
				ken buffer               ; 
                                ;       Carry Flag      Set if a CR was found, 
				Reset otherwise          ; 
                                ;                                              
				                         ; 
                                ; MODIFIES:                                    
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-94
                                                            

				                         ; 
                                ;       CX, SI, AX and the Carry Flag          
				                         ; 
                                ;                                              
				                         ; 
                                ;----------------------------------------------
				-------------------------; 
                                 
 = 0009                         TAB     equ     09h 
 = 000D                         CR      equ     0dh 
                                 
 0F83                           CPARSE: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0F83  9C                               pushf                           ;save f
				lags 
 0F84  57                               push    di                      ;save t
				he token buffer addrss 
 0F85  33 C9                            xor     cx,cx                   ;no cha
				rs in token buffer 
 0F87  E8 0FD7 R                        call    kill_bl 
                                 
 0F8A  3C 0D                            cmp     al,CR                   ;a CR? 
 0F8C  75 08                            jne     sj2                     ;no, sk
				ip 
 0F8E                           sj1: 
 0F8E  B8 0001                          mov     ax,1                    ;condit
				ion code 
 0F91  4E                               dec     si                      ;adjust
				 the pointer 
 0F92  5F                               pop     di                      ;retriv
				e token buffer address 
 0F93  9D                               popf                            ;restor
				e flags 
 0F94  F9                               stc                             ;set th
				e carry bit 
 0F95  C3                               ret 
                                 
 0F96                           sj2: 
 0F96  2E: 8A 16 0000 R                 mov     dl,[SWITCHAR] 
 0F9B  3A C2                            cmp     al,dl                   ;is the
				 char the switch char? 
 0F9D  75 0F                            jne     anum_char               ;no, pr
				ocess... 
 0F9F  E8 0FD7 R                        call    kill_bl 
 0FA2  3C 0D                            cmp     al,CR                   ;a CR? 
 0FA4  74 E8                            je      sj1                     ;yes, e
				rror exit 
 0FA6  E8 0FE9 R                        call    move_char               ;Put th
				e switch char in the token buffer 
 0FA9  B8 0004                          mov     ax,4                    ;Flag s
				witch 
 0FAC  EB 20                            jmp     short x_done2 
                                 
 0FAE                           anum_char: 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-95
                                                            

 0FAE  E8 0FE9 R                        call    move_char               ;just a
				n alphanum string 
 0FB1  AC                               lodsb 
 0FB2  3C 20                            cmp     al,' ' 
 0FB4  74 14                            je      x_done 
 0FB6  3C 09                            cmp     al,tab 
 0FB8  74 10                            je      x_done 
 0FBA  3C 0D                            cmp     al,CR 
 0FBC  74 0C                            je      x_done 
 0FBE  3C 2C                            cmp     al,',' 
 0FC0  74 08                            je      x_done 
 0FC2  3C 3D                            cmp     al,'=' 
 0FC4  74 04                            je      x_done 
 0FC6  3A C2                            cmp     al,dl                   ;Switch
				 character 
 0FC8  75 E4                            jne     anum_char 
 0FCA                           x_done: 
 0FCA  4E                               dec     si                      ;adjust
				 for next round 
 0FCB  B8 0002                          mov     ax,2                    ;normal
				 token 
 0FCE                           x_done2: 
 0FCE  50                               push    ax                      ;save c
				ondition code 
 0FCF  B0 00                            mov     al,0 
 0FD1  AA                               stosb                           ;null a
				t the end 
 0FD2  58                               pop     ax 
 0FD3  5F                               pop     di                      ;restor
				e token buffer pointer 
 0FD4  9D                               popf 
 0FD5  F8                               clc                             ;clear 
				carry flag 
 0FD6  C3                               ret 
                                 
                                 
 0FD7                           kill_bl proc    near 
 0FD7  AC                               lodsb 
 0FD8  3C 20                            cmp     al,' ' 
 0FDA  74 FB                            je      kill_bl 
 0FDC  3C 09                            cmp     al,tab 
 0FDE  74 F7                            je      kill_bl 
 0FE0  3C 2C                            cmp     al,','                  ;a comm
				a? 
 0FE2  74 F3                            je      kill_bl 
 0FE4  3C 3D                            cmp     al,'=' 
 0FE6  74 EF                            je      kill_bl 
 0FE8  C3                               ret 
                                kill_bl endp 
                                 
                                 
 0FE9                           move_char proc  near 
 0FE9  AA                               stosb                           ;store 
				char in token buffer 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Page     1-96
                                                            

 0FEA  41                               inc     cx                      ;increm
				ent char count 
 0FEB  C3                               ret 
                                move_char endp 
                                 
 0FEC                           CODE    ENDS 
                                        END     START 

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-4
                                                             

SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	0FEC	PARA	NONE	
  DATA . . . . . . . . . . . . .  	02AE	BYTE	NONE	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDFIL . . . . . . . . . . . . .  	L NEAR	08B1	CODE
ADDFILJ  . . . . . . . . . . . .  	L NEAR	0740	CODE
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-5
                                                             

ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
AINT . . . . . . . . . . . . . .  	Alias	 TRUE		
AKPORT . . . . . . . . . . . . .  	Number	0020	
ALLCAN . . . . . . . . . . . . .  	L BYTE 	0219	CODE
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALLSET . . . . . . . . . . . . .  	L NEAR	0D2C	CODE
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ANUM_CHAR  . . . . . . . . . . .  	L NEAR	0FAE	CODE
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ARGSDONE . . . . . . . . . . . .  	L NEAR	0DBB	CODE
ARGSETUP . . . . . . . . . . . .  	L BYTE 	0003	DATA
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADDRVM  . . . . . . . . . . . .  	L BYTE 	0300	CODE
BADMES . . . . . . . . . . . . .  	L BYTE 	00FE	DATA
BADSPOOL . . . . . . . . . . . .  	L NEAR	0C03	CODE
BADSWT . . . . . . . . . . . . .  	L BYTE 	01B5	DATA
BADVER . . . . . . . . . . . . .  	L BYTE 	01C9	DATA
BELMES . . . . . . . . . . . . .  	L BYTE 	01ED	CODE
BLKSIZ . . . . . . . . . . . . .  	Number	0200	
BUFFER . . . . . . . . . . . . .  	L BYTE 	0305	CODE	Length = 0200
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BUSY . . . . . . . . . . . . . .  	L BYTE 	0194	CODE
BUSYTICK . . . . . . . . . . . .  	Number	0001	
BWAIT  . . . . . . . . . . . . .  	L NEAR	07B5	CODE
BWAIT2 . . . . . . . . . . . . .  	L NEAR	08B9	CODE
BWAIT3 . . . . . . . . . . . . .  	L NEAR	0790	CODE
BYTEBUF  . . . . . . . . . . . .  	L BYTE 	093E	CODE

CALLAD . . . . . . . . . . . . .  	L DWORD	093F	CODE
CANFIL . . . . . . . . . . . . .  	L NEAR	07B1	CODE
CANFILNAM  . . . . . . . . . . .  	L BYTE 	01F5	CODE
CANFLG . . . . . . . . . . . . .  	L BYTE 	0005	DATA
CANMES . . . . . . . . . . . . .  	L BYTE 	01F1	CODE
CANTERM  . . . . . . . . . . . .  	L NEAR	089C	CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-6
                                                             

CANTERM1 . . . . . . . . . . . .  	L NEAR	0896	CODE
CANTERMJ . . . . . . . . . . . .  	L NEAR	0857	CODE
CBUSY  . . . . . . . . . . . . .  	L BYTE 	0199	CODE
CHAININT . . . . . . . . . . . .  	L NEAR	055B	CODE
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHKHIT . . . . . . . . . . . . .  	L NEAR	0CDC	CODE
CHKHIT2  . . . . . . . . . . . .  	L NEAR	0D0B	CODE
CHKSPL . . . . . . . . . . . . .  	L NEAR	0DE5	CODE
CHKTERM  . . . . . . . . . . . .  	L NEAR	0DF4	CODE
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CNTFILS  . . . . . . . . . . . .  	L NEAR	0775	CODE
CNTMES . . . . . . . . . . . . .  	L BYTE 	0167	DATA
CNTOK  . . . . . . . . . . . . .  	L NEAR	0F16	CODE
COLPOS . . . . . . . . . . . . .  	L BYTE 	01AF	CODE
COMBUF . . . . . . . . . . . . .  	L BYTE 	0229	DATA
COMBUSY  . . . . . . . . . . . .  	L NEAR	0743	CODE
COMINT . . . . . . . . . . . . .  	Number	002F	
COMRET . . . . . . . . . . . . .  	L NEAR	0782	CODE
CONLP  . . . . . . . . . . . . .  	L NEAR	0CCA	CODE
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CPARSE . . . . . . . . . . . . .  	L NEAR	0F83	CODE
CR . . . . . . . . . . . . . . .  	Number	000D	
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CRLF . . . . . . . . . . . . . .  	L BYTE 	00A6	DATA
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURFILE  . . . . . . . . . . . .  	L DWORD	000B	DATA
CURFNAM  . . . . . . . . . . . .  	L BYTE 	0058	DATA
CURMES . . . . . . . . . . . . .  	L BYTE 	004E	DATA
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
CURRFIL  . . . . . . . . . . . .  	L WORD 	01B2	CODE
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DEALLOC  . . . . . . . . . . . .  	Number	0049	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-7
                                                             

DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEFDRV . . . . . . . . . . . . .  	L BYTE 	0004	DATA
DEFSPOOL . . . . . . . . . . . .  	L NEAR	0C38	CODE
DEF_ENDRES . . . . . . . . . . .  	L BYTE 	0C03	CODE
DELALL . . . . . . . . . . . . .  	L NEAR	087B	CODE
DELALL2  . . . . . . . . . . . .  	L NEAR	0880	CODE
DELALLJ  . . . . . . . . . . . .  	L NEAR	07AE	CODE
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIDCMES  . . . . . . . . . . . .  	L NEAR	0848	CODE
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMAADDR  . . . . . . . . . . . .  	L DWORD	01A3	CODE
DOCALL . . . . . . . . . . . . .  	L NEAR	0986	CODE
DOCHAR . . . . . . . . . . . . .  	L NEAR	05F7	CODE
DOCONLP  . . . . . . . . . . . .  	L NEAR	0CD7	CODE
DOINT  . . . . . . . . . . . . .  	L NEAR	058E	CODE
DONEJMP  . . . . . . . . . . . .  	L NEAR	064A	CODE
DOSET  . . . . . . . . . . . . .  	L NEAR	0EB4	CODE
DOSVER . . . . . . . . . . . . .  	Number	00D3	
DOSVER_HIGH  . . . . . . . . . .  	Number	020B	
DOSVER_LOW . . . . . . . . . . .  	Number	0136	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DO_INT_14  . . . . . . . . . . .  	L NEAR	0A4D	CODE
DO_INT_17  . . . . . . . . . . .  	L NEAR	0A15	CODE
DO_INT_5 . . . . . . . . . . . .  	L NEAR	0A6A	CODE
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRVOK  . . . . . . . . . . . . .  	L NEAR	0E2F	CODE
DSKERR . . . . . . . . . . . . .  	L NEAR	06D1	CODE
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-8
                                                             

DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

EMFILNAM . . . . . . . . . . . .  	L BYTE 	01DF	CODE
ENDRES . . . . . . . . . . . . .  	L WORD 	0035	DATA
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
EOI  . . . . . . . . . . . . . .  	Number	0020	
ERR0 . . . . . . . . . . . . . .  	L BYTE 	0256	CODE
ERR1 . . . . . . . . . . . . . .  	L BYTE 	0264	CODE
ERR10  . . . . . . . . . . . . .  	L BYTE 	02C4	CODE
ERR11  . . . . . . . . . . . . .  	L BYTE 	02D0	CODE
ERR12  . . . . . . . . . . . . .  	L BYTE 	02DB	CODE
ERR2 . . . . . . . . . . . . . .  	L BYTE 	026D	CODE
ERR3 . . . . . . . . . . . . . .  	L BYTE 	0277	CODE
ERR4 . . . . . . . . . . . . . .  	L BYTE 	0283	CODE
ERR5 . . . . . . . . . . . . . .  	L BYTE 	0288	CODE
ERR6 . . . . . . . . . . . . . .  	L BYTE 	0298	CODE
ERR7 . . . . . . . . . . . . . .  	L BYTE 	029D	CODE
ERR8 . . . . . . . . . . . . . .  	L BYTE 	02AA	CODE
ERR9 . . . . . . . . . . . . . .  	L BYTE 	02BB	CODE
ERRCNT . . . . . . . . . . . . .  	L WORD 	0A71	CODE
ERRCNT1  . . . . . . . . . . . .  	Number	03E8	
ERRCNT2  . . . . . . . . . . . .  	Number	4E20	
ERRMES . . . . . . . . . . . . .  	L BYTE 	01B9	CODE
ERRMEST  . . . . . . . . . . . .  	L BYTE 	01CA	CODE
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-9
                                                             

EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATERR . . . . . . . . . . . . .  	L NEAR	0738	CODE
FATMES . . . . . . . . . . . . .  	L BYTE 	02E0	CODE
FATPRI . . . . . . . . . . . . .  	Number	001E	
FC1  . . . . . . . . . . . . . .  	L WORD 	0A9B	CODE
FC2  . . . . . . . . . . . . . .  	L WORD 	0AC3	CODE
FC3  . . . . . . . . . . . . . .  	L WORD 	0AEB	CODE
FC4  . . . . . . . . . . . . . .  	L WORD 	0B13	CODE
FC5  . . . . . . . . . . . . . .  	L WORD 	0B3B	CODE
FC6  . . . . . . . . . . . . . .  	L WORD 	0B63	CODE
FC7  . . . . . . . . . . . . . .  	L WORD 	0B8B	CODE
FC8  . . . . . . . . . . . . . .  	L WORD 	0BB3	CODE
FC9  . . . . . . . . . . . . . .  	L WORD 	0BDB	CODE
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCBSIZ . . . . . . . . . . . . .  	Number	0028	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILCNT . . . . . . . . . . . . .  	L BYTE 	0006	DATA
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILEOF . . . . . . . . . . . . .  	L NEAR	06C6	CODE
FILEOFJ  . . . . . . . . . . . .  	L NEAR	065F	CODE
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILFNAM  . . . . . . . . . . . .  	L BYTE 	008C	DATA
FILMES . . . . . . . . . . . . .  	L BYTE 	0084	DATA
FILOOP . . . . . . . . . . . . .  	L NEAR	0F38	CODE
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FULLFLAG . . . . . . . . . . . .  	L BYTE 	0001	DATA
FULLMES  . . . . . . . . . . . .  	L BYTE 	00C7	DATA

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETSPLIST  . . . . . . . . . . .  	L NEAR	0EFB	CODE
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-10
                                                             

GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOAHEAD  . . . . . . . . . . . .  	L NEAR	05A0	CODE
GOODMES  . . . . . . . . . . . .  	L BYTE 	0128	DATA
GOTBADDOS  . . . . . . . . . . .  	L NEAR	0D6D	CODE
GOTLAST  . . . . . . . . . . . .  	L NEAR	07D6	CODE
GOTNORMARG . . . . . . . . . . .  	L NEAR	0E0A	CODE
GOTPARMS . . . . . . . . . . . .  	L NEAR	0DC7	CODE
GOTRES . . . . . . . . . . . . .  	L NEAR	0D98	CODE
GOTSPOT  . . . . . . . . . . . .  	L NEAR	08D8	CODE

HARDINT  . . . . . . . . . . . .  	Alias	 TRUE		
HAVCOD . . . . . . . . . . . . .  	L NEAR	0701	CODE
HDSPINT  . . . . . . . . . . . .  	L NEAR	0506	CODE
HEADER . . . . . . . . . . . . .  	L BYTE 	0103	CODE
HERRINT  . . . . . . . . . . . .  	L DWORD	01A7	CODE

IBM  . . . . . . . . . . . . . .  	Alias	 TRUE		
IBMVER . . . . . . . . . . . . .  	Alias	 IBM		
IGNRET . . . . . . . . . . . . .  	L NEAR	0735	CODE
INDOS  . . . . . . . . . . . . .  	L DWORD	018C	CODE
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTLOC . . . . . . . . . . . . .  	Number	001C	
INTSEG . . . . . . . . . . . . .  	L WORD 	0953	CODE
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_13 . . . . . . . . . . . . .  	F PROC	09C8	CODE	Length = 0017
INT_13_BACK  . . . . . . . . . .  	F PROC	09DF	CODE	Length = 000A
INT_13_RETADDR . . . . . . . . .  	L WORD 	09C6	CODE
INT_14 . . . . . . . . . . . . .  	L NEAR	0A20	CODE
INT_14_HITLIST . . . . . . . . .  	L BYTE 	020A	DATA
INT_14_NUM . . . . . . . . . . .  	L WORD 	0A1E	CODE
INT_17 . . . . . . . . . . . . .  	L NEAR	09F3	CODE
INT_17_HITLIST . . . . . . . . .  	L BYTE 	01E1	DATA
INT_17_NUM . . . . . . . . . . .  	L WORD 	09F1	CODE
INT_5  . . . . . . . . . . . . .  	L NEAR	0A52	CODE
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-11
                                                             

INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOBUSY . . . . . . . . . . . . .  	Number	0200	
IOCALL . . . . . . . . . . . . .  	L BYTE 	0943	CODE
IOCNT  . . . . . . . . . . . . .  	L WORD 	0955	CODE
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IOERROR  . . . . . . . . . . . .  	Number	8000	
IOREQ  . . . . . . . . . . . . .  	L BYTE 	0945	CODE
IOSTAT . . . . . . . . . . . . .  	L WORD 	0946	CODE
ISTACK . . . . . . . . . . . . .  	L WORD 	018C	CODE

KEEP_PROCESS . . . . . . . . . .  	Number	0031	
KILL_BL  . . . . . . . . . . . .  	N PROC	0FD7	CODE	Length = 0012

LASTFCB  . . . . . . . . . . . .  	L WORD 	01B4	CODE
LASTFCB2 . . . . . . . . . . . .  	L WORD 	01B6	CODE
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LISTDEV  . . . . . . . . . . . .  	L DWORD	01AB	CODE
LISTFCB  . . . . . . . . . . . .  	L BYTE 	0239	DATA
LISTMES  . . . . . . . . . . . .  	L NEAR	091E	CODE
LMESDONE . . . . . . . . . . . .  	L NEAR	0928	CODE
LNEXT  . . . . . . . . . . . . .  	L NEAR	077D	CODE
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LOOKEND  . . . . . . . . . . . .  	L NEAR	07CC	CODE
LOOKMATCH  . . . . . . . . . . .  	L NEAR	07E3	CODE
LOOKSPOT . . . . . . . . . . . .  	L NEAR	08C4	CODE
LOUT . . . . . . . . . . . . . .  	L NEAR	0929	CODE
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
LWAIT  . . . . . . . . . . . . .  	L NEAR	092A	CODE

MAKERES  . . . . . . . . . . . .  	L BYTE 	0002	DATA
MATCH  . . . . . . . . . . . . .  	L NEAR	080C	CODE
MAXTICK  . . . . . . . . . . . .  	Number	0002	
MESBAS . . . . . . . . . . . . .  	L WORD 	023C	CODE
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MOVE_CHAR  . . . . . . . . . . .  	N PROC	0FE9	CODE	Length = 0003
MSVER  . . . . . . . . . . . . .  	Alias	 FALSE		
MVFNAM . . . . . . . . . . . . .  	L NEAR	0F57	CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-12
                                                             


NEXTFC . . . . . . . . . . . . .  	L NEAR	0853	CODE
NEXTFIL  . . . . . . . . . . . .  	L NEAR	0904	CODE
NEXTINT  . . . . . . . . . . . .  	L DWORD	0190	CODE
NEXTSEARCH . . . . . . . . . . .  	L NEAR	0EA0	CODE
NOCHAR . . . . . . . . . . . . .  	L NEAR	0637	CODE
NOCONV . . . . . . . . . . . . .  	L NEAR	08B0	CODE
NOFILES  . . . . . . . . . . . .  	L NEAR	0F4F	CODE
NOFILS . . . . . . . . . . . . .  	L BYTE 	0037	DATA
NORMPROC . . . . . . . . . . . .  	L NEAR	0E4D	CODE
NOSTATERR  . . . . . . . . . . .  	L NEAR	0971	CODE
NOTABDO  . . . . . . . . . . . .  	L NEAR	0627	CODE
NOTBACK  . . . . . . . . . . . .  	L NEAR	062F	CODE
NOTCR  . . . . . . . . . . . . .  	L NEAR	0606	CODE
NOTONHITLIST . . . . . . . . . .  	L NEAR	0D08	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NUMFCBS  . . . . . . . . . . . .  	L WORD 	0A6F	CODE
NXTCHAR  . . . . . . . . . . . .  	L NEAR	07F4	CODE
NXTCHR . . . . . . . . . . . . .  	L WORD 	01B0	CODE
NXTCHRLP . . . . . . . . . . . .  	L NEAR	080A	CODE
NXTSP  . . . . . . . . . . . . .  	L NEAR	0589	CODE

OEM  . . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OKDOS  . . . . . . . . . . . . .  	L NEAR	0D78	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPENERR  . . . . . . . . . . . .  	L NEAR	0ECB	CODE
OPENOK . . . . . . . . . . . . .  	L NEAR	0E85	CODE
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OPFILNAM . . . . . . . . . . . .  	L BYTE 	00B5	DATA
OPMES  . . . . . . . . . . . . .  	L BYTE 	00A9	DATA

PABORT . . . . . . . . . . . . .  	L BYTE 	01B8	CODE
PARMS  . . . . . . . . . . . . .  	Number	0080	
PARSE  . . . . . . . . . . . . .  	L NEAR	0DC7	CODE
PARSEARG . . . . . . . . . . . .  	L NEAR	0E17	CODE
PARSEBUF . . . . . . . . . . . .  	L BYTE 	025E	DATA	Length = 0050
PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PCANMES  . . . . . . . . . . . .  	L BYTE 	019E	CODE
PLOOP  . . . . . . . . . . . . .  	L NEAR	05CA	CODE
POPRET . . . . . . . . . . . . .  	L NEAR	093C	CODE
POUT . . . . . . . . . . . . . .  	L NEAR	0981	CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-13
                                                             

PREADY . . . . . . . . . . . . .  	L NEAR	0939	CODE
PROCESS  . . . . . . . . . . . .  	L NEAR	0E46	CODE
PROCRET  . . . . . . . . . . . .  	L NEAR	0E39	CODE
PROCRETNFUNC . . . . . . . . . .  	L NEAR	0E3E	CODE
PROMPT . . . . . . . . . . . . .  	L BYTE 	014B	DATA
PSTAT  . . . . . . . . . . . . .  	L NEAR	0959	CODE

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READBUFF . . . . . . . . . . . .  	L NEAR	0662	CODE
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REAL_INT_13  . . . . . . . . . .  	L DWORD	09C2	CODE
REAL_INT_14  . . . . . . . . . .  	L DWORD	0A1A	CODE
REAL_INT_17  . . . . . . . . . .  	L DWORD	09ED	CODE
REAL_INT_5 . . . . . . . . . . .  	L DWORD	09E9	CODE
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
REQUEUE  . . . . . . . . . . . .  	L NEAR	0859	CODE
RESETCAN . . . . . . . . . . . .  	L NEAR	0DED	CODE
RET12  . . . . . . . . . . . . .  	L NEAR	0F4E	CODE
RET13P . . . . . . . . . . . . .  	L NEAR	097F	CODE
RET14  . . . . . . . . . . . . .  	L NEAR	0E45	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SERVERCALL . . . . . . . . . . .  	Number	005D	
SET14_AH . . . . . . . . . . . .  	L NEAR	0A4A	CODE
SET14_AX . . . . . . . . . . . .  	L NEAR	0A48	CODE
SETABORT . . . . . . . . . . . .  	L NEAR	0729	CODE
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETCAN . . . . . . . . . . . . .  	L NEAR	0DDE	CODE
SETCOUNT . . . . . . . . . . . .  	L NEAR	076B	CODE
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETRES . . . . . . . . . . . . .  	L NEAR	0DB5	CODE
SETTERM  . . . . . . . . . . . .  	L NEAR	0E05	CODE
SETUP  . . . . . . . . . . . . .  	L NEAR	0C0C	CODE
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-14
                                                             

SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SJ1  . . . . . . . . . . . . . .  	L NEAR	0F8E	CODE
SJ2  . . . . . . . . . . . . . .  	L NEAR	0F96	CODE
SKIPFIL  . . . . . . . . . . . .  	L NEAR	084D	CODE
SKIPFILC . . . . . . . . . . . .  	L NEAR	084C	CODE
SLICECNT . . . . . . . . . . . .  	L BYTE 	0198	CODE
SOFINT . . . . . . . . . . . . .  	L BYTE 	0195	CODE
SOFTINT  . . . . . . . . . . . .  	Number	0028	
SPCOMINT . . . . . . . . . . . .  	L NEAR	0747	CODE
SPINT  . . . . . . . . . . . . .  	L NEAR	0560	CODE
SPLFCB . . . . . . . . . . . . .  	L WORD 	0A73	CODE
SPLIST . . . . . . . . . . . . .  	L DWORD	0007	DATA
SPNEXT . . . . . . . . . . . . .  	L DWORD	019A	CODE
SPRET  . . . . . . . . . . . . .  	L NEAR	065E	CODE
SPSAVE . . . . . . . . . . . . .  	L WORD 	01A1	CODE
SRCHBAD  . . . . . . . . . . . .  	L NEAR	0EE2	CODE
SRCHBADJ . . . . . . . . . . . .  	L NEAR	0E82	CODE
SRCHFCB  . . . . . . . . . . . .  	L BYTE 	000F	DATA	Length = 0026
SRCHFNAM . . . . . . . . . . . .  	L BYTE 	00DD	DATA
SRCHLOOP . . . . . . . . . . . .  	L NEAR	0E72	CODE
SRCHMES  . . . . . . . . . . . .  	L BYTE 	00DD	DATA
SSSAVE . . . . . . . . . . . . .  	L WORD 	019F	CODE
START  . . . . . . . . . . . . .  	L NEAR	0100	CODE
STATCHK  . . . . . . . . . . . .  	L NEAR	05E2	CODE
STCHR  . . . . . . . . . . . . .  	L NEAR	0F6F	CODE
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
SWITCHAR . . . . . . . . . . . .  	L BYTE 	0000	DATA

TAB  . . . . . . . . . . . . . .  	Number	0009	
TABDONE  . . . . . . . . . . . .  	L NEAR	063A	CODE
TABLP  . . . . . . . . . . . . .  	L NEAR	0617	CODE
TERMPROCESS  . . . . . . . . . .  	L NEAR	0E36	CODE
TICKCNT  . . . . . . . . . . . .  	L BYTE 	0196	CODE
TICKSUB  . . . . . . . . . . . .  	L BYTE 	0197	CODE
TIMENOW  . . . . . . . . . . . .  	L NEAR	051F	CODE
TIMESLICE  . . . . . . . . . . .  	Number	0008	
TONEXTFIL  . . . . . . . . . . .  	L NEAR	06CB	CODE
TRANEXIT . . . . . . . . . . . .  	L NEAR	0DA9	CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:01:27
                                                            Symbols-15
                                                             

TRANSIENT  . . . . . . . . . . .  	L NEAR	0D5C	CODE
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
UPCONV . . . . . . . . . . . . .  	L NEAR	08A6	CODE
USERIDOPER . . . . . . . . . . .  	Number	005E	

VER  . . . . . . . . . . . . . .  	Text  		

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	
X_DONE . . . . . . . . . . . . .  	L NEAR	0FCA	CODE
X_DONE2  . . . . . . . . . . . .  	L NEAR	0FCE	CODE


   2914 Source  Lines
   2976 Total   Lines
    757 Symbols

  13654 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
