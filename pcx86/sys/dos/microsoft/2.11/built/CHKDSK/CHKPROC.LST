Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-1
                                                            

                                TITLE   CHKPROC - Procedures called from chkdsk
				 
                                 
 = 0000                         FALSE   EQU     0 
 = FFFF                         TRUE    EQU     NOT FALSE 
                                 
 = 003A                         DRVCHAR EQU     ":" 
                                 
                             C          INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-2
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-3
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-9
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-10
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-11
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-12
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-13
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-14
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-15
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-16
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-17
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-18
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  IFNDEF IBM		;STDSW.ASM (and COMSW.ASM) may have
				 already set IBM 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (DOSVER / 100) 
 = 000B                      C  DOS_MINOR_VERSION   EQU     (DOSVER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-19
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-20
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-21
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-22
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-23
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-24
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-25
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-26
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-27
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-28
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-29
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-30
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-31
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-32
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-33
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-34
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-35
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-36
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-37
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-38
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-39
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-40
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-41
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-42
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-43
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-44
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-45
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-46
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-47
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-48
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-49
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-50
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-51
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-52
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-53
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-54
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-55
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-56
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-57
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                                 
                                 
                                SUBTTL  Segments used in load order 
                                 
 0000                           CODE    SEGMENT PUBLIC 
 0000                           CODE    ENDS 
                                 
 0000                           CONST   SEGMENT PUBLIC BYTE 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-58
Segments used in load order                                 

                                        EXTRN   CLUSBAD:BYTE,BADATT:BYTE,BADSIZ
				M:BYTE 
                                        EXTRN   DIRECMES:BYTE,CDDDMES:BYTE,NDOT
				MES:BYTE 
                                        EXTRN   BADTARG1:BYTE,BADTARG2:BYTE,FAT
				ALMES:BYTE 
                                        EXTRN   STACKMES:BYTE,BADDPBDIR:BYTE,CR
				EATMES:BYTE 
                                        EXTRN   FREEBYMES_PRE:BYTE,FREEBYMESF_P
				RE:BYTE 
                                        EXTRN   FREEBYMES_POST:BYTE,FREEBYMESF_
				POST:BYTE 
                                        EXTRN   NULNZ:BYTE,NULDMES:BYTE,BADCLUS
				:BYTE 
                                        EXTRN   NORECDDOT:BYTE,NORECDOT:BYTE,DO
				TMES:BYTE 
                                        EXTRN   BADWRITE_PRE:BYTE,BADCHAIN:BYTE
				,CROSSMES_PRE:BYTE 
                                        EXTRN   BADWRITE_POST:BYTE,CROSSMES_POS
				T:BYTE,INDENT:BYTE 
                                        EXTRN   PTRANDIR:BYTE,PTRANDIR2:BYTE,FR
				EEMES:BYTE,FIXMES:BYTE 
                                 
                                        EXTRN   NOISY:BYTE,DOFIX:BYTE,DIRBUF:WO
				RD,DOTENT:BYTE,FIXMFLG:BYTE 
                                        EXTRN   HAVFIX:BYTE,SECONDPASS:BYTE,LCL
				US:WORD,DIRTYFAT:BYTE 
                                        EXTRN   NUL:BYTE,ALLFILE:BYTE,PARSTR:BY
				TE,ERRSUB:WORD,USERDIR:BYTE 
                                        EXTRN   HIDCNT:WORD,HIDSIZ:WORD,FILCNT:
				WORD,FILSIZ:WORD,DIRCHAR:BYTE 
                                        EXTRN   DIRCNT:WORD,DIRSIZ:WORD,FRAGMEN
				T:BYTE,HECODE:BYTE 
                                        EXTRN   BADSIZ:WORD,ORPHSIZ:WORD,DDOTEN
				T:BYTE,CROSSCNT:WORD 
                                        EXTRN   ORPHCNT:WORD,ORPHFCB:BYTE,ORPHE
				XT:BYTE,ALLDRV:BYTE,DIRCHAR:BYTE 
                                 
 0000                           CONST   ENDS 
                                 
 0000                           DATA    SEGMENT PUBLIC WORD 
                                 
                                        EXTRN   THISDPB:DWORD,HARDCH:DWORD,CONT
				CH:DWORD,USERDEV:BYTE 
                                        EXTRN   CSIZE:BYTE,SSIZE:WORD,DSIZE:WOR
				D,MCLUS:WORD,NAMBUF:BYTE 
                                        EXTRN   DOTSNOGOOD:BYTE,ZEROTRUNC:BYTE,
				ISCROSS:BYTE,SRFCBPT:WORD 
                                        EXTRN   FATMAP:WORD,SECBUF:WORD,ERRCNT:
				BYTE,STACKLIM:WORD,FAT:WORD 
                                 
 0000                           DATA    ENDS 
                                 
                                DG      GROUP   CODE,CONST,DATA 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-59
Segments used in load order                                 

                                 
                                SUBTTL  Initialized Data 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-60
Initialized Data                                            

                                PAGE 
                                 
                                 
 0000                           CODE    SEGMENT PUBLIC 
                                ASSUME  CS:DG,DS:DG,ES:DG,SS:DG 
                                 
                                        PUBLIC  INT_23,INT_24,FINDCHAIN,DONE,AM
				DONE,RDONE 
                                        PUBLIC  FATAL,DIRPROC,CHKMAP,CHKCROSS,U
				NPACK 
                                        PUBLIC  PRINTTHISEL2,CHECKERR,PRINTCURR
				DIRERR 
                                 
                                        EXTRN   EPRINT:NEAR,DOCRLF:NEAR,PRINT:N
				EAR 
                                        EXTRN   PROMPTYN:NEAR,DOINT26:NEAR,SUBE
				RRP:NEAR 
                                        EXTRN   DOTCOMBMES:NEAR,DISP16BITS:NEAR
				 
                                        EXTRN   CHAINREPORT:NEAR,DISPCLUS:NEAR 
                                        EXTRN   PRTCHR:NEAR,WDSKERR:NEAR,CHECKF
				ILES:NEAR 
                                        EXTRN   FCB_TO_ASCZ:NEAR,FIGREC:NEAR,RD
				SKERR:NEAR 
                                 
 0000                           CHKPROC: 
                                 
                                SUBTTL  DIRPROC -- Recursive directory processi
				ng 
                                 
                                ; YOU ARE ADVISED NOT TO COPY THE FOLLOWING MET
				HOD!!! 
                                 
 0000                           DOTDOTHARDWAY: 
 0000  C5 3E 0000 E                     LDS     DI,[THISDPB] 
                                ASSUME  DS:NOTHING 
 0004  C7 45 1C FFFF                    MOV     [DI.dpb_current_dir],-1       ;
				Invalidate path 
 0009  8B F7                            MOV     SI,DI 
 000B  83 C6 1E                         ADD     SI,dpb_dir_text 
 000E  8B CE                            MOV     CX,SI 
 0010                           FINDEND: 
 0010  AC                               LODSB                           ;Scan t
				o end of current path 
 0011  0A C0                            OR      AL,AL 
 0013  75 FB                            JNZ     FINDEND 
 0015  4E                               DEC     SI                      ;Point 
				at the NUL 
 0016                           DELLOOP:                                ;Delete
				 last element 
 0016  3B F1                            CMP     SI,CX 
 0018  74 1A                            JZ      SETROOT 
 001A  80 3C 2F                         CMP     BYTE PTR [SI],"/" 
 001D  74 08                            JZ      SETTERM 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-61
DIRPROC -- Recursive directory processing                   

 001F  80 3C 5C                         CMP     BYTE PTR [SI],"\" 
 0022  74 03                            JZ      SETTERM 
 0024  4E                               DEC     SI 
 0025  EB EF                            JMP     SHORT DELLOOP 
                                 
 0027                           SETTERM: 
 0027  C6 04 00                         MOV     BYTE PTR [SI],0 
 002A                           SETCURR: 
 002A  0E                               PUSH    CS 
 002B  1F                               POP     DS 
                                ASSUME  DS:DG 
 002C  BA 0000 E                        MOV     DX,OFFSET DG:DOTMES 
 002F  B4 3B                            MOV     AH,CHDIR                ;Chdir 
				to altered path 
 0031  CD 21                            INT     21H 
 0033  C3                               RET 
                                 
 0034                           SETROOT: 
                                ASSUME  DS:NOTHING 
 0034  C7 45 1C 0000                    MOV     [DI.dpb_current_dir],0        ;
				Set Path to Root 
 0039  EB EF                            JMP     SHORT SETCURR           ;The CH
				DIR will fail, but who cares 
                                 
                                 
                                ;Structures used by DIRPROC 
                                 
                                SRCHFCB STRUC 
 0000  002C[                            DB      44 DUP (?) 
            ??                  
                         ]      
                                
 002C                           SRCHFCB ENDS 
 = 002C                         SFCBSIZ EQU     SIZE SRCHFCB 
 = 0017                         THISENT EQU     17H                     ;Relati
				ve entry number of current entry 
                                 
                                DIRENT  STRUC 
 0000  0007[                            DB      7 DUP (?)               ;Ext FC
				B junk 
            ??                  
                         ]      
                                
 0007  ??                               DB      ?                       ;Drive 
 0008  000B[                    DIRNAM  DB      11 DUP (?) 
            ??                  
                         ]      
                                
 0013  ??                       DIRATT  DB      ? 
 0014  000A[                            DB      10 DUP (?) 
            ??                  
                         ]      
                                
 001E  ????                     DIRTIM  DW      ? 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-62
DIRPROC -- Recursive directory processing                   

 0020  ????                     DIRDAT  DW      ? 
 0022  ????                     DIRCLUS DW      ? 
 0024  ????????                 DIRESIZ DD      ? 
 0028                           DIRENT  ENDS 
 = 0028                         ENTSIZ  EQU     SIZE DIRENT 
                                 
                                ;Attribute bits 
                                 
 = 0001                         RDONLY  EQU     1 
 = 0002                         HIDDN   EQU     2 
 = 0004                         SYSTM   EQU     4 
 = 0008                         VOLIDA  EQU     8 
 = 0010                         ISDIR   EQU     10H 
                                 
                                ASSUME  DS:DG 
                                 
 003B                           NODOT:                                  ;No . 
 003B  50                               PUSH    AX                      ;Return
				 from SRCH 
 003C  80 3E 0000 E 00                  CMP     [NOISY],0 
 0041  75 05                            JNZ     DOEXTMES1 
 0043  E8 0000 E                        CALL    SUBERRP 
 0046  EB 0C                            JMP     SHORT MESD1 
 0048                           DOEXTMES1: 
 0048  BE 0000 E                        MOV     SI,OFFSET DG:DOTMES 
 004B  E8 08DC R                        CALL    PRINTCURRDIRERR 
 004E  BA 0000 E                        MOV     DX,OFFSET DG:NDOTMES 
 0051  E8 0000 E                        CALL    EPRINT 
 0054                           MESD1: 
 0054  33 C0                            XOR     AX,AX 
 0056  53                               PUSH    BX 
 0057  55                               PUSH    BP 
 0058  E8 0842 R                        CALL    GETENT 
 005B  5D                               POP     BP 
 005C  55                               PUSH    BP 
 005D  80 3D E5                         CMP     BYTE PTR [DI],0E5H      ;Have p
				lace to put .? 
 0060  75 30                            JNZ     CANTREC                 ;Nope 
 0062  BE 0000 E                        MOV     SI,OFFSET DG:DOTENT 
 0065  B9 000B                          MOV     CX,11 
 0068  F3/ A4                           REP     MOVSB                   ;Name 
 006A  50                               PUSH    AX 
 006B  B0 10                            MOV     AL,ISDIR 
 006D  AA                               STOSB                           ;Attrib
				ute 
 006E  83 C7 0A                         ADD     DI,10 
 0071  33 C0                            XOR     AX,AX 
 0073  AB                               STOSW                           ;Date =
				 0 
 0074  AB                               STOSW                           ;Time =
				 0 
 0075  8B 46 06                         MOV     AX,[BP+6] 
 0078  AB                               STOSW                           ;Alloc 
				# 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-63
DIRPROC -- Recursive directory processing                   

 0079  33 C0                            XOR     AX,AX 
 007B  AB                               STOSW 
 007C  AB                               STOSW                           ;Size 
 007D  58                               POP     AX 
 007E  C6 06 0000 E 01                  MOV     [HAVFIX],1              ;Have a
				 fix 
 0083  80 3E 0000 E 00                  CMP     [DOFIX],0 
 0088  74 19                            JZ      DOTGOON                 ;No fix
				 if not F 
 008A  B9 0001                          MOV     CX,1 
 008D  E8 0000 E                        CALL    DOINT26 
 0090  EB 11                            JMP     SHORT DOTGOON 
                                 
 0092                           CANTREC: 
 0092  FE 06 0000 E                     INC     [DOTSNOGOOD] 
 0096  80 3E 0000 E 00                  CMP     [NOISY],0 
 009B  74 06                            JZ      DOTGOON 
 009D  BA 0000 E                        MOV     DX,OFFSET DG:NORECDOT 
 00A0  E8 0000 E                        CALL    EPRINT 
 00A3                           DOTGOON: 
 00A3  5D                               POP     BP 
 00A4  5B                               POP     BX 
 00A5  58                               POP     AX 
 00A6  BE 0000 E                        MOV     SI,OFFSET DG:DIRBUF 
 00A9  E9 0214 R                        JMP     CHKDOTDOT               ;Go loo
				k for .. 
                                 
 00AC                           NODDOT:                                 ;No .. 
 00AC  50                               PUSH    AX                      ;Return
				 from SRCH 
 00AD  80 3E 0000 E 00                  CMP     [NOISY],0 
 00B2  75 05                            JNZ     DOEXTMES2 
 00B4  E8 0000 E                        CALL    SUBERRP 
 00B7  EB 0C                            JMP     SHORT MESD2 
 00B9                           DOEXTMES2: 
 00B9  BE 0000 E                        MOV     SI,OFFSET DG:PARSTR 
 00BC  E8 08DC R                        CALL    PRINTCURRDIRERR 
 00BF  BA 0000 E                        MOV     DX,OFFSET DG:NDOTMES 
 00C2  E8 0000 E                        CALL    EPRINT 
 00C5                           MESD2: 
 00C5  B8 0001                          MOV     AX,1 
 00C8  53                               PUSH    BX 
 00C9  55                               PUSH    BP 
 00CA  E8 0842 R                        CALL    GETENT 
 00CD  5D                               POP     BP 
 00CE  55                               PUSH    BP 
 00CF  80 3D E5                         CMP     BYTE PTR [DI],0E5H      ;Place 
				to put it? 
 00D2  75 37                            JNZ     CANTREC2                ;Nope 
 00D4  BE 0000 E                        MOV     SI,OFFSET DG:DDOTENT 
 00D7  B9 000B                          MOV     CX,11 
 00DA  F3/ A4                           REP     MOVSB                   ;Name 
 00DC  50                               PUSH    AX 
 00DD  B0 10                            MOV     AL,ISDIR 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-64
DIRPROC -- Recursive directory processing                   

 00DF  AA                               STOSB                           ;Attrib
				ute 
 00E0  83 C7 0A                         ADD     DI,10 
 00E3  33 C0                            XOR     AX,AX 
 00E5  AB                               STOSW                           ;Date 
 00E6  AB                               STOSW                           ;Time 
 00E7  8B 46 04                         MOV     AX,[BP+4] 
 00EA  AB                               STOSW                           ;Alloc 
				# 
 00EB  33 C0                            XOR     AX,AX 
 00ED  AB                               STOSW 
 00EE  AB                               STOSW                           ;Size 
 00EF  58                               POP     AX 
 00F0  C6 06 0000 E 01                  MOV     [HAVFIX],1              ;Got a 
				fix 
 00F5  80 3E 0000 E 00                  CMP     [DOFIX],0 
 00FA  74 06                            JZ      NFIX                    ;No fix
				 if no F, carry clear 
 00FC  B9 0001                          MOV     CX,1 
 00FF  E8 0000 E                        CALL    DOINT26 
 0102                           NFIX: 
 0102  5D                               POP     BP 
 0103  5B                               POP     BX 
 0104  58                               POP     AX 
 0105  BE 0000 E                        MOV     SI,OFFSET DG:DIRBUF 
 0108  E9 028A R                        JMP     ROOTDIR                 ;Proces
				s files 
                                 
 010B                           CANTREC2: 
 010B  5D                               POP     BP 
 010C  5B                               POP     BX 
 010D  58                               POP     AX 
 010E  80 3E 0000 E 00                  CMP     [NOISY],0 
 0113  74 21                            JZ      DOTSBAD 
 0115  BA 0000 E                        MOV     DX,OFFSET DG:NORECDDOT 
 0118  E8 0000 E                        CALL    EPRINT 
 011B  EB 19 90                         JMP     DOTSBAD 
                                 
 011E                           NULLDIRERR: 
 011E  80 3E 0000 E 00                  CMP     [NOISY],0 
 0123  75 05                            JNZ     DOEXTMES3 
 0125  E8 0000 E                        CALL    SUBERRP 
 0128  EB 0C                            JMP     SHORT DOTSBAD 
 012A                           DOEXTMES3: 
 012A  BE 0000 E                        MOV     SI,OFFSET DG:NUL 
 012D  E8 08DC R                        CALL    PRINTCURRDIRERR 
 0130  BA 0000 E                        MOV     DX,OFFSET DG:NULDMES 
 0133  E8 0000 E                        CALL    EPRINT 
 0136                           DOTSBAD:                                ;Can't 
				recover 
 0136  BA 0000 E                        MOV     DX,OFFSET DG:BADTARG2 
 0139  E8 0000 E                        CALL    EPRINT 
 013C  E8 0000 R                        CALL    DOTDOTHARDWAY 
 013F  FE 06 0000 E                     INC     [DOTSNOGOOD] 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-65
DIRPROC -- Recursive directory processing                   

 0143  E9 02B3 R                        JMP     DIRDONE                 ;Termin
				ate tree walk at this level 
                                 
 0146  E9 028A R                ROOTDIRJ: JMP   ROOTDIR 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-66
DIRPROC -- Recursive directory processing                   

                                PAGE 
 0149                           DIRPROC: 
                                ;Recursive tree walker 
                                ;dirproc(self,parent) 
 0149  C6 06 0000 E 00                  MOV     [DOTSNOGOOD],0          ;Init t
				o dots OK 
 014E  C7 06 0000 E 0000                MOV     [ERRSUB],0              ;No sub
				dir errors yet 
 0154  55                               PUSH    BP                      ;Save f
				rame pointer 
 0155  8B EC                            MOV     BP,SP 
 0157  83 EC 2C                         SUB     SP,SFCBSIZ              ;Only l
				ocal var 
 015A  3B 26 0000 E                     CMP     SP,[STACKLIM] 
 015E  77 06                            JA      STACKISOK 
 0160  BB 0000 E                        MOV     BX,OFFSET DG:STACKMES   ;Out of
				 stack 
 0163  E9 094C R                        JMP     FATAL 
 0166                           STACKISOK: 
 0166  80 3E 0000 E 00                  CMP     [NOISY],0 
 016B  74 16                            JZ      NOPRINT 
 016D  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 0172  75 0F                            JNZ     NOPRINT                 ;Don't 
				do it again on second pass 
 0174  BA 0000 E                        MOV     DX,OFFSET DG:DIRECMES   ;Tell u
				ser where we are 
 0177  E8 0000 E                        CALL    PRINT 
 017A  BE 0000 E                        MOV     SI,OFFSET DG:NUL 
 017D  E8 08FF R                        CALL    PRINTCURRDIR 
 0180  E8 0000 E                        CALL    DOCRLF 
 0183                           NOPRINT: 
 0183  BE 0000 E                        MOV     SI,OFFSET DG:ALLFILE 
 0186  8B FC                            MOV     DI,SP 
 0188  57                               PUSH    DI 
 0189  B9 002C                          MOV     CX,SFCBSIZ 
 018C  F3/ A4                           REP     MOVSB           ;Initialize sea
				rch FCB 
 018E  5A                               POP     DX 
 018F  8B DA                            MOV     BX,DX           ;BX points to S
				RCH FCB 
 0191  B4 11                            MOV     AH,DIR_SEARCH_FIRST 
 0193  CD 21                            INT     21H 
 0195  83 7E 06 00                      CMP     WORD PTR [BP+6],0       ;Am I t
				he root 
 0199  74 AB                            JZ      ROOTDIRJ                ;Yes, n
				o . or .. 
 019B  0A C0                            OR      AL,AL 
 019D  74 03                            JZ      NONULLDERR 
 019F  E9 011E R                        JMP     NULLDIRERR              ;Dir is
				 empty! 
 01A2                           NONULLDERR: 
 01A2  BE 0008 E                        MOV     SI,OFFSET DG:DIRBUF + DIRNAM 
 01A5  BF 0000 E                        MOV     DI,OFFSET DG:DOTENT 
 01A8  B9 000B                          MOV     CX,11 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-67
DIRPROC -- Recursive directory processing                   

 01AB  F3/ A6                           REP     CMPSB 
 01AD  74 03                            JZ      DOTOK                   ;Got a 
				. as first entry 
 01AF  E9 003B R                        JMP     NODOT                   ;No . 
 01B2                           DOTOK: 
 01B2  BE 0000 E                        MOV     SI,OFFSET DG:DIRBUF 
 01B5  8A 44 13                         MOV     AL,[SI.DIRATT] 
 01B8  A8 10                            TEST    AL,ISDIR 
 01BA  75 12                            JNZ     DATTOK 
 01BC  56                               PUSH    SI                      ;. not 
				a dir? 
 01BD  BE 0000 E                        MOV     SI,OFFSET DG:DOTMES 
 01C0  BA 0000 E                        MOV     DX,OFFSET DG:BADATT 
 01C3  E8 0000 E                        CALL    DOTCOMBMES 
 01C6  5E                               POP     SI 
 01C7  80 4C 13 10                      OR      [SI.DIRATT],ISDIR 
 01CB  E8 0818 R                        CALL    FIXENT                  ;Fix it
				 
 01CE                           DATTOK: 
 01CE  8B 44 22                         MOV     AX,[SI.DIRCLUS] 
 01D1  3B 46 06                         CMP     AX,[BP+6]               ;. link
				 = MYSELF? 
 01D4  74 14                            JZ      DLINKOK 
 01D6  56                               PUSH    SI                      ;Link m
				essed up 
 01D7  BE 0000 E                        MOV     SI,OFFSET DG:DOTMES 
 01DA  BA 0000 E                        MOV     DX,OFFSET DG:CLUSBAD 
 01DD  E8 0000 E                        CALL    DOTCOMBMES 
 01E0  5E                               POP     SI 
 01E1  8B 46 06                         MOV     AX,[BP+6] 
 01E4  89 44 22                         MOV     [SI.DIRCLUS],AX 
 01E7  E8 0818 R                        CALL    FIXENT                  ;Fix it
				 
 01EA                           DLINKOK: 
 01EA  8B 44 24                         MOV     AX,WORD PTR [SI.DIRESIZ] 
 01ED  0B C0                            OR      AX,AX 
 01EF  75 07                            JNZ     BADDSIZ 
 01F1  8B 44 26                         MOV     AX,WORD PTR [SI.DIRESIZ+2] 
 01F4  0B C0                            OR      AX,AX 
 01F6  74 16                            JZ      DSIZOK 
 01F8                           BADDSIZ:                                ;Size s
				hould be zero 
 01F8  56                               PUSH    SI 
 01F9  BE 0000 E                        MOV     SI,OFFSET DG:DOTMES 
 01FC  BA 0000 E                        MOV     DX,OFFSET DG:BADSIZM 
 01FF  E8 0000 E                        CALL    DOTCOMBMES 
 0202  5E                               POP     SI 
 0203  33 C0                            XOR     AX,AX 
 0205  89 44 24                         MOV     WORD PTR [SI.DIRESIZ],AX 
 0208  89 44 26                         MOV     WORD PTR [SI.DIRESIZ+2],AX 
 020B  E8 0818 R                        CALL    FIXENT                  ;Fix it
				 
 020E                           DSIZOK:                                 ;Get ne
				xt (should be ..) 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-68
DIRPROC -- Recursive directory processing                   

 020E  8B D3                            MOV     DX,BX 
 0210  B4 12                            MOV     AH,DIR_SEARCH_NEXT 
 0212  CD 21                            INT     21H 
 0214                           CHKDOTDOT:                              ;Come h
				ere after . failure 
 0214  0A C0                            OR      AL,AL 
 0216  74 03                            JZ      DOTDOTOK 
 0218  E9 00AC R                NODDOTJ: JMP    NODDOT                  ;No .. 
 021B                           DOTDOTOK: 
 021B  BE 0008 E                        MOV     SI,OFFSET DG:DIRBUF + DIRNAM 
 021E  BF 0000 E                        MOV     DI,OFFSET DG:DDOTENT 
 0221  B9 000B                          MOV     CX,11 
 0224  F3/ A6                           REP     CMPSB 
 0226  75 F0                            JNZ     NODDOTJ                 ;No .. 
 0228  BE 0000 E                        MOV     SI,OFFSET DG:DIRBUF 
 022B  8A 44 13                         MOV     AL,[SI.DIRATT] 
 022E  A8 10                            TEST    AL,ISDIR 
 0230  75 12                            JNZ     DDATTOK                 ;.. mus
				t be a dir 
 0232  56                               PUSH    SI 
 0233  BE 0000 E                        MOV     SI,OFFSET DG:PARSTR 
 0236  BA 0000 E                        MOV     DX,OFFSET DG:BADATT 
 0239  E8 0000 E                        CALL    DOTCOMBMES 
 023C  5E                               POP     SI 
 023D  80 4C 13 10                      OR      [SI.DIRATT],ISDIR 
 0241  E8 0818 R                        CALL    FIXENT                  ;Fix it
				 
 0244                           DDATTOK: 
 0244  56                               PUSH    SI 
 0245  8B 44 22                         MOV     AX,[SI.DIRCLUS] 
 0248  3B 46 04                         CMP     AX,[BP+4]               ;.. lin
				k must be PARENT 
 024B  74 13                            JZ      DDLINKOK 
 024D  BE 0000 E                        MOV     SI,OFFSET DG:PARSTR 
 0250  BA 0000 E                        MOV     DX,OFFSET DG:CLUSBAD 
 0253  E8 0000 E                        CALL    DOTCOMBMES 
 0256  5E                               POP     SI 
 0257  8B 46 04                         MOV     AX,[BP+4] 
 025A  89 44 22                         MOV     [SI.DIRCLUS],AX 
 025D  E8 0818 R                        CALL    FIXENT                  ;Fix it
				 
 0260                           DDLINKOK: 
 0260  8B 44 24                         MOV     AX,WORD PTR [SI.DIRESIZ] 
 0263  0B C0                            OR      AX,AX 
 0265  75 07                            JNZ     BADDDSIZ 
 0267  8B 44 26                         MOV     AX,WORD PTR [SI.DIRESIZ+2] 
 026A  0B C0                            OR      AX,AX 
 026C  74 16                            JZ      DDSIZOK 
 026E                           BADDDSIZ:                               ;.. siz
				e should be 0 
 026E  56                               PUSH    SI 
 026F  BE 0000 E                        MOV     SI,OFFSET DG:PARSTR 
 0272  BA 0000 E                        MOV     DX,OFFSET DG:BADSIZM 
 0275  E8 0000 E                        CALL    DOTCOMBMES 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-69
DIRPROC -- Recursive directory processing                   

 0278  5E                               POP     SI 
 0279  33 C0                            XOR     AX,AX 
 027B  89 44 24                         MOV     WORD PTR [SI.DIRESIZ],AX 
 027E  89 44 26                         MOV     WORD PTR [SI.DIRESIZ+2],AX 
 0281  E8 0818 R                        CALL    FIXENT                  ;Fix it
				 
 0284                           DDSIZOK: 
 0284  8B D3                            MOV     DX,BX                   ;Next e
				ntry 
 0286  B4 12                            MOV     AH,DIR_SEARCH_NEXT 
 0288  CD 21                            INT     21H 
                                 
 028A                           ROOTDIR:                                ;Come h
				ere after .. failure also 
 028A  0A C0                            OR      AL,AL 
 028C  74 2B                            JZ      MOREDIR                 ;More t
				o go 
 028E  83 7E 06 00                      CMP     WORD PTR [BP+6],0       ;Am I t
				he root? 
 0292  74 1F                            JZ      DIRDONE                 ;Yes, n
				o chdir 
 0294  BA 0000 E                        MOV     DX,OFFSET DG:PARSTR 
 0297  B4 3B                            MOV     AH,CHDIR                ;Chdir 
				to parent (..) 
 0299  CD 21                            INT     21H 
 029B  73 16                            JNC     DIRDONE                 ;Worked
				 
 029D  80 3E 0000 E 00                  CMP     [NOISY],0 
 02A2  74 0C                            JZ      DODDH 
 02A4  BE 0000 E                        MOV     SI,OFFSET DG:NUL 
 02A7  E8 08DC R                        CALL    PRINTCURRDIRERR 
 02AA  BA 0000 E                        MOV     DX,OFFSET DG:CDDDMES 
 02AD  E8 0000 E                        CALL    EPRINT 
 02B0                           DODDH: 
 02B0  E8 0000 R                        CALL    DOTDOTHARDWAY           ;Try ag
				ain 
 02B3                           DIRDONE: 
 02B3  8B E5                            MOV     SP,BP                   ;Pop lo
				cal vars 
 02B5  5D                               POP     BP                      ;Restor
				e frame 
 02B6  C2 0004                          RET     4                       ;Pop ar
				gs 
                                 
 02B9                           MOREDIR: 
 02B9  BE 0000 E                        MOV     SI,OFFSET DG:DIRBUF 
 02BC  F6 44 13 10                      TEST    [SI.DIRATT],ISDIR 
 02C0  75 4B                            JNZ     NEWDIR                  ;Is a n
				ew directory 
 02C2  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 02C7  74 05                            JZ      FPROC1                  ;First 
				pass 
 02C9  E8 03C0 R                        CALL    CROSSLOOK               ;Check 
				for cross links 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-70
DIRPROC -- Recursive directory processing                   

 02CC  EB B6                            JMP     DDSIZOK                 ;Next 
 02CE                           FPROC1: 
 02CE  80 3E 0000 E 00                  CMP     [NOISY],0 
 02D3  74 12                            JZ      NOPRINT2 
 02D5  BA 0000 E                        MOV     DX,OFFSET DG:INDENT     ;Tell u
				ser where we are 
 02D8  E8 0000 E                        CALL    PRINT 
 02DB  53                               PUSH    BX 
 02DC  8B DE                            MOV     BX,SI 
 02DE  E8 08F2 R                        CALL    PRINTTHISEL 
 02E1  E8 0000 E                        CALL    DOCRLF 
 02E4  8B F3                            MOV     SI,BX 
 02E6  5B                               POP     BX 
 02E7                           NOPRINT2: 
 02E7  B0 81                            MOV     AL,81H                  ;Head o
				f file 
 02E9  E8 03F1 R                        CALL    MARKFAT 
 02EC  F6 44 13 08                      TEST    [SI.DIRATT],VOLIDA 
 02F0  75 06                            JNZ     HIDENFILE               ;VOL ID
				 counts as hidden 
 02F2  F6 44 13 02                      TEST    [SI.DIRATT],HIDDN 
 02F6  74 0A                            JZ      NORMFILE 
 02F8                           HIDENFILE: 
 02F8  FF 06 0000 E                     INC     [HIDCNT] 
 02FC  01 0E 0000 E                     ADD     [HIDSIZ],CX 
 0300  EB 82                            JMP     DDSIZOK                 ;Next 
 0302                           NORMFILE: 
 0302  FF 06 0000 E                     INC     [FILCNT] 
 0306  01 0E 0000 E                     ADD     [FILSIZ],CX 
 030A  E9 0284 R                        JMP     DDSIZOK                 ;Next 
                                 
 030D                           NEWDIR: 
 030D  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 0312  74 05                            JZ      DPROC1 
 0314  E8 03C0 R                        CALL    CROSSLOOK               ;Check 
				for cross links 
 0317  EB 1E                            JMP     SHORT DPROC2 
 0319                           DPROC1: 
 0319  B0 82                            MOV     AL,82H                  ;Head o
				f dir 
 031B  E8 03F1 R                        CALL    MARKFAT 
 031E  FF 06 0000 E                     INC     [DIRCNT] 
 0322  01 0E 0000 E                     ADD     [DIRSIZ],CX 
 0326  80 3E 0000 E 00                  CMP     [ZEROTRUNC],0 
 032B  74 0A                            JZ      DPROC2                  ;Dir no
				t truncated 
 032D                           CONVDIR: 
 032D  80 64 13 EF                      AND     [SI.DIRATT],NOT ISDIR   ;Turn i
				nto file 
 0331  E8 0818 R                        CALL    FIXENT 
 0334  E9 0284 R                        JMP     DDSIZOK                 ;Next 
 0337                           DPROC2: 
 0337  FF 36 0000 E                     PUSH    [ERRSUB] 
 033B  53                               PUSH    BX                      ;Save m
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-71
DIRPROC -- Recursive directory processing                   

				y srch FCB pointer 
 033C  FF 74 22                         PUSH    [SI.DIRCLUS]            ;MYSELF
				 for next directory 
 033F  FF 76 06                         PUSH    [BP+6]                  ;His PA
				RENT is me 
 0342  83 C6 08                         ADD     SI,DIRNAM 
 0345  BF 0000 E                        MOV     DI,OFFSET DG:NAMBUF 
 0348  57                               PUSH    DI 
 0349  E8 0000 E                        CALL    FCB_TO_ASCZ 
 034C  5A                               POP     DX 
 034D  B4 3B                            MOV     AH,CHDIR                ;CHDIR 
				to new dir 
 034F  CD 21                            INT     21H 
 0351  72 12                            JC      CANTTARG                ;Barfed
				 
 0353  E8 0149 R                        CALL    DIRPROC 
 0356  5B                               POP     BX                      ;Get my
				 SRCH FCB pointer back 
 0357  8F 06 0000 E                     POP     [ERRSUB] 
 035B  80 3E 0000 E 00                  CMP     [DOTSNOGOOD],0 
 0360  75 1B                            JNZ     ASKCONV 
 0362  E9 0284 R                        JMP     DDSIZOK                 ;Next 
                                 
 0365                           CANTTARG: 
 0365  58                               POP     AX                      ;Clean 
				stack 
 0366  58                               POP     AX 
 0367  58                               POP     AX 
 0368  58                               POP     AX 
 0369  52                               PUSH    DX                      ;Save p
				ointer to bad DIR 
 036A  BA 0000 E                        MOV     DX,OFFSET DG:BADTARG1 
 036D  E8 0000 E                        CALL    EPRINT 
 0370  5E                               POP     SI                      ;Pointe
				r to bad DIR 
 0371  E8 08DC R                        CALL    PRINTCURRDIRERR 
 0374  BA 0000 E                        MOV     DX,OFFSET DG:BADTARG2 
 0377  E8 0000 E                        CALL    EPRINT 
 037A  E9 0284 R                DDSIZOKJ: JMP   DDSIZOK                 ;Next 
                                 
 037D                           ASKCONV: 
 037D  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 0382  75 F6                            JNZ     DDSIZOKJ                ;Leave 
				on second pass 
 0384  BA 0000 E                        MOV     DX,OFFSET DG:PTRANDIR 
 0387  80 3E 0000 E 00                  CMP     [NOISY],0 
 038C  75 03                            JNZ     PRINTTRMES 
 038E  BA 0000 E                        MOV     DX,OFFSET DG:PTRANDIR2 
 0391                           PRINTTRMES: 
 0391  E8 0000 E                        CALL    PROMPTYN                ;Ask us
				er what to do 
 0394  75 E4                            JNZ     DDSIZOKJ                ;User s
				ay leave alone 
 0396  55                               PUSH    BP 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-72
DIRPROC -- Recursive directory processing                   

 0397  53                               PUSH    BX 
 0398  8B 47 17                         MOV     AX,[BX+THISENT]         ;Entry 
				number 
 039B  E8 0842 R                        CALL    GETENT                  ;Get th
				e entry 
 039E  8B F7                            MOV     SI,DI 
 03A0  BF 0000 E                        MOV     DI,OFFSET DG:DIRBUF 
 03A3  57                               PUSH    DI 
 03A4  83 C7 08                         ADD     DI,DIRNAM 
 03A7  B9 0020                          MOV     CX,32 
 03AA  F3/ A4                           REP     MOVSB                   ;Transf
				er entry to DIRBUF 
 03AC  5E                               POP     SI 
 03AD  56                               PUSH    SI 
 03AE  8B 74 22                         MOV     SI,[SI.DIRCLUS]         ;First 
				cluster 
 03B1  E8 0743 R                        CALL    GETFILSIZ 
 03B4  5E                               POP     SI 
 03B5  5B                               POP     BX 
 03B6  5D                               POP     BP 
 03B7  89 44 24                         MOV     WORD PTR [SI.DIRESIZ],AX       
				 ;Fix entry 
 03BA  89 54 26                         MOV     WORD PTR [SI.DIRESIZ+2],DX 
 03BD  E9 032D R                        JMP     CONVDIR 
                                 
                                SUBTTL  FAT Look routines 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-73
FAT Look routines                                           

                                PAGE 
 03C0                           CROSSLOOK: 
                                ;Same as MRKFAT only simpler for pass 2 
 03C0  89 1E 0000 E                     MOV     [SRFCBPT],BX 
 03C4  8B DE                            MOV     BX,SI 
 03C6  8B 77 22                         MOV     SI,[BX.DIRCLUS] 
 03C9  E8 03E2 R                        CALL    CROSSCHK 
 03CC  75 12                            JNZ     CROSSLINKJ 
 03CE                           CHLP: 
 03CE  53                               PUSH    BX 
 03CF  E8 0500 R                        CALL    UNPACK 
 03D2  5B                               POP     BX 
 03D3  87 F7                            XCHG    SI,DI 
 03D5  81 FE 0FF8                       CMP     SI,0FF8H 
 03D9  73 72                            JAE     CHAINDONEJ 
 03DB  E8 03E2 R                        CALL    CROSSCHK 
 03DE  74 EE                            JZ      CHLP 
 03E0  EB 72                    CROSSLINKJ: JMP SHORT CROSSLINK 
                                 
 03E2                           CROSSCHK: 
 03E2  8B 3E 0000 E                     MOV     DI,[FATMAP] 
 03E6  03 FE                            ADD     DI,SI 
 03E8  8A 25                            MOV     AH,[DI] 
 03EA  F6 C4 10                         TEST    AH,10H 
 03ED  C3                               RET 
                                 
 03EE  E9 04CB R                NOCLUSTERSJ: JMP        NOCLUSTERS 
                                 
 03F1                           MARKFAT: 
                                ; Map the file and perform checks 
                                ; SI points to dir entry 
                                ; AL is head mark with app type 
                                ; On return CX is number of clusters 
                                ; BX,SI preserved 
                                ; ZEROTRUNC is non zero if the file was trimmed
				 to zero length 
                                ; ISCROSS is non zero if the file is cross link
				ed 
                                 
 03F1  C6 06 0000 E 00                  MOV     [ZEROTRUNC],0   ;Initialize 
 03F6  C6 06 0000 E 00                  MOV     [ISCROSS],0 
 03FB  89 1E 0000 E                     MOV     [SRFCBPT],BX 
 03FF  8B DE                            MOV     BX,SI 
 0401  33 C9                            XOR     CX,CX 
 0403  8B 77 22                         MOV     SI,[BX.DIRCLUS] 
 0406  83 FE 02                         CMP     SI,2 
 0409  72 E3                            JB      NOCLUSTERSJ     ;Bad cluster # 
				 or nul file (SI = 0) 
 040B  3B 36 0000 E                     CMP     SI,[MCLUS] 
 040F  77 DD                            JA      NOCLUSTERSJ     ;Bad cluster # 
 0411  53                               PUSH    BX 
 0412  E8 0500 R                        CALL    UNPACK 
 0415  5B                               POP     BX 
 0416  74 D6                            JZ      NOCLUSTERSJ     ;Bad cluster (i
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-74
FAT Look routines                                           

				t is marked free) 
 0418  E8 0552 R                        CALL    MARKMAP 
 041B  75 37                            JNZ     CROSSLINK 
 041D  24 7F                            AND     AL,7FH                  ;Turn o
				ff head bit 
 041F                           CHASELOOP: 
 041F  53                               PUSH    BX 
 0420  E8 0500 R                        CALL    UNPACK 
 0423  5B                               POP     BX 
 0424  41                               INC     CX 
 0425  87 F7                            XCHG    SI,DI 
 0427  81 FE 0FF8                       CMP     SI,0FF8H 
 042B  73 4C                            JAE     CHAINDONE 
 042D  83 FE 02                         CMP     SI,2 
 0430  72 06                            JB      MRKBAD 
 0432  3B 36 0000 E                     CMP     SI,[MCLUS] 
 0436  76 17                            JBE     MRKOK 
 0438                           MRKBAD:                         ;Bad cluster # 
				in chain 
 0438  51                               PUSH    CX 
 0439  57                               PUSH    DI 
 043A  E8 08E6 R                        CALL    PRINTTHISELERR 
 043D  BA 0000 E                        MOV     DX,OFFSET DG:BADCHAIN 
 0440  E8 0000 E                        CALL    EPRINT 
 0443  5E                               POP     SI 
 0444  BA 0FFF                          MOV     DX,0FFFH        ;Insert EOF 
 0447  53                               PUSH    BX 
 0448  E8 051E R                        CALL    PACK 
 044B  5B                               POP     BX 
 044C  59                               POP     CX 
 044D  EB 2A                    CHAINDONEJ: JMP SHORT CHAINDONE 
                                 
 044F                           MRKOK: 
 044F  E8 0552 R                        CALL    MARKMAP 
 0452  74 CB                            JZ      CHASELOOP 
 0454                           CROSSLINK:                      ;File is cross 
				linked 
 0454  FE 06 0000 E                     INC     [ISCROSS] 
 0458  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 045D  74 1A                            JZ      CHAINDONE               ;Crossl
				inks only on second pass 
 045F  56                               PUSH    SI                      ;Cluste
				r number 
 0460  E8 08F2 R                        CALL    PRINTTHISEL 
 0463  E8 0000 E                        CALL    DOCRLF 
 0466  BA 0000 E                        MOV     DX,OFFSET DG:CROSSMES_PRE 
 0469  E8 0000 E                        CALL    PRINT 
 046C  5E                               POP     SI 
 046D  53                               PUSH    BX 
 046E  51                               PUSH    CX 
 046F  BB 0000 E                        MOV     BX,OFFSET DG:CROSSMES_POST 
 0472  33 FF                            XOR     DI,DI 
 0474  E8 0000 E                        CALL    DISP16BITS 
 0477  59                               POP     CX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-75
FAT Look routines                                           

 0478  5B                               POP     BX 
 0479                           CHAINDONE: 
 0479  F6 47 13 10                      TEST    [BX.DIRATT],ISDIR 
 047D  75 45                            JNZ     NOSIZE                  ;Don't 
				size dirs 
 047F  80 3E 0000 E 00                  CMP     [ISCROSS],0 
 0484  75 3E                            JNZ     NOSIZE                  ;Don't 
				size cross linked files 
 0486  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 048B  75 37                            JNZ     NOSIZE                  ;Don't 
				size on pass 2  (CX garbage) 
 048D  A0 0000 E                        MOV     AL,[CSIZE] 
 0490  32 E4                            XOR     AH,AH 
 0492  F7 26 0000 E                     MUL     [SSIZE] 
 0496  50                               PUSH    AX              ;Size in bytes 
				of one alloc unit 
 0497  F7 E1                            MUL     CX 
 0499  8B FA                            MOV     DI,DX           ;Save allocatio
				n size 
 049B  8B F0                            MOV     SI,AX 
 049D  2B 47 24                         SUB     AX,WORD PTR [BX.DIRESIZ] 
 04A0  1B 57 26                         SBB     DX,WORD PTR [BX.DIRESIZ+2] 
 04A3  72 0A                            JC      BADFSIZ         ;Size to big 
 04A5  0B D2                            OR      DX,DX 
 04A7  75 06                            JNZ     BADFSIZ         ;Size to small 
 04A9  5A                               POP     DX 
 04AA  3B C2                            CMP     AX,DX 
 04AC  72 16                            JB      NOSIZE          ;Size within on
				e Alloc unit 
 04AE  52                               PUSH    DX              ;Size to small 
 04AF                           BADFSIZ: 
 04AF  5A                               POP     DX 
 04B0  51                               PUSH    CX              ;Save size of f
				ile 
 04B1  89 77 24                         MOV     WORD PTR [BX.DIRESIZ],SI 
 04B4  89 7F 26                         MOV     WORD PTR [BX.DIRESIZ+2],DI 
 04B7  E8 0807 R                        CALL    FIXENT2                 ;Fix it
				 
 04BA  E8 08E6 R                        CALL    PRINTTHISELERR 
 04BD  BA 0000 E                        MOV     DX,OFFSET DG:BADCLUS 
 04C0  E8 0000 E                        CALL    EPRINT 
 04C3  59                               POP     CX              ;Restore size o
				f file 
 04C4                           NOSIZE: 
 04C4  8B F3                            MOV     SI,BX 
 04C6  8B 1E 0000 E                     MOV     BX,[SRFCBPT] 
 04CA  C3                               RET 
                                 
 04CB                           NOCLUSTERS: 
                                ;File is zero length 
 04CB  0B F6                            OR      SI,SI 
 04CD  74 1F                            JZ      CHKSIZ          ;Firclus is OK,
				 Check size 
 04CF  BA 0000 E                        MOV     DX,OFFSET DG:NULNZ 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-76
FAT Look routines                                           

 04D2                           ADJUST: 
 04D2  52                               PUSH    DX 
 04D3  E8 08E6 R                        CALL    PRINTTHISELERR 
 04D6  5A                               POP     DX 
 04D7  E8 0000 E                        CALL    EPRINT 
 04DA  33 F6                            XOR     SI,SI 
 04DC  89 77 22                         MOV     [BX.DIRCLUS],SI                
				 ;Set it to 0 
 04DF  89 77 24                         MOV     WORD PTR [BX.DIRESIZ],SI       
				 ;Set size too 
 04E2  89 77 26                         MOV     WORD PTR [BX.DIRESIZ+2],SI 
 04E5  E8 0807 R                        CALL    FIXENT2                        
				 ;Fix it 
 04E8  FE 06 0000 E                     INC     [ZEROTRUNC]                    
				 ;Indicate truncation 
 04EC  EB 8B                            JMP     CHAINDONE 
                                 
 04EE                           CHKSIZ: 
 04EE  BA 0000 E                        MOV     DX,OFFSET DG:BADCLUS 
 04F1  83 7F 24 00                      CMP     WORD PTR [BX.DIRESIZ],0 
 04F5  75 DB                            JNZ     ADJUST                         
				 ;Size wrong 
 04F7  83 7F 26 00                      CMP     WORD PTR [BX.DIRESIZ+2],0 
 04FB  75 D5                            JNZ     ADJUST                         
				 ;Size wrong 
 04FD  E9 0479 R                        JMP     CHAINDONE                      
				 ;Size OK 
                                 
 0500                           UNPACK: 
                                ;Cluster number in SI, Return contents in DI, B
				X destroyed 
                                ;ZERO SET IF CLUSTER IS FREE 
 0500  BB 0000 E                        MOV     BX,OFFSET DG:FAT 
 0503  8B FE                            MOV     DI,SI 
 0505  D1 EF                            SHR     DI,1 
 0507  03 FE                            ADD     DI,SI 
 0509  8B 39                            MOV     DI,WORD PTR [DI+BX] 
 050B  F7 C6 0001                       TEST    SI,1 
 050F  74 08                            JZ      HAVCLUS 
 0511  D1 EF                            SHR     DI,1 
 0513  D1 EF                            SHR     DI,1 
 0515  D1 EF                            SHR     DI,1 
 0517  D1 EF                            SHR     DI,1 
 0519                           HAVCLUS: 
 0519  81 E7 0FFF                       AND     DI,0FFFH 
 051D  C3                               RET 
                                 
 051E                           PACK: 
                                ; SI      CLUSTER NUMBER TO BE PACKED 
                                ; DX      DATA TO BE PLACED IN CLUSTER (SI) 
                                ; BX,DX   DESTROYED 
 051E  C6 06 0000 E 01                  MOV     [DIRTYFAT],1            ;Set FA
				T dirty byte 
 0523  C6 06 0000 E 01                  MOV     [HAVFIX],1              ;Indica
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-77
FAT Look routines                                           

				te a fix 
 0528  BB 0000 E                        MOV     BX,OFFSET DG:FAT 
 052B  56                               PUSH    SI 
 052C  8B FE                            MOV     DI,SI 
 052E  D1 EE                            SHR     SI,1 
 0530  03 F3                            ADD     SI,BX 
 0532  03 F7                            ADD     SI,DI 
 0534  D1 EF                            SHR     DI,1 
 0536  8B 3C                            MOV     DI,[SI] 
 0538  73 0E                            JNC     ALIGNED 
 053A  D1 E2                            SHL     DX,1 
 053C  D1 E2                            SHL     DX,1 
 053E  D1 E2                            SHL     DX,1 
 0540  D1 E2                            SHL     DX,1 
 0542  81 E7 000F                       AND     DI,0FH 
 0546  EB 04                            JMP     SHORT PACKIN 
 0548                           ALIGNED: 
 0548  81 E7 F000                       AND     DI,0F000H 
 054C                           PACKIN: 
 054C  0B FA                            OR      DI,DX 
 054E  89 3C                            MOV     [SI],DI 
 0550  5E                               POP     SI 
 0551  C3                               RET 
                                 
                                 
                                 
 0552                           MARKMAP: 
                                ; Mark in AL 
                                ; Cluster in SI 
                                ; AL,SI,CX preserved 
                                ; ZERO RESET IF CROSSLINK, AH IS THE MARK THAT 
				WAS THERE 
 0552  8B 3E 0000 E                     MOV     DI,[FATMAP] 
 0556  03 FE                            ADD     DI,SI 
 0558  8A 25                            MOV     AH,[DI] 
 055A  0A E4                            OR      AH,AH 
 055C  50                               PUSH    AX 
 055D  74 08                            JZ      SETMARK 
 055F  8A C4                            MOV     AL,AH 
 0561  FF 06 0000 E                     INC     [CROSSCNT]      ;Count the cros
				slink 
 0565  0C 10                            OR      AL,10H          ;Resets zero 
 0567                           SETMARK: 
 0567  88 05                            MOV     [DI],AL 
 0569  58                               POP     AX 
 056A  C3                               RET 
                                 
                                 
 056B                           CHKMAP: 
                                ;Compare FAT and FATMAP looking for badsectors 
				orphans 
 056B  8B 36 0000 E                     MOV     SI,[FATMAP] 
 056F  46                               INC     SI 
 0570  46                               INC     SI 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-78
FAT Look routines                                           

 0571  BA 0002                          MOV     DX,2 
 0574  8B 0E 0000 E                     MOV     CX,[DSIZE] 
 0578                           CHKMAPLP: 
 0578  AC                               LODSB 
 0579  0A C0                            OR      AL,AL 
 057B  75 22                            JNZ     CONTLP          ;Already seen t
				his one 
 057D  87 F2                            XCHG    SI,DX 
 057F  E8 0500 R                        CALL    UNPACK 
 0582  87 F2                            XCHG    SI,DX 
 0584  74 19                            JZ      CONTLP          ;Free cluster 
 0586  81 FF 0FF7                       CMP     DI,0FF7H        ;Bad sector? 
 058A  75 0B                            JNZ     ORPHAN          ;No, found an o
				rphan 
 058C  FF 06 0000 E                     INC     [BADSIZ] 
 0590  C6 44 FF 04                      MOV     BYTE PTR [SI-1],4       ;Flag i
				t 
 0594  EB 09 90                         JMP     CONTLP 
 0597                           ORPHAN: 
 0597  FF 06 0000 E                     INC     [ORPHSIZ] 
 059B  C6 44 FF 08                      MOV     BYTE PTR [SI-1],8       ;Flag i
				t 
 059F                           CONTLP: 
 059F  42                               INC     DX              ;Next cluster 
 05A0  E2 D6                            LOOP    CHKMAPLP 
 05A2  8B 36 0000 E                     MOV     SI,[ORPHSIZ] 
 05A6  0B F6                            OR      SI,SI 
 05A8  74 03                            JZ      RET18           ;No orphans 
 05AA  E8 05AE R                        CALL    RECOVER 
 05AD  C3                       RET18:  RET 
                                 
 05AE                           RECOVER: 
                                ;free orphans or do chain recovery 
 05AE  E8 08B9 R                        CALL    CHECKNOFMES 
 05B1  E8 0000 E                        CALL    DOCRLF 
 05B4  E8 0000 E                        CALL    CHAINREPORT 
 05B7  BA 0000 E                        MOV     DX,OFFSET DG:FREEMES 
 05BA  E8 0000 E                        CALL    PROMPTYN                ;Ask us
				er 
 05BD  75 03                            JNZ     NOCHAINREC 
 05BF  E9 067E R                        JMP     CHAINREC 
 05C2                           NOCHAINREC: 
 05C2  8B 36 0000 E                     MOV     SI,[FATMAP]             ;Free a
				ll orphans 
 05C6  46                               INC     SI 
 05C7  46                               INC     SI 
 05C8  BA 0002                          MOV     DX,2 
 05CB  8B 0E 0000 E                     MOV     CX,[DSIZE] 
 05CF                           CHKMAPLP2: 
 05CF  AC                               LODSB 
 05D0  A8 08                            TEST    AL,8 
 05D2  74 0B                            JZ      NEXTCLUS 
 05D4  87 F2                            XCHG    SI,DX 
 05D6  52                               PUSH    DX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-79
FAT Look routines                                           

 05D7  33 D2                            XOR     DX,DX 
 05D9  E8 051E R                        CALL    PACK            ;Mark as free 
 05DC  5A                               POP     DX 
 05DD  87 F2                            XCHG    SI,DX 
 05DF                           NEXTCLUS: 
 05DF  42                               INC     DX 
 05E0  E2 ED                            LOOP    CHKMAPLP2 
 05E2  33 C0                            XOR     AX,AX 
 05E4  87 06 0000 E                     XCHG    AX,[ORPHSIZ] 
 05E8  50                               PUSH    AX 
 05E9  BA 0000 E                        MOV     DX,OFFSET DG:FREEBYMESF_PRE 
 05EC  80 3E 0000 E 00                  CMP     [DOFIX],0 
 05F1  75 03                            JNZ     PRINTFMES 
 05F3  BA 0000 E                        MOV     DX,OFFSET DG:FREEBYMES_PRE 
 05F6                           PRINTFMES: 
 05F6  E8 0000 E                        CALL    PRINT 
 05F9  58                               POP     AX 
 05FA  BB 0000 E                        MOV     BX,OFFSET DG:FREEBYMESF_POST 
 05FD  80 3E 0000 E 00                  CMP     [DOFIX],0 
 0602  75 06                            JNZ     DISPFRB 
 0604  BB 0000 E                        MOV     BX,OFFSET DG:FREEBYMES_POST 
 0607  A3 0000 E                        MOV     [LCLUS],AX 
 060A                           DISPFRB: 
 060A  E8 0000 E                        CALL    DISPCLUS        ;Tell how much 
				freed 
 060D  C3                               RET 
                                 
 060E                           FINDCHAIN: 
                                ;Do chain recovery on orphans 
 060E  8B 36 0000 E                     MOV     SI,[FATMAP] 
 0612  46                               INC     SI 
 0613  46                               INC     SI 
 0614  BA 0002                          MOV     DX,2 
 0617  8B 0E 0000 E                     MOV     CX,[DSIZE] 
 061B                           CHKMAPLP3: 
 061B  AC                               LODSB 
 061C  A8 08                            TEST    AL,8            ;Orphan? 
 061E  74 5A                            JZ      NEXTCLUS2       ;Nope 
 0620  A8 01                            TEST    AL,1            ;Seen before ? 
 0622  75 56                            JNZ     NEXTCLUS2       ;Yup 
 0624  56                               PUSH    SI              ;Save search en
				vironment 
 0625  51                               PUSH    CX 
 0626  52                               PUSH    DX 
 0627  4E                               DEC     SI 
 0628  80 0C 81                         OR      BYTE PTR [SI],81H       ;Mark a
				s seen and head 
 062B  FF 06 0000 E                     INC     [ORPHCNT]      ;Found a chain 
 062F  8B F2                            MOV     SI,DX 
 0631                           CHAINLP: 
 0631  E8 0500 R                        CALL    UNPACK 
 0634  87 F7                            XCHG    SI,DI 
 0636  81 FE 0FF8                       CMP     SI,0FF8H 
 063A  73 3B                            JAE     CHGOON          ;EOF 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-80
FAT Look routines                                           

 063C  57                               PUSH    DI 
 063D  83 FE 02                         CMP     SI,2 
 0640  72 12                            JB      INSERTEOF       ;Bad cluster nu
				mber 
 0642  3B 36 0000 E                     CMP     SI,[MCLUS] 
 0646  77 0C                            JA      INSERTEOF       ;Bad cluster nu
				mber 
 0648  3B F7                            CMP     SI,DI 
 064A  74 08                            JZ      INSERTEOF       ;Tight loop 
 064C  E8 03E2 R                        CALL    CROSSCHK 
 064F  F6 C4 08                         TEST    AH,8            ;Points to a no
				n-orphan? 
 0652  75 09                            JNZ     CHKCHHEAD       ;Nope 
 0654                           INSERTEOF: 
 0654  5E                               POP     SI              ;Need to stick 
				EOF here 
 0655  BA 0FFF                          MOV     DX,0FFFH 
 0658  E8 051E R                        CALL    PACK 
 065B  EB 1A                            JMP     SHORT CHGOON 
 065D                           CHKCHHEAD: 
 065D  F6 C4 80                         TEST    AH,80H          ;Previosly mark
				ed head? 
 0660  74 0A                            JZ      ADDCHAIN        ;Nope 
 0662  80 25 7F                         AND     BYTE PTR [DI],NOT 80H   ;Turn o
				ff head bit 
 0665  FF 0E 0000 E                     DEC     [ORPHCNT]              ;Wasn't 
				really a head 
 0669  5F                               POP     DI              ;Clean stack 
 066A  EB 0B                            JMP     SHORT CHGOON 
 066C                           ADDCHAIN: 
 066C  F6 C4 01                         TEST    AH,1            ;Previosly seen
				? 
 066F  75 E3                            JNZ     INSERTEOF       ;Yup, don't mak
				e a cross link 
 0671  80 0D 01                         OR      BYTE PTR [DI],1 ;Mark as seen 
 0674  5F                               POP     DI              ;Clean stack 
 0675  EB BA                            JMP     CHAINLP         ;Follow chain 
                                 
 0677                           CHGOON: 
 0677  5A                               POP     DX              ;Restore search
				 
 0678  59                               POP     CX 
 0679  5E                               POP     SI 
 067A                           NEXTCLUS2: 
 067A  42                               INC     DX 
 067B  E2 9E                            LOOP    CHKMAPLP3 
 067D  C3                               RET 
                                 
 067E                           CHAINREC: 
 067E  C5 3E 0000 E                     LDS     DI,[THISDPB] 
                                ASSUME  DS:NOTHING 
 0682  8B 4D 09                         MOV     CX,[DI.dpb_root_entries] 
 0685  0E                               PUSH    CS 
 0686  1F                               POP     DS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-81
FAT Look routines                                           

                                ASSUME  DS:DG 
 0687  8B 36 0000 E                     MOV     SI,[FATMAP] 
 068B  46                               INC     SI 
 068C  46                               INC     SI 
 068D  BF 0001                          MOV     DI,1 
 0690  E8 0726 R                        CALL    NEXTORPH 
 0693  56                               PUSH    SI 
 0694  57                               PUSH    DI 
 0695  8B F7                            MOV     SI,DI 
 0697  33 C0                            XOR     AX,AX 
 0699  8B 16 0000 E                     MOV     DX,[ORPHCNT] 
 069D                           MAKFILLP: 
 069D  50                               PUSH    AX 
 069E  51                               PUSH    CX 
 069F  52                               PUSH    DX 
 06A0  56                               PUSH    SI 
 06A1  E8 0842 R                        CALL    GETENT 
 06A4  5E                               POP     SI 
 06A5  80 3D E5                         CMP     BYTE PTR [DI],0E5H 
 06A8  74 05                            JZ      GOTENT 
 06AA  80 3D 00                         CMP     BYTE PTR [DI],0 
 06AD  75 61                            JNZ     NEXTENT 
 06AF                           GOTENT: 
 06AF  C6 06 0000 E 01                  MOV     [HAVFIX],1      ;Making a fix 
 06B4  80 3E 0000 E 00                  CMP     [DOFIX],0 
 06B9  74 42                            JZ      ENTMADE         ;Not supposed t
				o, carry clear 
 06BB  89 75 1A                         MOV     [DI+26],SI      ;FIRCLUS Pointe
				r 
 06BE  50                               PUSH    AX              ;Save INT 26 da
				ta 
 06BF  52                               PUSH    DX 
 06C0  53                               PUSH    BX 
 06C1  B4 0D                            MOV     AH,DISK_RESET        ;Force cur
				rent state 
 06C3  CD 21                            INT     21H 
 06C5  BA 0000 E                        MOV     DX,OFFSET DG:ORPHFCB 
 06C8  B4 0F                            MOV     AH,FCB_OPEN 
 06CA                           OPAGAIN: 
 06CA  CD 21                            INT     21H 
 06CC  0A C0                            OR      AL,AL 
 06CE  75 05                            JNZ     GOTORPHNAM 
 06D0  E8 0730 R                        CALL    MAKORPHNAM                 ;Try
				 next name 
 06D3  EB F5                            JMP     SHORT OPAGAIN 
                                 
 06D5                           GOTORPHNAM: 
 06D5  BE 0001 E                        MOV     SI,OFFSET DG:ORPHFCB + 1   ;ORP
				HFCB Now has good name 
 06D8  B9 000B                          MOV     CX,11 
 06DB  F3/ A4                           REP     MOVSB 
 06DD  E8 0730 R                        CALL    MAKORPHNAM                 ;Mak
				e next name 
 06E0  33 C0                            XOR     AX,AX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-82
FAT Look routines                                           

 06E2  B9 000F                          MOV     CX,15 
 06E5  F3/ AA                           REP     STOSB 
 06E7  8B 35                            MOV     SI,[DI] 
 06E9  47                               INC     DI              ;Skip FIRCLUS 
 06EA  47                               INC     DI 
 06EB  57                               PUSH    DI 
 06EC  E8 0743 R                        CALL    GETFILSIZ 
 06EF  5F                               POP     DI 
 06F0  AB                               STOSW 
 06F1  8B C2                            MOV     AX,DX 
 06F3  AB                               STOSW 
 06F4  5B                               POP     BX 
 06F5  5A                               POP     DX 
 06F6  58                               POP     AX 
 06F7  B9 0001                          MOV     CX,1 
 06FA  E8 0000 E                        CALL    DOINT26 
 06FD                           ENTMADE: 
 06FD  5A                               POP     DX 
 06FE  59                               POP     CX 
 06FF  58                               POP     AX 
 0700  5F                               POP     DI 
 0701  5E                               POP     SI 
 0702  4A                               DEC     DX 
 0703  0B D2                            OR      DX,DX 
 0705  74 1B                            JZ      RET100 
 0707  E8 0726 R                        CALL    NEXTORPH 
 070A  56                               PUSH    SI 
 070B  57                               PUSH    DI 
 070C  8B F7                            MOV     SI,DI 
 070E  EB 03                            JMP     SHORT NXTORP 
                                 
 0710                           NEXTENT: 
 0710  5A                               POP     DX 
 0711  59                               POP     CX 
 0712  58                               POP     AX 
 0713                           NXTORP: 
 0713  40                               INC     AX 
 0714  E2 0D                            LOOP    MAKFILLPJ 
 0716  58                               POP     AX                      ;Clean 
				Stack 
 0717  58                               POP     AX 
 0718  29 16 0000 E                     SUB     [ORPHCNT],DX            ;Couldn
				't make them all 
 071C  BA 0000 E                        MOV     DX,OFFSET DG:CREATMES 
 071F  E8 0000 E                        CALL    EPRINT 
 0722  C3                       RET100: RET 
                                 
 0723  E9 069D R                MAKFILLPJ: JMP  MAKFILLP 
                                 
 0726                           NEXTORPH: 
 0726  50                               PUSH    AX 
 0727  AC                               LODSB 
 0728  47                               INC     DI 
 0729  3C 89                            CMP     AL,89H 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-83
FAT Look routines                                           

 072B  58                               POP     AX 
 072C  74 F4                            JZ      RET100 
 072E  EB F6                            JMP     SHORT NEXTORPH 
                                 
 0730                           MAKORPHNAM: 
 0730  56                               PUSH    SI 
 0731  BE FFFF E                        MOV     SI,OFFSET DG:ORPHEXT - 1 
 0734                           NAM0: 
 0734  FE 04                            INC     BYTE PTR [SI] 
 0736  80 3C 39                         CMP     BYTE PTR [SI],'9' 
 0739  7E 06                            JLE     NAMMADE 
 073B  C6 04 30                         MOV     BYTE PTR [SI],'0' 
 073E  4E                               DEC     SI 
 073F  EB F3                            JMP     NAM0 
                                 
 0741                           NAMMADE: 
 0741  5E                               POP     SI 
 0742  C3                               RET 
                                 
 0743                           GETFILSIZ: 
                                ;SI is start cluster, returns filesize as DX:AX
				 
 0743  33 C0                            XOR     AX,AX 
 0745                           NCLUS: 
 0745  E8 0500 R                        CALL    UNPACK 
 0748  87 F7                            XCHG    SI,DI 
 074A  40                               INC     AX 
 074B  81 FE 0FF8                       CMP     SI,0FF8H 
 074F  73 05                            JAE     GOTEOF 
 0751  83 FE 02                         CMP     SI,2 
 0754  73 EF                            JAE     NCLUS 
 0756                           GOTEOF: 
 0756  8A 1E 0000 E                     MOV     BL,[CSIZE] 
 075A  32 FF                            XOR     BH,BH 
 075C  F7 E3                            MUL     BX 
 075E  F7 26 0000 E                     MUL     [SSIZE] 
 0762  C3                               RET 
                                 
                                 
                                 
 0763                           CHKCROSS: 
                                ;Check for Crosslinks, do second pass if any to
				 find pairs 
 0763  8B 36 0000 E                     MOV     SI,[CROSSCNT] 
 0767  0B F6                            OR      SI,SI 
 0769  74 0E                            JZ      RET8            ;None 
 076B  E8 0000 E                        CALL    DOCRLF 
 076E  FE 06 0000 E                     INC     [SECONDPASS] 
 0772  33 C0                            XOR     AX,AX 
 0774  50                               PUSH    AX 
 0775  50                               PUSH    AX 
 0776  E8 0149 R                        CALL    DIRPROC         ;Do it again 
 0779  C3                       RET8:   RET 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-84
AMDONE - Finish up routine                                  

                                SUBTTL  AMDONE - Finish up routine 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-85
AMDONE - Finish up routine                                  

                                PAGE 
 077A                           AMDONE: 
                                ASSUME  DS:NOTHING 
 077A  36: 80 3E 0000 E 00              CMP     [DIRTYFAT],0 
 0780  74 66                            JZ      NOWRITE         ;FAT not dirty 
 0782  36: 80 3E 0000 E 00              CMP     [DOFIX],0 
 0788  74 5E                            JZ      NOWRITE         ;Not supposed t
				o fix 
 078A                           REWRITE: 
 078A  36: C5 1E 0000 E                 LDS     BX,[THISDPB] 
                                ASSUME  DS:NOTHING 
 078F  8A 4F 0F                         MOV     CL,[BX.dpb_FAT_size]          ;
				Sectors for one fat 
 0792  32 ED                            XOR     CH,CH 
 0794  8B F9                            MOV     DI,CX 
 0796  8A 4F 08                         MOV     CL,[BX.dpb_FAT_count]          
				;Number of FATs 
 0799  8B 57 06                         MOV     DX,[BX.dpb_first_FAT]          
				;First sector of FAT 
 079C  0E                               PUSH    CS 
 079D  1F                               POP     DS 
                                ASSUME  DS:DG 
 079E  88 2E 0000 E                     MOV     [ERRCNT],CH 
 07A2  BB 0000 E                        MOV     BX,OFFSET DG:FAT 
 07A5  A0 0000 E                        MOV     AL,[ALLDRV] 
 07A8  FE C8                            DEC     AL 
 07AA  B4 31                            MOV     AH,'1' 
 07AC  51                               PUSH    CX 
 07AD                           WRTLOOP: 
 07AD  87 CF                            XCHG    CX,DI 
 07AF  52                               PUSH    DX 
 07B0  51                               PUSH    CX 
 07B1  57                               PUSH    DI 
 07B2  50                               PUSH    AX 
 07B3  CD 26                            INT     26H                     ;Write 
				out the FAT 
 07B5  A2 0000 E                        MOV     [HECODE],AL 
 07B8  58                               POP     AX                      ;Flags 
 07B9  73 17                            JNC     WRTOK 
 07BB  FE 06 0000 E                     INC     [ERRCNT] 
 07BF  BA 0000 E                        MOV     DX,OFFSET DG:BADWRITE_PRE 
 07C2  E8 0000 E                        CALL    PRINT 
 07C5  58                               POP     AX 
 07C6  50                               PUSH    AX 
 07C7  8A D4                            MOV     DL,AH 
 07C9  E8 0000 E                        CALL    PRTCHR 
 07CC  BA 0000 E                        MOV     DX,OFFSET DG:BADWRITE_POST 
 07CF  E8 0000 E                        CALL    PRINT 
 07D2                           WRTOK: 
 07D2  58                               POP     AX 
 07D3  59                               POP     CX 
 07D4  5F                               POP     DI 
 07D5  5A                               POP     DX 
 07D6  FE C4                            INC     AH 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-86
AMDONE - Finish up routine                                  

 07D8  03 D7                            ADD     DX,DI 
 07DA  E2 D1                            LOOP    WRTLOOP         ;Next FAT 
 07DC  59                               POP     CX              ;Number of FATs
				 
 07DD  3A 0E 0000 E                     CMP     CL,[ERRCNT]     ;Error on all? 
 07E1  75 05                            JNZ     NOWRITE         ;no 
 07E3  E8 0000 E                        CALL    WDSKERR 
 07E6  74 A2                            JZ      REWRITE 
 07E8                           NOWRITE: 
 07E8  B4 0D                            MOV     AH,DISK_RESET        ;Invalidat
				e any buffers in system 
 07EA  CD 21                            INT     21H 
 07EC  BA 0000 E                        MOV     DX,OFFSET DG:USERDIR    ;Recove
				r users directory 
 07EF  B4 3B                            MOV     AH,CHDIR 
 07F1  CD 21                            INT     21H 
 07F3  80 3E 0000 E 01                  CMP     BYTE PTR [FRAGMENT],1   ;Check 
				for any fragmented files? 
 07F8  75 03                            JNZ     DONE                    ;No -- 
				we're finished 
 07FA  E8 0000 E                        CALL    CHECKFILES              ;Yes --
				 report any fragments 
 07FD                           DONE: 
                                ASSUME  DS:NOTHING 
 07FD  36: 8A 16 0000 E                 MOV     DL,[USERDEV]    ;Recover users 
				drive 
 0802  B4 0E                            MOV     AH,SET_DEFAULT_DRIVE 
 0804  CD 21                            INT     21H 
 0806  C3                               RET 
                                 
                                SUBTTL  Routines for manipulating dir entries 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-87
Routines for manipulating dir entries                       

                                PAGE 
 0807                           FIXENT2: 
                                ;Same as FIXENT only [SRFCBPT] points to the se
				arch FCB, BX points to the entry 
 0807  56                               PUSH    SI 
 0808  53                               PUSH    BX 
 0809  51                               PUSH    CX 
 080A  8B F3                            MOV     SI,BX 
 080C  36: 8B 1E 0000 E                 MOV     BX,[SRFCBPT] 
 0811  E8 0818 R                        CALL    FIXENT 
 0814  59                               POP     CX 
 0815  5B                               POP     BX 
 0816  5E                               POP     SI 
 0817  C3                       RET20:  RET 
                                 
 0818                           FIXENT: 
                                ;BX Points to search FCB 
                                ;SI Points to Entry to fix 
 0818  36: C6 06 0000 E 01              MOV     [HAVFIX],1      ;Indicate a fix
				 
 081E  36: 80 3E 0000 E 00              CMP     [DOFIX],0 
 0824  74 F1                            JZ      RET20           ;But don't do i
				t! 
 0826  55                               PUSH    BP 
 0827  53                               PUSH    BX 
 0828  56                               PUSH    SI 
 0829  56                               PUSH    SI              ;Entry pointer 
 082A  8B 47 17                         MOV     AX,[BX+THISENT]         ;Entry 
				number 
 082D  E8 0842 R                        CALL    GETENT 
 0830  5E                               POP     SI              ;Entry pointer 
 0831  83 C6 08                         ADD     SI,DIRNAM       ;Point to start
				 of entry 
 0834  B9 0020                          MOV     CX,32 
 0837  F3/ A4                           REP     MOVSB 
 0839  FE C1                            INC     CL 
 083B  E8 0000 E                        CALL    DOINT26 
 083E  5E                               POP     SI 
 083F  5B                               POP     BX 
 0840  5D                               POP     BP 
 0841  C3                               RET 
                                 
 0842                           GETENT: 
                                ;AX is desired entry number (in current directo
				ry) 
                                ; 
                                ;DI points to entry in SECBUF 
                                ;AX DX BX set to do an INT 26 to write it back 
				out (CX must be reset to 1) 
                                ;ALL registers destroyed (via int 25) 
 0842  36: C5 3E 0000 E                 LDS     DI,[THISDPB] 
                                ASSUME  DS:NOTHING 
 0847  8B 5D 1C                         MOV     BX,[DI.dpb_current_dir] 
 084A  0E                               PUSH    CS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-88
Routines for manipulating dir entries                       

 084B  1F                               POP     DS 
                                ASSUME  DS:DG 
 084C  81 FB 0FF8                       CMP     BX,0FF8H 
 0850  72 06                            JB      CLUSISOK 
 0852  BB 0000 E                        MOV     BX,OFFSET DG:BADDPBDIR         
				 ;This should never happen 
 0855  E9 094C R                        JMP     FATAL 
 0858                           CLUSISOK: 
 0858  B1 04                            MOV     CL,4 
 085A  D3 E0                            SHL     AX,CL 
 085C  33 D2                            XOR     DX,DX 
 085E  D1 E0                            SHL     AX,1 
 0860  D1 D2                            RCL     DX,1                    ;Accoun
				t for overflow 
 0862  8B 0E 0000 E                     MOV     CX,[SSIZE] 
 0866  80 E1 E0                         AND     CL,255-31               ;Must b
				e a multiple of 32 
 0869  F7 F1                            DIV     CX              ;DX is position
				 in sector, AX is dir sector # 
 086B  0B DB                            OR      BX,BX 
 086D  74 3C                            JZ      WANTROOT 
 086F  F6 36 0000 E                     DIV     [CSIZE]         ;AL # clusters 
				to skip, AH position in cluster 
 0873  8A C8                            MOV     CL,AL 
 0875  32 ED                            XOR     CH,CH 
 0877  E3 0B                            JCXZ    GOTCLUS 
 0879  8B F3                            MOV     SI,BX 
 087B                           SKIPLP: 
 087B  E8 0500 R                        CALL    UNPACK 
 087E  87 F7                            XCHG    SI,DI 
 0880  E2 F9                            LOOP    SKIPLP 
 0882  8B DE                            MOV     BX,SI 
 0884                           GOTCLUS: 
 0884  52                               PUSH    DX              ;Position in se
				ctor 
 0885  E8 0000 E                        CALL    FIGREC          ;Convert to sec
				tor # 
 0888                           DOROOTDIR: 
 0888  8B 1E 0000 E                     MOV     BX,[SECBUF] 
 088C  A0 0000 E                        MOV     AL,[ALLDRV] 
 088F  FE C8                            DEC     AL 
 0891                           RDRETRY: 
 0891  50                               PUSH    AX 
 0892  52                               PUSH    DX 
 0893  53                               PUSH    BX 
 0894  B9 0001                          MOV     CX,1 
 0897  CD 25                            INT     25H             ;Read it 
 0899  A2 0000 E                        MOV     [HECODE],AL 
 089C  58                               POP     AX              ;FLAGS 
 089D  5B                               POP     BX 
 089E  5A                               POP     DX 
 089F  58                               POP     AX 
 08A0  73 05                            JNC     RDOK2 
 08A2  E8 0000 E                        CALL    RDSKERR 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-89
Routines for manipulating dir entries                       

 08A5  74 EA                            JZ      RDRETRY 
 08A7                           RDOK2: 
 08A7  5F                               POP     DI              ;Offset into se
				ctor 
 08A8  03 FB                            ADD     DI,BX           ;Add sector bas
				e offset 
 08AA  C3                               RET 
                                 
 08AB                           WANTROOT: 
 08AB  52                               PUSH    DX 
 08AC  C5 3E 0000 E                     LDS     DI,[THISDPB] 
                                ASSUME  DS:NOTHING 
 08B0  8B D0                            MOV     DX,AX 
 08B2  03 55 10                         ADD     DX,[DI.dpb_dir_sector] 
 08B5  0E                               PUSH    CS 
 08B6  1F                               POP     DS 
                                ASSUME  DS:DG 
 08B7  EB CF                            JMP     DOROOTDIR 
                                 
 08B9                           CHECKNOFMES: 
 08B9  B0 01                            MOV     AL,1 
 08BB  86 06 0000 E                     XCHG    AL,[FIXMFLG] 
 08BF  0A C0                            OR      AL,AL 
 08C1  75 18                            JNZ     RET14           ;Don't print it
				 more than once 
 08C3  80 3E 0000 E 00                  CMP     [DOFIX],0 
 08C8  75 11                            JNZ     RET14           ;Don't print it
				 if F switch specified 
 08CA  52                               PUSH    DX 
 08CB  BA 0000 E                        MOV     DX,OFFSET DG:FIXMES 
 08CE  E8 0000 E                        CALL    PRINT 
 08D1  5A                               POP     DX 
 08D2  C3                               RET 
                                 
 08D3                           CHECKERR: 
 08D3  E8 08B9 R                        CALL    CHECKNOFMES 
 08D6  80 3E 0000 E 00                  CMP     [SECONDPASS],0 
 08DB  C3                       RET14:  RET 
                                 
 08DC                           PRINTCURRDIRERR: 
 08DC  E8 08D3 R                        CALL    CHECKERR 
 08DF  75 FA                            JNZ     RET14 
 08E1  E8 08FF R                        CALL    PRINTCURRDIR 
 08E4  EB 08                            JMP     SHORT ERREX 
                                 
 08E6                           PRINTTHISELERR: 
 08E6  E8 08D3 R                        CALL    CHECKERR 
 08E9  75 F0                            JNZ     RET14 
 08EB  E8 08F2 R                        CALL    PRINTTHISEL 
 08EE                           ERREX: 
 08EE  E8 0000 E                        CALL    DOCRLF 
 08F1  C3                               RET 
                                 
 08F2                           PRINTTHISEL: 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-90
Routines for manipulating dir entries                       

 08F2  8B F3                            MOV     SI,BX 
 08F4  83 C6 08                         ADD     SI,DIRNAM 
 08F7                           PRINTTHISEL2: 
 08F7  BF 0000 E                        MOV     DI,OFFSET DG:NAMBUF 
 08FA  57                               PUSH    DI 
 08FB  E8 0000 E                        CALL    FCB_TO_ASCZ 
 08FE  5E                               POP     SI 
 08FF                           PRINTCURRDIR: 
 08FF  56                               PUSH    SI 
 0900  8A 16 0000 E                     MOV     DL,[ALLDRV] 
 0904  80 C2 40                         ADD     DL,'@' 
 0907  E8 0000 E                        CALL    PRTCHR 
 090A  B2 3A                            MOV     DL,DRVCHAR 
 090C  E8 0000 E                        CALL    PRTCHR 
 090F  C5 36 0000 E                     LDS     SI,[THISDPB] 
                                ASSUME  DS:NOTHING 
 0913  83 7C 1C 00                      CMP     [SI.dpb_current_dir],0 
 0917  74 17                            JZ      CURISROOT 
 0919  36: 8A 16 0000 E                 MOV     DL,[DIRCHAR] 
 091E  E8 0000 E                        CALL    PRTCHR 
 0921  83 C6 1E                         ADD     SI,dpb_dir_text 
 0924                           PCURRLP: 
 0924  AC                               LODSB 
 0925  0A C0                            OR      AL,AL 
 0927  74 07                            JZ      CURISROOT 
 0929  8A D0                            MOV     DL,AL 
 092B  E8 0000 E                        CALL    PRTCHR 
 092E  EB F4                            JMP     PCURRLP 
                                 
 0930                           CURISROOT: 
 0930  0E                               PUSH    CS 
 0931  1F                               POP     DS 
                                ASSUME  DS:DG 
 0932  5E                               POP     SI 
 0933  80 3C 00                         CMP     BYTE PTR [SI],0 
 0936  74 13                            JZ      LPDONE          ;If tail string
				 NUL, no '/' 
 0938  8A 16 0000 E                     MOV     DL,[DIRCHAR] 
 093C  E8 0000 E                        CALL    PRTCHR 
 093F                           ERRLOOP: 
 093F  AC                               LODSB 
 0940  0A C0                            OR      AL,AL 
 0942  74 07                            JZ      LPDONE 
 0944  8A D0                            MOV     DL,AL 
 0946  E8 0000 E                        CALL    PRTCHR 
 0949  EB F4                            JMP     ERRLOOP 
 094B                           LPDONE: 
 094B  C3                               RET 
                                 
 094C                           FATAL: 
                                ;Unrecoverable error 
 094C  BA 0000 E                        MOV     DX,OFFSET DG:FATALMES 
 094F  E8 0000 E                        CALL    PRINT 
 0952  8B D3                            MOV     DX,BX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Page     1-91
Routines for manipulating dir entries                       

 0954  E8 0000 E                        CALL    PRINT 
 0957  8A 16 0000 E                     MOV     DL,[USERDEV]            ;At lea
				st leave on same drive 
 095B  B4 0E                            MOV     AH,SET_DEFAULT_DRIVE 
 095D  CD 21                            INT     21H 
 095F  CD 20                            INT     20H 
                                 
                                 
 0961  0975 R                   INT_24_RETADDR  DW      OFFSET DG:INT_24_BACK 
                                 
 0963                           INT_24  PROC    FAR 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 0963  9C                               PUSHF 
 0964  0E                               PUSH    CS 
 0965  2E: FF 36 0961 R                 PUSH    [INT_24_RETADDR] 
 096A  2E: FF 36 0002 E                 PUSH    WORD PTR [HARDCH+2] 
 096F  2E: FF 36 0000 E                 PUSH    WORD PTR [HARDCH] 
 0974  CB                               RET 
                                INT_24  ENDP 
                                 
 0975                           INT_24_BACK: 
 0975  3C 02                            CMP     AL,2            ;Abort? 
 0977  75 05                            JNZ     IRETI 
 0979  E8 07FD R                        CALL    DONE            ;Forget about d
				irectory, restore users drive 
 097C  CD 20                            INT     20H 
 097E                           IRETI: 
 097E  CF                               IRET 
                                 
 097F                           INT_23: 
 097F  2E: C5 16 0000 E                 LDS     DX,[HARDCH] 
 0984  B8 2524                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 24H 
 0987  CD 21                            INT     21H 
 0989  2E: C5 16 0000 E                 LDS     DX,[CONTCH] 
 098E  B8 2523                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 23H 
 0991  CD 21                            INT     21H 
 0993  0E                               PUSH    CS 
 0994  1F                               POP     DS 
                                ASSUME  DS:DG 
 0995  C6 06 0000 E 00                  MOV     [FRAGMENT],0 
 099A                           RDONE: 
 099A  E8 07E8 R                        CALL    NOWRITE         ;Restore users 
				drive and directory 
 099D  CD 20                            INT     20H 
                                 
 099F                           CODE    ENDS 
                                        END     CHKPROC 

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIRENT . . . . . . . . . . . . .  	0028	0009
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-2
                                                             

  DIRNAM . . . . . . . . . . . .  	0008
  DIRATT . . . . . . . . . . . .  	0013
  DIRTIM . . . . . . . . . . . .  	001E
  DIRDAT . . . . . . . . . . . .  	0020
  DIRCLUS  . . . . . . . . . . .  	0022
  DIRESIZ  . . . . . . . . . . .  	0024
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-3
                                                             

  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-4
                                                             

  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
SRCHFCB  . . . . . . . . . . . .  	002C	0001
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	099F	PARA	PUBLIC	
  CONST  . . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  DATA . . . . . . . . . . . . .  	0000	WORD	PUBLIC	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-5
                                                             

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDCHAIN . . . . . . . . . . . .  	L NEAR	066C	CODE
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ADJUST . . . . . . . . . . . . .  	L NEAR	04D2	CODE
ALIGNED  . . . . . . . . . . . .  	L NEAR	0548	CODE
ALLDRV . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ALLFILE  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
AMDONE . . . . . . . . . . . . .  	L NEAR	077A	CODE	Global
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASKCONV  . . . . . . . . . . . .  	L NEAR	037D	CODE
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADATT . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADCHAIN . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADCLUS  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADDDSIZ . . . . . . . . . . . .  	L NEAR	026E	CODE
BADDPBDIR  . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADDSIZ  . . . . . . . . . . . .  	L NEAR	01F8	CODE
BADFSIZ  . . . . . . . . . . . .  	L NEAR	04AF	CODE
BADSIZ . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
BADSIZM  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADTARG1 . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADTARG2 . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADWRITE_POST  . . . . . . . . .  	V BYTE 	0000	CONST	External
BADWRITE_PRE . . . . . . . . . .  	V BYTE 	0000	CONST	External
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-6
                                                             

BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CANTREC  . . . . . . . . . . . .  	L NEAR	0092	CODE
CANTREC2 . . . . . . . . . . . .  	L NEAR	010B	CODE
CANTTARG . . . . . . . . . . . .  	L NEAR	0365	CODE
CDDDMES  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
CHAINDONE  . . . . . . . . . . .  	L NEAR	0479	CODE
CHAINDONEJ . . . . . . . . . . .  	L NEAR	044D	CODE
CHAINLP  . . . . . . . . . . . .  	L NEAR	0631	CODE
CHAINREC . . . . . . . . . . . .  	L NEAR	067E	CODE
CHAINREPORT  . . . . . . . . . .  	L NEAR	0000	CODE	External
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHASELOOP  . . . . . . . . . . .  	L NEAR	041F	CODE
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHECKERR . . . . . . . . . . . .  	L NEAR	08D3	CODE	Global
CHECKFILES . . . . . . . . . . .  	L NEAR	0000	CODE	External
CHECKNOFMES  . . . . . . . . . .  	L NEAR	08B9	CODE
CHGOON . . . . . . . . . . . . .  	L NEAR	0677	CODE
CHKCHHEAD  . . . . . . . . . . .  	L NEAR	065D	CODE
CHKCROSS . . . . . . . . . . . .  	L NEAR	0763	CODE	Global
CHKDOTDOT  . . . . . . . . . . .  	L NEAR	0214	CODE
CHKMAP . . . . . . . . . . . . .  	L NEAR	056B	CODE	Global
CHKMAPLP . . . . . . . . . . . .  	L NEAR	0578	CODE
CHKMAPLP2  . . . . . . . . . . .  	L NEAR	05CF	CODE
CHKMAPLP3  . . . . . . . . . . .  	L NEAR	061B	CODE
CHKPROC  . . . . . . . . . . . .  	L NEAR	0000	CODE
CHKSIZ . . . . . . . . . . . . .  	L NEAR	04EE	CODE
CHLP . . . . . . . . . . . . . .  	L NEAR	03CE	CODE
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CLUSBAD  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
CLUSISOK . . . . . . . . . . . .  	L NEAR	0858	CODE
CONTCH . . . . . . . . . . . . .  	V DWORD	0000	DATA	External
CONTLP . . . . . . . . . . . . .  	L NEAR	059F	CODE
CONVDIR  . . . . . . . . . . . .  	L NEAR	032D	CODE
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREATMES . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CROSSCHK . . . . . . . . . . . .  	L NEAR	03E2	CODE
CROSSCNT . . . . . . . . . . . .  	V WORD 	0000	CONST	External
CROSSLINK  . . . . . . . . . . .  	L NEAR	0454	CODE
CROSSLINKJ . . . . . . . . . . .  	L NEAR	03E0	CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-7
                                                             

CROSSLOOK  . . . . . . . . . . .  	L NEAR	03C0	CODE
CROSSMES_POST  . . . . . . . . .  	V BYTE 	0000	CONST	External
CROSSMES_PRE . . . . . . . . . .  	V BYTE 	0000	CONST	External
CSIZE  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURISROOT  . . . . . . . . . . .  	L NEAR	0930	CODE
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DATTOK . . . . . . . . . . . . .  	L NEAR	01CE	CODE
DDATTOK  . . . . . . . . . . . .  	L NEAR	0244	CODE
DDLINKOK . . . . . . . . . . . .  	L NEAR	0260	CODE
DDOTENT  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DDSIZOK  . . . . . . . . . . . .  	L NEAR	0284	CODE
DDSIZOKJ . . . . . . . . . . . .  	L NEAR	037A	CODE
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DELLOOP  . . . . . . . . . . . .  	L NEAR	0016	CODE
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIRBUF . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
DIRCHAR  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DIRCNT . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
DIRDONE  . . . . . . . . . . . .  	L NEAR	02B3	CODE
DIRECMES . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRPROC  . . . . . . . . . . . .  	L NEAR	0149	CODE	Global
DIRSIZ . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-8
                                                             

DIRTYFAT . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DISP16BITS . . . . . . . . . . .  	L NEAR	0000	CODE	External
DISPCLUS . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DISPFRB  . . . . . . . . . . . .  	L NEAR	060A	CODE
DLINKOK  . . . . . . . . . . . .  	L NEAR	01EA	CODE
DOCRLF . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DODDH  . . . . . . . . . . . . .  	L NEAR	02B0	CODE
DOEXTMES1  . . . . . . . . . . .  	L NEAR	0048	CODE
DOEXTMES2  . . . . . . . . . . .  	L NEAR	00B9	CODE
DOEXTMES3  . . . . . . . . . . .  	L NEAR	012A	CODE
DOFIX  . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DOINT26  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DONE . . . . . . . . . . . . . .  	L NEAR	07FD	CODE	Global
DOROOTDIR  . . . . . . . . . . .  	L NEAR	0888	CODE
DOSVER . . . . . . . . . . . . .  	Number	00D3	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DOTCOMBMES . . . . . . . . . . .  	L NEAR	0000	CODE	External
DOTDOTHARDWAY  . . . . . . . . .  	L NEAR	0000	CODE
DOTDOTOK . . . . . . . . . . . .  	L NEAR	021B	CODE
DOTENT . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DOTGOON  . . . . . . . . . . . .  	L NEAR	00A3	CODE
DOTMES . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DOTOK  . . . . . . . . . . . . .  	L NEAR	01B2	CODE
DOTSBAD  . . . . . . . . . . . .  	L NEAR	0136	CODE
DOTSNOGOOD . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DPROC1 . . . . . . . . . . . . .  	L NEAR	0319	CODE
DPROC2 . . . . . . . . . . . . .  	L NEAR	0337	CODE
DRVCHAR  . . . . . . . . . . . .  	Number	003A	
DSIZE  . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
DSIZOK . . . . . . . . . . . . .  	L NEAR	020E	CODE
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENTMADE  . . . . . . . . . . . .  	L NEAR	06FD	CODE
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENTSIZ . . . . . . . . . . . . .  	Number	0028	
EPRINT . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
ERRCNT . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ERREX  . . . . . . . . . . . . .  	L NEAR	08EE	CODE
ERRLOOP  . . . . . . . . . . . .  	L NEAR	093F	CODE
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-9
                                                             

ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ERRSUB . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FAT  . . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
FATAL  . . . . . . . . . . . . .  	L NEAR	094C	CODE	Global
FATALMES . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
FATMAP . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FCB_TO_ASCZ  . . . . . . . . . .  	L NEAR	0000	CODE	External
FIGREC . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
FILCNT . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-10
                                                             

FILSIZ . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
FINDCHAIN  . . . . . . . . . . .  	L NEAR	060E	CODE	Global
FINDEND  . . . . . . . . . . . .  	L NEAR	0010	CODE
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FIXENT . . . . . . . . . . . . .  	L NEAR	0818	CODE
FIXENT2  . . . . . . . . . . . .  	L NEAR	0807	CODE
FIXMES . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
FIXMFLG  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
FPROC1 . . . . . . . . . . . . .  	L NEAR	02CE	CODE
FRAGMENT . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
FREEBYMESF_POST  . . . . . . . .  	V BYTE 	0000	CONST	External
FREEBYMESF_PRE . . . . . . . . .  	V BYTE 	0000	CONST	External
FREEBYMES_POST . . . . . . . . .  	V BYTE 	0000	CONST	External
FREEBYMES_PRE  . . . . . . . . .  	V BYTE 	0000	CONST	External
FREEMES  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETENT . . . . . . . . . . . . .  	L NEAR	0842	CODE
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETFILSIZ  . . . . . . . . . . .  	L NEAR	0743	CODE
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOTCLUS  . . . . . . . . . . . .  	L NEAR	0884	CODE
GOTENT . . . . . . . . . . . . .  	L NEAR	06AF	CODE
GOTEOF . . . . . . . . . . . . .  	L NEAR	0756	CODE
GOTORPHNAM . . . . . . . . . . .  	L NEAR	06D5	CODE

HARDCH . . . . . . . . . . . . .  	V DWORD	0000	DATA	External
HAVCLUS  . . . . . . . . . . . .  	L NEAR	0519	CODE
HAVFIX . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
HECODE . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
HIDCNT . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
HIDDN  . . . . . . . . . . . . .  	Number	0002	
HIDENFILE  . . . . . . . . . . .  	L NEAR	02F8	CODE
HIDSIZ . . . . . . . . . . . . .  	V WORD 	0000	CONST	External

INDENT . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-11
                                                             

INSERTEOF  . . . . . . . . . . .  	L NEAR	0654	CODE
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_23 . . . . . . . . . . . . .  	L NEAR	097F	CODE	Global
INT_24 . . . . . . . . . . . . .  	F PROC	0963	CODE	Global	Length = 0012
INT_24_BACK  . . . . . . . . . .  	L NEAR	0975	CODE
INT_24_RETADDR . . . . . . . . .  	L WORD 	0961	CODE
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IRETI  . . . . . . . . . . . . .  	L NEAR	097E	CODE
ISCROSS  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ISDIR  . . . . . . . . . . . . .  	Number	0010	

KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LCLUS  . . . . . . . . . . . . .  	V WORD 	0000	CONST	External
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LPDONE . . . . . . . . . . . . .  	L NEAR	094B	CODE
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAKFILLP . . . . . . . . . . . .  	L NEAR	069D	CODE
MAKFILLPJ  . . . . . . . . . . .  	L NEAR	0723	CODE
MAKORPHNAM . . . . . . . . . . .  	L NEAR	0730	CODE
MARKFAT  . . . . . . . . . . . .  	L NEAR	03F1	CODE
MARKMAP  . . . . . . . . . . . .  	L NEAR	0552	CODE
MCLUS  . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
MESD1  . . . . . . . . . . . . .  	L NEAR	0054	CODE
MESD2  . . . . . . . . . . . . .  	L NEAR	00C5	CODE
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-12
                                                             

MOREDIR  . . . . . . . . . . . .  	L NEAR	02B9	CODE
MRKBAD . . . . . . . . . . . . .  	L NEAR	0438	CODE
MRKOK  . . . . . . . . . . . . .  	L NEAR	044F	CODE

NAM0 . . . . . . . . . . . . . .  	L NEAR	0734	CODE
NAMBUF . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
NAMMADE  . . . . . . . . . . . .  	L NEAR	0741	CODE
NCLUS  . . . . . . . . . . . . .  	L NEAR	0745	CODE
NDOTMES  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NEWDIR . . . . . . . . . . . . .  	L NEAR	030D	CODE
NEXTCLUS . . . . . . . . . . . .  	L NEAR	05DF	CODE
NEXTCLUS2  . . . . . . . . . . .  	L NEAR	067A	CODE
NEXTENT  . . . . . . . . . . . .  	L NEAR	0710	CODE
NEXTORPH . . . . . . . . . . . .  	L NEAR	0726	CODE
NFIX . . . . . . . . . . . . . .  	L NEAR	0102	CODE
NOCHAINREC . . . . . . . . . . .  	L NEAR	05C2	CODE
NOCLUSTERS . . . . . . . . . . .  	L NEAR	04CB	CODE
NOCLUSTERSJ  . . . . . . . . . .  	L NEAR	03EE	CODE
NODDOT . . . . . . . . . . . . .  	L NEAR	00AC	CODE
NODDOTJ  . . . . . . . . . . . .  	L NEAR	0218	CODE
NODOT  . . . . . . . . . . . . .  	L NEAR	003B	CODE
NOISY  . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NONULLDERR . . . . . . . . . . .  	L NEAR	01A2	CODE
NOPRINT  . . . . . . . . . . . .  	L NEAR	0183	CODE
NOPRINT2 . . . . . . . . . . . .  	L NEAR	02E7	CODE
NORECDDOT  . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NORECDOT . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NORMFILE . . . . . . . . . . . .  	L NEAR	0302	CODE
NOSIZE . . . . . . . . . . . . .  	L NEAR	04C4	CODE
NOWRITE  . . . . . . . . . . . .  	L NEAR	07E8	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NUL  . . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NULDMES  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NULLDIRERR . . . . . . . . . . .  	L NEAR	011E	CODE
NULNZ  . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
NXTORP . . . . . . . . . . . . .  	L NEAR	0713	CODE

OEM  . . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OPAGAIN  . . . . . . . . . . . .  	L NEAR	06CA	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-13
                                                             

ORPHAN . . . . . . . . . . . . .  	L NEAR	0597	CODE
ORPHCNT  . . . . . . . . . . . .  	V WORD 	0000	CONST	External
ORPHEXT  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ORPHFCB  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ORPHSIZ  . . . . . . . . . . . .  	V WORD 	0000	CONST	External

PACK . . . . . . . . . . . . . .  	L NEAR	051E	CODE
PACKIN . . . . . . . . . . . . .  	L NEAR	054C	CODE
PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PARSTR . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
PCURRLP  . . . . . . . . . . . .  	L NEAR	0924	CODE
PRINT  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
PRINTCURRDIR . . . . . . . . . .  	L NEAR	08FF	CODE
PRINTCURRDIRERR  . . . . . . . .  	L NEAR	08DC	CODE	Global
PRINTFMES  . . . . . . . . . . .  	L NEAR	05F6	CODE
PRINTTHISEL  . . . . . . . . . .  	L NEAR	08F2	CODE
PRINTTHISEL2 . . . . . . . . . .  	L NEAR	08F7	CODE	Global
PRINTTHISELERR . . . . . . . . .  	L NEAR	08E6	CODE
PRINTTRMES . . . . . . . . . . .  	L NEAR	0391	CODE
PROMPTYN . . . . . . . . . . . .  	L NEAR	0000	CODE	External
PRTCHR . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
PTRANDIR . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
PTRANDIR2  . . . . . . . . . . .  	V BYTE 	0000	CONST	External

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
RDOK2  . . . . . . . . . . . . .  	L NEAR	08A7	CODE
RDONE  . . . . . . . . . . . . .  	L NEAR	099A	CODE	Global
RDONLY . . . . . . . . . . . . .  	Number	0001	
RDRETRY  . . . . . . . . . . . .  	L NEAR	0891	CODE
RDSKERR  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RECOVER  . . . . . . . . . . . .  	L NEAR	05AE	CODE
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RET100 . . . . . . . . . . . . .  	L NEAR	0722	CODE
RET14  . . . . . . . . . . . . .  	L NEAR	08DB	CODE
RET18  . . . . . . . . . . . . .  	L NEAR	05AD	CODE
RET20  . . . . . . . . . . . . .  	L NEAR	0817	CODE
RET8 . . . . . . . . . . . . . .  	L NEAR	0779	CODE
REWRITE  . . . . . . . . . . . .  	L NEAR	078A	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
ROOTDIR  . . . . . . . . . . . .  	L NEAR	028A	CODE
ROOTDIRJ . . . . . . . . . . . .  	L NEAR	0146	CODE
RPRI . . . . . . . . . . . . . .  	Number	0006	

SECBUF . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-14
                                                             

SECONDPASS . . . . . . . . . . .  	V BYTE 	0000	CONST	External
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETCURR  . . . . . . . . . . . .  	L NEAR	002A	CODE
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETMARK  . . . . . . . . . . . .  	L NEAR	0567	CODE
SETROOT  . . . . . . . . . . . .  	L NEAR	0034	CODE
SETTERM  . . . . . . . . . . . .  	L NEAR	0027	CODE
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SFCBSIZ  . . . . . . . . . . . .  	Number	002C	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SKIPLP . . . . . . . . . . . . .  	L NEAR	087B	CODE
SRFCBPT  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SSIZE  . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
STACKISOK  . . . . . . . . . . .  	L NEAR	0166	CODE
STACKLIM . . . . . . . . . . . .  	V WORD 	0000	DATA	External
STACKMES . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
SUBERRP  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
SYSTM  . . . . . . . . . . . . .  	Number	0004	

THISDPB  . . . . . . . . . . . .  	V DWORD	0000	DATA	External
THISENT  . . . . . . . . . . . .  	Number	0017	
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:38:06
CHKPROC - Procedures called from chkdsk                     Symbols-15
                                                             

UNPACK . . . . . . . . . . . . .  	L NEAR	0500	CODE	Global
USERDEV  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
USERDIR  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
USERIDOPER . . . . . . . . . . .  	Number	005E	

VER  . . . . . . . . . . . . . .  	Text  		
VOLIDA . . . . . . . . . . . . .  	Number	0008	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WANTROOT . . . . . . . . . . . .  	L NEAR	08AB	CODE
WDSKERR  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRTLOOP  . . . . . . . . . . . .  	L NEAR	07AD	CODE
WRTOK  . . . . . . . . . . . . .  	L NEAR	07D2	CODE

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZEROTRUNC  . . . . . . . . . . .  	V BYTE 	0000	DATA	External


   2677 Source  Lines
   2739 Total   Lines
    755 Symbols

  14796 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
