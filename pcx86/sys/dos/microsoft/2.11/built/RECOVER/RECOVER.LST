Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-1
                                                            

                                TITLE   RECOVER MS-DOS File/Disk Recovery Utili
				ty 
                                ;----------------------------------------------
				------------ 
                                ; 
                                ;       Recover - Program to rebuild an ms.dos 
				directory 
                                ; 
                                ;       Copyright 1982 by Microsoft Corporation
				 
                                ;       Written by Chris Peters, April 1982 
                                ; 
                                ;----------------------------------------------
				------------- 
                                ; 
                                ;REV 1.5 added header message ARR 
                                ; 
                                 
 = 0000                         FALSE   EQU     0 
 = FFFF                         TRUE    EQU     NOT FALSE 
                                 
                                 
 =                              IBMVER  EQU     true 
 =                              KANJI   EQU     FALSE 
                                 
 = 0021                         bdos    equ     21h 
 = 0020                         boot    equ     20h 
 = 0025                         aread   equ     25h 
 = 0026                         awrite  equ     26h 
                                 
                             C          INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-2
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-3
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-9
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-10
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-11
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-12
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-13
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-14
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-15
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-16
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-17
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-18
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  IFNDEF IBM		;STDSW.ASM (and COMSW.ASM) may have
				 already set IBM 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (DOSVER / 100) 
 = 000B                      C  DOS_MINOR_VERSION   EQU     (DOSVER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-19
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-20
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-21
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-22
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-23
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-24
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-25
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-26
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-27
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-28
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-29
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-30
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-31
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-32
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-33
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-34
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-35
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-36
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-37
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-38
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-39
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-40
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-41
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-42
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-43
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-44
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-45
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-46
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-47
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-48
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-49
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-50
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-51
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-52
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-53
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-54
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-55
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-56
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-57
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                                 
                                 
                                ; 
 = 000D                         cr      equ     0dh 
 = 000A                         lf      equ     0ah 
                                ; 
 = 005C                         fcb     equ     5ch 
                                 
 0000                           code    segment public 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-58
                                                            

 0000                           code    ends 
                                 
 0000                           const   segment public byte 
 0000                           const   ends 
                                 
 0000                           data    segment public byte 
 0000                           data    ends 
                                 
                                 
                                dg      group   code,const,data 
                                 
 0000                           code    segment public 
                                        assume  cs:dg,ds:dg,es:dg,ss:dg 
                                 
                                        PUBLIC  PCRLF,PRINT,INT_23,convert 
                                        EXTRN   dskwrt:NEAR,dskrd:NEAR,DSKERR:N
				EAR,report:NEAR 
                                 
 0100                                   org     100h 
                                 
 0100  E9 02EA R                recover:jmp     rec_start 
                                 
 0103  56 65 72 73 20 31 2E     HEADER  DB      "Vers 1.50" 
       35 30                    
                                 
                                ;----------------------------------------------
				-------------------------; 
 010C  ????????                 hardch  dd      ? 
                                 
 0110  00                       the_root db     0                       ;root d
				irectory flag 
                                 
 0111  00                       fudge   db      0                       ;direct
				ory changed flag 
 0112  00                       user_drive      db      0 
 0113  00                       drive   db      0 
                                 
                                 
 0114  2F 00                    dirchar db      "/",0 
                                 
                                 
 0116  2F 00                    userdir db      "/",0 
 0118  0040[                            db      (dirstrlen) dup(0) 
            00                  
                         ]      
                                
                                 
 0158  0080[                    fname_buffer db 128 dup(0) 
            00                  
                         ]      
                                
                                ;----------------------------------------------
				-------------------------; 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-59
                                                            

 01D8  BA 0000 E                pcrlf:  mov     dx,offset dg: crlf 
 01DB  B4 09                    print:  mov     ah,STD_CON_STRING_OUTPUT 
 01DD  CD 21                            int     bdos 
 01DF  C3                       pret:   ret 
                                ; 
 01E0  53                       convert:push    bx 
 01E1  33 C0                            xor     ax,ax 
 01E3  8B D8                            mov     bx,ax 
 01E5  8B E8                            mov     bp,ax 
 01E7  B9 0020                          mov     cx,32 
 01EA  D1 E6                    convlp: shl     si,1 
 01EC  D1 D7                            rcl     di,1 
 01EE  95                               xchg    ax,bp 
 01EF  E8 0241 R                        call    convwrd 
 01F2  95                               xchg    ax,bp 
 01F3  93                               xchg    ax,bx 
 01F4  E8 0241 R                        call    convwrd 
 01F7  93                               xchg    ax,bx 
 01F8  14 00                            adc     al,0 
 01FA  E2 EE                            loop    convlp 
                                 
 01FC  B9 1810                          mov     cx,1810h 
 01FF  92                               xchg    dx,ax 
 0200  E8 0227 R                        call    digit 
 0203  93                               xchg    ax,bx 
 0204  E8 0211 R                        call    outword 
 0207  8B C5                            mov     ax,bp 
 0209  E8 0211 R                        call    outword 
 020C  5A                               pop     dx 
 020D  E8 01DB R                        call    print 
 0210  C3                       ret2:   ret 
                                ; 
 0211  50                       outword:push    ax 
 0212  8A D4                            mov     dl,ah 
 0214  E8 0218 R                        call    outbyte 
 0217  5A                               pop     dx 
 0218  8A F2                    outbyte:mov     dh,dl 
 021A  D0 EA                            shr     dl,1 
 021C  D0 EA                            shr     dl,1 
 021E  D0 EA                            shr     dl,1 
 0220  D0 EA                            shr     dl,1 
 0222  E8 0227 R                        call    digit 
 0225  8A D6                            mov     dl,dh 
 0227  80 E2 0F                 digit:  and     dl,0fh 
 022A  74 02                            jz      blankzer 
 022C  32 C9                            xor     cl,cl 
 022E                           blankzer: 
 022E  FE CD                            dec     ch 
 0230  22 CD                            and     cl,ch 
 0232  80 CA 30                         or      dl,30h 
 0235  2A D1                            sub     dl,cl 
 0237  80 FA 30                         cmp     dl,30h 
 023A  7C D4                            jl      ret2 
 023C  B4 02                            mov     ah,STD_CON_OUTPUT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-60
                                                            

 023E  CD 21                            int     bdos 
 0240  C3                               ret 
                                ; 
 0241  12 C0                    convwrd:adc     al,al 
 0243  27                               daa 
 0244  86 C4                            xchg    al,ah 
 0246  12 C0                            adc     al,al 
 0248  27                               daa 
 0249  86 C4                            xchg    al,ah 
 024B  C3                               ret 
                                ; 
                                ;       bx = fat[ax] 
                                ; 
 024C  BB 0044 R                getfat: mov     bx,offset dg: fattbl 
 024F  50                               push    ax 
 0250  8B F0                            mov     si,ax 
 0252  D1 F8                            sar     ax,1 
 0254  9C                               pushf 
 0255  03 F0                            add     si,ax 
 0257  8B 18                            mov     bx,word ptr [bx][si] 
 0259  9D                               popf 
 025A  73 04                            jnc     getfat1 
 025C  B1 04                            mov     cl,4 
 025E  D3 EB                            shr     bx,cl 
 0260  80 E7 0F                 getfat1:and     bh,00001111b 
 0263  58                               pop     ax 
 0264  8B 0E 0036 R                     mov     cx,secsiz 
 0268  C3                               ret 
                                ; 
                                ;       fat[ax] = dx 
                                ; 
 0269  BB 0044 R                setfat: mov     bx,offset dg: fattbl 
 026C  50                               push    ax 
 026D  52                               push    dx 
 026E  8B F0                            mov     si,ax 
 0270  D1 F8                            sar     ax,1 
 0272  9C                               pushf 
 0273  03 F0                            add     si,ax 
 0275  8B 00                            mov     ax,word ptr [bx][si] 
 0277  9D                               popf 
 0278  73 0E                            jnc     setfat2 
 027A  25 000F                          and     ax,000fh 
 027D  B1 04                            mov     cl,4 
 027F  D3 E2                            shl     dx,cl 
 0281  0B C2                    setfat1:or      ax,dx 
 0283  89 00                            mov     word ptr [bx][si],ax 
 0285  5A                               pop     dx 
 0286  58                               pop     ax 
 0287  C3                               ret 
                                 
 0288  25 F000                  setfat2:and     ax,0f000h 
 028B  EB F4                            jmp     setfat1 
                                 
 028D  8B 16 0028 R             load:   mov     dx,firfat 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-61
                                                            

 0291  A0 0025 R                        mov     al,byte ptr fatnum 
 0294  A2 0024 R                        mov     byte ptr fatcnt,al 
 0297  A0 0113 R                        mov     al,byte ptr drive 
 029A  8B 0E 0026 R                     mov     cx,fatsiz 
 029E  BB 0044 R                        mov     bx,offset dg: fattbl 
 02A1  C3                       ret66:  ret 
                                 
 02A2  E8 028D R                readft: call    load 
 02A5  E8 0000 E                readit: call    dskrd 
 02A8  83 3E 0020 R 00                  cmp     [fndfat],0      ;save location 
				of readable fat sector 
 02AD  75 04                            jnz     fdfat 
 02AF  89 16 0020 R                     mov     [fndfat],dx 
 02B3  83 7F 01 FF              fdfat:  cmp     word ptr [bx+1],-1 
 02B7  74 E8                            jz      ret66 
                                 
 02B9  03 D1                            add     dx,cx           ;try to read th
				e other fats 
 02BB  FE 0E 0024 R                     dec     byte ptr fatcnt 
 02BF  75 E4                            jnz     readit 
                                 
 02C1  8B 16 0020 R                     mov     dx,[fndfat]     ;see if any rea
				dable at all 
 02C5  0B D2                            or      dx,dx 
 02C7  74 D9                            jz      readft          ;if not disk is
				 blown, keep trying 
 02C9  E8 0000 E                        call    dskrd 
 02CC  C3                               ret 
                                 
 02CD  E8 028D R                wrtfat: call    load 
 02D0  50                       wrtit:  push    ax 
 02D1  53                               push    bx 
 02D2  51                               push    cx 
 02D3  52                               push    dx 
 02D4  E8 0000 E                        call    dskwrt 
 02D7  5A                               pop     dx 
 02D8  59                               pop     cx 
 02D9  5B                               pop     bx 
 02DA  58                               pop     ax 
                                 
 02DB  03 D1                    wrtok:  add     dx,cx 
 02DD  FE 0E 0024 R                     dec     byte ptr fatcnt 
 02E1  75 ED                            jnz     wrtit 
 02E3  C3                               ret 
                                 
 02E4                           printerr: 
 02E4  E8 01DB R                        call    print 
 02E7  E9 0708 R                        jmp     rabort 
                                 
                                 
 02EA                           rec_start: 
                                 
                                ;Code to print header 
                                ;       PUSH    AX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-62
                                                            

                                ;       MOV     DX,OFFSET DG:HEADER 
                                ;       CALL    print 
                                ;       POP     AX 
                                 
 = 0200                         DOSVER_HIGH     EQU  0200H   ;2.00 in hex 
 02EA  50                               PUSH    AX              ;Save DRIVE val
				idity info 
 02EB  B4 30                            MOV     AH,GET_VERSION 
 02ED  CD 21                            INT     21H 
 02EF  86 E0                            XCHG    AH,AL           ;Turn it around
				 to AH.AL 
 02F1  3D 0200                          CMP     AX,DOSVER_HIGH 
 02F4  73 08                            JAE     OKDOS 
 02F6                           GOTBADDOS: 
 02F6  BA 0000 E                        MOV     DX,OFFSET DG:BADVER 
 02F9  E8 01DB R                        CALL    PRINT 
 02FC  CD 20                            INT     20H 
                                 
 02FE  58                       OKDOS:  POP     AX 
                                 
 02FF  3C FF                            cmp     al,0ffH 
 0301  74 18                            JZ      BADDRVSPECJ 
 0303  BE 0080                          mov     si,80h 
 0306  AC                               lodsb 
 0307  0A C0                            or      al,al 
 0309  74 0D                            jz      noparm 
 030B  AC                       look:   lodsb 
 030C  3C 20                            cmp     al," " 
 030E  74 FB                            jz      look 
 0310  3C 09                            cmp     al,9 
 0312  74 F7                            jz      look 
 0314  3C 0D                            cmp     al,13 
 0316  75 06                            jnz     gotparm 
 0318                           noparm: 
 0318  E9 048D R                        jmp     noname 
                                 
 031B  E9 0412 R                BADDRVSPECJ: JMP BADDRVSPEC 
                                 
 031E                           gotparm: 
 031E  B4 0D                            mov     ah,DISK_RESET 
 0320  CD 21                            int     bdos                    ;empty 
				buffer queue 
                                 
 0322  B4 19                            mov     ah,get_default_drive    ;save c
				urrent drive 
 0324  CD 21                            int     21h 
 0326  A2 0112 R                        mov     [user_drive],al 
                                 
 0329  BB 005C                          mov     bx,fcb                  ;determ
				ine input command 
 032C  8A 07                            mov     al,[bx] 
 032E  FE C8                            dec     al 
 0330  3C FF                            cmp     al,-1 
 0332  75 03                            jnz     drvok1 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-63
                                                            

 0334  A0 0112 R                        mov     al,[user_drive] 
 0337                           drvok1: 
 0337  A2 0113 R                        mov     [drive],al 
 033A  00 06 0000 E                     add     [drvlet],al 
 033E  00 06 0000 E                     add     [drvlet1],al 
 0342  BA 0000 E                        mov     dx,offset dg: askmsg 
 0345  E8 01DB R                        call    print 
 0348  B4 0C                            mov     ah,STD_CON_INPUT_FLUSH 
 034A  B0 01                            mov     al,1                    ;wait f
				or a key 
 034C  CD 21                            int     bdos 
                                 
 034E  3C 17                            cmp     al,17h 
 0350  75 3F                            jnz     drvok2 
 0352  BA 0357 R                        mov     dx,offset dg: egomes 
 0355  EB 8D                            jmp     printerr 
 0357  43 68 72 69 73 20 50     egomes: db      "Chris Peters helped with the n
				ew dos!",cr,lf 
       65 74 65 72 73 20 68     
       65 6C 70 65 64 20 77     
       69 74 68 20 74 68 65     
       20 6E 65 77 20 64 6F     
       73 21 0D 0A              
 037E  4D 69 63 72 6F 73 6F             db      "Microsoft rules ok$" 
       66 74 20 72 75 6C 65     
       73 20 6F 6B 24           
                                 
 0391                           drvok2: 
                                        IF      IBMVER 
 0391  A0 0113 R                        MOV     AL,DRIVE                ;This i
				s for ibm's single drive sys 
 0394  1E                               PUSH    DS 
 0395  BB 0050                          MOV     BX,50H 
 0398  8E DB                            MOV     DS,BX 
 039A  A2 0004                          MOV     DS:(BYTE PTR 4),AL             
				 ;Indicate drive changed 
 039D  1F                               POP     DS 
                                        ENDIF 
                                 
                                ;----- Process Pathnames ----------------------
				-------------------------; 
 039E  B8 3700                          mov     ax,(char_oper shl 8)    ;get sw
				itch character 
 03A1  CD 21                            int     21h 
 03A3  80 FA 2F                         cmp     dl,"/" 
 03A6  75 0A                            jnz     slashok                 ;if not
				 / , then not PC 
 03A8  C6 06 0114 R 5C                  mov     [dirchar],"\"           ;in PC,
				 dir separator = \ 
 03AD  C6 06 0116 R 5C                  mov     [userdir],"\" 
                                 
 03B2                           slashok: 
 03B2  BE 0081                          mov     si,81h                  ;point 
				to cammand line 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-64
                                                            

 03B5  BF 0158 R                        mov     di,offset dg: fname_buffer 
 03B8  33 C9                            xor     cx,cx                   ;zero p
				athname length 
                                 
 03BA                           kill_bl: 
 03BA  AC                               lodsb                           ;get ri
				d of blanks 
 03BB  3C 09                            cmp     al,9 
 03BD  74 FB                            je      kill_bl 
 03BF  3C 20                            cmp     al,' ' 
 03C1  74 F7                            je      kill_bl 
 03C3  3C 0D                            cmp     al,13                   ;A carr
				iage return? 
 03C5  75 03                            jne     next_char 
 03C7  E9 048D R                        jmp     noname                  ;yes, f
				ile name missing 
                                 
 03CA                           next_char: 
 03CA  AA                               stosb                           ;put pa
				tname in buffer 
 03CB  41                               inc     cx 
 03CC  AC                               lodsb 
 03CD  3C 20                            cmp     al,' ' 
 03CF  74 08                            je      name_copied 
 03D1  3C 09                            cmp     al,9 
 03D3  74 04                            je      name_copied 
 03D5  3C 0D                            cmp     al,13                   ; a CR 
				? 
 03D7  75 F1                            jne     next_char 
                                 
 03D9                           name_copied: 
 03D9  C6 05 00                         mov     byte ptr [di],0         ;nul te
				rminate the pathname 
 03DC  4F                               dec     di                      ;adjust
				 to the end of the pathname 
                                 
                                ;----- Scan for directory ---------------------
				-------------------------; 
                                 
                                        ELSE 
 03DD  A0 0114 R                        mov     al,[dirchar]            ;get di
				rectory separator character 
 03E0  FD                               std                             ;scan b
				ackwards 
 03E1  F2/ AE                           repnz   scasb                   ;(cx ha
				s the pathname length) 
 03E3  FC                               cld                             ;reset 
				direction, just in case 
 03E4  74 03                            jz      sja 
                                        ENDIF 
                                 
 03E6  E9 047E R                        jmp     same_dir                ;no dir
				 separator char. found, the 
                                                                        ; file 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-65
                                                            

				is in the current directory 
                                                                        ; of th
				e corresponding drive. Ergo, 
                                                                        ; the F
				CB contains the data already. 
                                 
 03E9                           sja: 
 03E9  E3 05                            jcxz    sjb                     ;no mor
				e chars left, it refers to root 
 03EB  80 3D 3A                         cmp     byte ptr [di],':'       ;is the
				 prvious character a disk def? 
 03EE  75 05                            jne     not_root 
 03F0                           sjb: 
 03F0  C6 06 0110 R 01                  mov     [the_root],01h          ;file i
				s in the root 
 03F5                           not_root: 
 03F5  47                               inc     di                      ;point 
				to dir separator char. 
 03F6  B0 00                            mov     al,0 
 03F8  AA                               stosb                           ;nul te
				rminate directory name 
 03F9  58                               pop     ax 
 03FA  57                               push    di                      ;save p
				ointer to file name 
 03FB  C6 06 0111 R 01                  mov     [fudge],01h             ;rememb
				er that the current directory 
                                                                        ; has b
				een changed. 
                                 
                                ;----- Save current directory for exit --------
				-------------------------; 
 0400  8A 16 005C                       mov     dl,byte ptr ds:[fcb]    ;get sp
				ecified drive if any 
 0404  0A D2                            or      dl,dl                   ;defaul
				t disk? 
 0406  74 10                            jz      same_drive 
 0408  FE CA                            dec     dl                      ;adjust
				 to real drive (a=0,b=1,...) 
 040A  B4 0E                            mov     ah,set_default_drive    ;change
				 disks 
 040C  CD 21                            int     21h 
 040E  3C FF                            cmp     al,-1                   ;error?
				 
 0410  75 06                            jne     same_drive 
 0412                           BADDRVSPEC: 
 0412  BA 0000 E                        mov     dx,offset dg: baddrv 
 0415  E9 02E4 R                        jmp     printerr 
                                 
 0418                           same_drive: 
 0418  B4 1F                            mov     ah,get_default_dpb 
 041A  CD 21                            int     21h 
                                 
                                assume  ds:nothing 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-66
                                                            

 041C  3C FF                            cmp     al,-1                   ;bad dr
				ive? (should always be ok) 
 041E  75 06                            jne     drvisok 
 0420  BA 0000 E                        mov     dx,offset dg: baddrv 
 0423  E9 02E4 R                        jmp     printerr 
                                 
 0426                           drvisok: 
 0426  83 7F 1C 00                      cmp     [bx.dpb_current_dir],0 
 042A  74 0E                            je      curr_is_root 
 042C  8B F3                            mov     si,bx 
 042E  83 C6 1E                         add     si,dpb_dir_text 
 0431  BF 0117 R                        mov     di,offset dg: userdir + 1 
                                 
 0434                           dir_save_loop: 
 0434  AC                               lodsb 
 0435  AA                               stosb 
 0436  0A C0                            or      al,al 
 0438  75 FA                            jnz     dir_save_loop 
                                 
 043A                           curr_is_root: 
 043A  0E                               push    cs 
 043B  1F                               pop     ds 
                                 
                                assume  ds:dg 
                                 
                                 
                                ;----- Change directories ---------------------
				-------------------------; 
 043C  80 3E 0110 R 01                  cmp     [the_root],01h 
 0441  BA 0114 R                        mov     dx,offset dg: [dirchar]        
				    ;assume the root 
 0444  74 03                            je      sj1 
 0446  BA 0158 R                        mov     dx,offset dg: [fname_buffer] 
 0449                           sj1: 
 0449  B4 3B                            mov     ah,chdir                       
				 ;change directory 
 044B  CD 21                            int     21h 
 044D  BA 0000 E                        mov     dx,offset dg: baddrv 
 0450  73 03                            jnc     no_errors 
 0452  E9 02E4 R                        jmp     printerr 
 0455                           no_errors: 
                                 
                                ;----- Set Up int 24 intercept ----------------
				-------------------------; 
                                 
 0455  B8 3524                          mov     ax,(get_interrupt_vector shl 8)
				 or 24h 
 0458  CD 21                            int     21h 
 045A  89 1E 010C R                     mov     word ptr [hardch],bx 
 045E  8C 06 010E R                     mov     word ptr [hardch+2],es 
 0462  B8 2523                          mov     ax,(set_interrupt_vector shl 8)
				 or 23h 
 0465  BA 0705 R                        mov     dx,offset dg: int_23 
 0468  CD 21                            int     21h 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-67
                                                            

 046A  B8 2524                          mov     ax,(set_interrupt_vector shl 8)
				 or 24h 
 046D  BA 072E R                        mov     dx,offset dg: int_24 
 0470  CD 21                            int     21h 
 0472  0E                               push    cs 
 0473  07                               pop     es 
                                 
                                ;----- Parse filename to FCB ------------------
				-------------------------; 
 0474  5E                               pop     si 
 0475  BF 005C                          mov     di,fcb 
 0478  B8 2901                          mov     ax,(parse_file_descriptor shl 8
				) or 1 
 047B  CD 21                            int     21h 
 047D  50                               push    ax 
                                ;----------------------------------------------
				-------------------------; 
 047E                           same_dir: 
 047E  58                               pop     ax 
                                 
 047F  BB 005C                          mov     bx,fcb 
 0482  80 7F 01 20                      cmp     byte ptr [bx+1],' '     ;must s
				pecify file name 
 0486  75 0E                            jnz     drvok 
 0488  80 3F 00                         cmp     byte ptr [bx],0         ;or dri
				ve specifier 
 048B  75 09                            jnz     drvok 
 048D  BA 0000 E                noname: mov     dx,offset dg: drverr 
 0490  E8 01DB R                        call    print 
 0493  E9 0705 R                        jmp     int_23 
                                 
 0496  1E                       drvok:  push    ds 
 0497  8A 16 0113 R                     mov     dl,drive 
 049B  FE C2                            inc     dl 
 049D  B4 32                            mov     ah,GET_DPB 
 049F  CD 21                            int     bdos 
 04A1  8B 47 02                         mov     ax,word ptr [bx+2]      ;get ph
				ysical sector size 
 04A4  8A 4F 04                         mov     cl,byte ptr [bx+4]      ;get se
				ctors/cluster - 1 
 04A7  32 ED                            xor     ch,ch 
 04A9  41                               inc     cx 
 04AA  2E: 89 0E 002C R                 mov     cs:secall,cx            ;save s
				ectors per cluster 
 04AF  F7 E1                            mul     cx                      ;ax = b
				ytes per cluster 
 04B1  8B 6F 0B                         mov     bp,word ptr [bx+11]     ;get re
				cord of first sector 
 04B4  8B 57 10                         mov     dx,word ptr [bx+16]     ;get re
				cord of first directory entry 
 04B7  8B 77 06                         mov     si,word ptr [bx+6]      ;get re
				cord of first fat 
 04BA  8A 4F 0F                         mov     cl,byte ptr [bx+15]     ;get si
				ze of fat 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-68
                                                            

 04BD  8B 7F 0D                         mov     di,word ptr [bx+13]     ;get nu
				mber of clusters 
 04C0  8A 6F 08                         mov     ch,byte ptr [bx+8]      ;get nu
				mber of fats on drive 
 04C3  8B 5F 09                         mov     bx,word ptr [bx+9]      ;get ma
				x number of dir entries 
 04C6  1F                               pop     ds 
                                 
 04C7  89 1E 0030 R                     mov     maxent,bx 
 04CB  89 36 0028 R                     mov     firfat,si 
 04CF  89 2E 0032 R                     mov     firrec,bp 
 04D3  89 16 0034 R                     mov     firdir,dx 
 04D7  88 0E 0026 R                     mov     byte ptr fatsiz,cl 
 04DB  89 3E 0040 R                     mov     lastfat,di              ;number
				 of fat entries 
 04DF  88 2E 0025 R                     mov     byte ptr fatnum,ch      ;save n
				umber of fats on disk 
                                 
 04E3  A3 0036 R                        mov     secsiz,ax 
                                 
 04E6  8B 3E 0042 R                     mov     di,table                ;di poi
				nts into constructed directory 
 04EA  B8 E5E5                          mov     ax,0e5e5h               ;delete
				d file magic number 
 04ED  D1 E3                            shl     bx,1                    ;16 wor
				ds in a dir entry 
 04EF  D1 E3                            shl     bx,1 
 04F1  D1 E3                            shl     bx,1 
 04F3  D1 E3                            shl     bx,1 
 04F5  8B CB                            mov     cx,bx 
 04F7  F3/ AB                           rep     stosw 
                                 
 04F9  E8 02A2 R                        call    readft 
 04FC  BB 005C                          mov     bx,fcb 
 04FF  80 7F 01 20                      cmp     byte ptr [bx+1],' ' 
 0503  74 03                            jz      recdsk 
 0505  E9 060E R                        jmp     recfil 
                                 
 0508  8B 3E 0042 R             recdsk: mov     di,table 
 050C  C7 06 002A R 0002                mov     fatptr,2 
 0512  A1 002A R                        mov     ax,fatptr 
 0515  E8 024C R                step1:  call    getfat 
 0518  81 FB 0FFF                       cmp     bx,0fffh 
 051C  74 03                            jz      step1a 
 051E  E9 05C8 R                        jmp     step6 
 0521  C7 06 003C R 0000        step1a: mov     filsiz,0 
 0527  C7 06 003E R 0000                mov     word ptr filsiz+2,0 
 052D  8B 16 0040 R                     mov     dx,lastfat 
 0531  A3 002E R                        mov     target,ax 
 0534  B8 0002                  step2:  mov     ax,2 
 0537  01 0E 003C R                     add     filsiz,cx 
 053B  83 16 003E R 00                  adc     word ptr filsiz+2,0 
 0540  E8 024C R                step3:  call    getfat 
 0543  3B 1E 002E R                     cmp     bx,target 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-69
                                                            

 0547  75 05                            jne     step4 
 0549  A3 002E R                        mov     target,ax 
 054C  EB E6                            jmp     step2 
 054E  40                       step4:  inc     ax 
 054F  3B C2                            cmp     ax,dx 
 0551  7E ED                            jle     step3 
                                ; 
                                ;       at this point target = head of list, fi
				lsiz = file size 
                                ; 
 0553  FF 06 0022 R                     inc     filcnt                  ;increm
				ent file count 
 0557  A1 0030 R                        mov     ax,maxent 
 055A  39 06 0022 R                     cmp     filcnt,ax               ;compar
				e with max number of entries 
 055E  77 78                            ja      direrr 
                                 
 0560  BE 0007 R                        mov     si,(offset dg: dirent)+7 
 0563  FE 04                    nam0:   inc     byte ptr [si]           ;increm
				ent file name 
 0565  80 3C 39                         cmp     byte ptr [si],'9' 
 0568  7E 06                            jle     nam1 
 056A  C6 04 30                         mov     byte ptr [si],'0' 
 056D  4E                               dec     si 
 056E  EB F3                            jmp     nam0 
                                 
 0570  B4 2A                    nam1:   mov     ah,GET_DATE 
 0572  CD 21                            int     bdos                    ;set th
				e date 
 0574  81 E9 07BC                       sub     cx,1980 
 0578  02 F6                            add     dh,dh 
 057A  02 F6                            add     dh,dh 
 057C  02 F6                            add     dh,dh 
 057E  02 F6                            add     dh,dh 
 0580  02 F6                            add     dh,dh 
 0582  D0 D1                            rcl     cl,1 
 0584  0A F2                            or      dh,dl 
 0586  88 36 0018 R                     mov     byte ptr dirent+24,dh 
 058A  88 0E 0019 R                     mov     byte ptr dirent+25,cl 
 058E  B4 2C                            mov     ah,GET_TIME 
 0590  CD 21                            int     bdos                    ;set th
				e time 
 0592  D0 EE                            shr     dh,1 
 0594  02 C9                            add     cl,cl 
 0596  02 C9                            add     cl,cl 
 0598  02 C9                            add     cl,cl 
 059A  D0 D5                            rcl     ch,1 
 059C  02 C9                            add     cl,cl 
 059E  D0 D5                            rcl     ch,1 
 05A0  02 C9                            add     cl,cl 
 05A2  D0 D5                            rcl     ch,1 
 05A4  0A F1                            or      dh,cl 
 05A6  88 36 0016 R                     mov     byte ptr dirent+22,dh 
 05AA  88 2E 0017 R                     mov     byte ptr dirent+23,ch 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-70
                                                            

                                 
 05AE  A1 003C R                        mov     ax,filsiz                      
				 ;set file size 
 05B1  A3 001C R                        mov     word ptr dirent+28,ax 
 05B4  A1 003E R                        mov     ax,word ptr filsiz+2 
 05B7  A3 001E R                        mov     word ptr dirent+30,ax 
 05BA  A1 002E R                        mov     ax,target                      
				 ;set first cluster location 
 05BD  A3 001A R                        mov     word ptr dirent+26,ax 
                                 
 05C0  BE 0000 R                        mov     si,offset dg: dirent           
				     ;copy in new dir entry 
 05C3  B9 0020                          mov     cx,32 
 05C6  F3/ A4                           rep     movsb 
                                 
 05C8  FF 06 002A R             step6:  inc     fatptr                         
				 ;keep looking for eof's 
 05CC  A1 002A R                        mov     ax,fatptr 
 05CF  3B 06 0040 R                     cmp     ax,lastfat 
 05D3  7F 0D                            jg      step7 
 05D5  E9 0515 R                        jmp     step1 
                                 
 05D8  FF 0E 0022 R             direrr: dec     filcnt 
 05DC  BA 0000 E                        mov     dx,offset dg: dirmsg 
 05DF  E8 01DB R                        call    print 
                                 
 05E2                           step7: 
 05E2  A0 0113 R                        mov     al,drive 
 05E5  8B 16 0034 R                     mov     dx,firdir               ;write 
				out constructed directory 
 05E9  8B 0E 0032 R                     mov     cx,firrec 
 05ED  2B CA                            sub     cx,dx 
 05EF  8B 1E 0042 R                     mov     bx,table 
 05F3  E8 0000 E                        call    dskwrt 
 05F6  E8 01D8 R                        call    pcrlf 
 05F9  BA 0000 E                        mov     dx,offset dg: recmsg_pre 
 05FC  E8 01DB R                        call    print 
 05FF  BB 0000 E                        mov     bx,offset dg: recmsg_post 
 0602  8B 36 0022 R                     mov     si,filcnt 
 0606  33 FF                            xor     di,di                   ;output
				 number of files created 
 0608  E8 01E0 R                        call    convert 
 060B  E9 06FE R                        jmp     rexit 
 060E  BA 005C                  recfil: mov     dx,fcb 
 0611  B4 0F                            mov     ah,FCB_OPEN 
 0613  CD 21                            int     bdos 
 0615  FE C0                            inc     al 
 0617  75 09                            jnz     recfil0 
 0619  BA 0000 E                        mov     dx,offset dg: opnerr 
 061C  E8 01DB R                        call    print 
 061F  E9 06FE R                        jmp     rexit 
                                 
 0622  C7 06 0040 R 0001        recfil0:mov     lastfat,1               ;indica
				te location of list head 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-71
                                                            

 0628  BF 005C                          mov     di,fcb 
 062B  8B 45 10                         mov     ax,[di+16]              ;get fi
				le size 
 062E  A3 003C R                        mov     filsiz,ax 
 0631  A3 0038 R                        mov     siztmp,ax 
 0634  8B 45 12                         mov     ax,[di+18] 
 0637  A3 003E R                        mov     filsiz+2,ax 
 063A  A3 003A R                        mov     siztmp+2,ax 
 063D  8B 45 19                         mov     ax,[di+25]              ;get li
				st head 
 0640  0B C0                            or      ax,ax 
 0642  A3 002A R                        mov     fatptr,ax 
 0645  75 03                            jnz     recfil1 
 0647  E9 06F1 R                recvec: jmp     recfil6 
                                 
 064A  81 3E 002A R 0FFF        recfil1:cmp     fatptr,0fffh 
 0650  74 F5                            jz      recvec                  ;termin
				ate loop at e-o-f 
                                 
 0652  8B 0E 002C R                     mov     cx,secall 
 0656  A1 002A R                        mov     ax,fatptr 
 0659  48                               dec     ax 
 065A  48                               dec     ax 
 065B  F7 E1                            mul     cx 
 065D  03 06 0032 R                     add     ax,firrec 
 0661  8B D0                            mov     dx,ax 
 0663  8B 1E 0042 R                     mov     bx,table 
 0667  A0 0113 R                        mov     al,drive 
 066A  CD 25                            int     aread 
 066C  5F                               pop     di                      ;restor
				e stack pointer 
 066D  BF 005C                          mov     di,fcb                  ;restor
				e pointer to fcb 
 0670  73 59                            jnc     recfil4                 ;if no 
				error continue reading 
                                 
 0672  A1 002A R                        mov     ax,fatptr 
 0675  E8 024C R                        call    getfat 
 0678  83 3E 0040 R 01                  cmp     lastfat,1 
 067D  75 0E                            jnz     recfil2 
                                 
 067F  81 FB 0FFF                       cmp     bx,0fffh 
 0683  75 02                            jnz     noteof 
 0685  33 DB                            xor     bx,bx 
 0687  89 5D 19                 noteof: mov     word ptr [di+25],bx 
 068A  EB 09 90                         jmp     recfil3 
                                 
 068D  8B D3                    recfil2:mov     dx,bx                   ;jump a
				round bad sector 
 068F  A1 0040 R                        mov     ax,lastfat 
 0692  E8 0269 R                        call    setfat 
                                 
 0695  A1 002A R                recfil3:mov     ax,fatptr               ;mark s
				ector bad 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-72
                                                            

 0698  BA 0FF7                          mov     dx,0ff7h 
 069B  E8 0269 R                        call    setfat 
 069E  A1 0036 R                        mov     ax,secsiz               ;prepar
				e to dec filsiz by secsiz 
 06A1  83 3E 003A R 00                  cmp     siztmp+2,0 
 06A6  75 09                            jnz     recfilx 
 06A8  39 06 0038 R                     cmp     siztmp,ax 
 06AC  77 03                            ja      recfilx 
 06AE  A1 0038 R                        mov     ax,siztmp 
                                 
 06B1  29 45 10                 recfilx:sub     word ptr [di+16],ax 
 06B4  83 5D 12 00                      sbb     word ptr [di+18],0 
 06B8  29 06 0038 R                     sub     siztmp,ax 
 06BC  83 1E 0038 R 00                  sbb     siztmp,0 
                                 
 06C1  80 65 18 BF                      and     byte ptr [di+24],10111111b     
				 ;mark file dirty 
                                 
 06C5  A1 0040 R                        mov     ax,lastfat                     
				 ;point to next sector to check 
 06C8  EB 1D 90                         jmp     recfil5 
                                 
 06CB                           recfil4: 
 06CB  A1 0036 R                        mov     ax,secsiz               ;set by
				tes remaining to be read 
 06CE  29 06 0038 R                     sub     siztmp,ax 
 06D2  83 1E 003A R 00                  sbb     siztmp+2,0 
 06D7  73 08                            jnc     recok 
 06D9  33 C0                            xor     ax,ax                   ;if < 0
				, then set to zero 
 06DB  A3 0038 R                        mov     siztmp,ax 
 06DE  A3 003A R                        mov     siztmp+2,ax 
                                 
 06E1  A1 002A R                recok:  mov     ax,fatptr               ;get ne
				xt sector to test 
 06E4  A3 0040 R                        mov     lastfat,ax 
 06E7  E8 024C R                recfil5:call    getfat 
 06EA  89 1E 002A R                     mov     fatptr,bx 
 06EE  E9 064A R                        jmp     recfil1 
                                 
 06F1                           recfil6:                                ;all do
				ne 
 06F1  BA 005C                          mov     dx,fcb 
 06F4  B4 10                            mov     ah,FCB_CLOSE 
 06F6  CD 21                            int     bdos            ;close the file
				 
 06F8  E8 01D8 R                        call    pcrlf 
 06FB  E8 0000 E                        call    report 
                                 
                                ; 
 06FE  B4 0D                    rexit:  mov     ah,DISK_RESET 
 0700  CD 21                            int     bdos 
 0702  E8 02CD R                        call    wrtfat          ;save the fat 
 0705  E8 070A R                int_23: call    rest_dir 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-73
                                                            

 0708  CD 20                    rabort: int     boot            ;home, james...
				 
                                 
                                ;----- Restore INT 24 vector and old current di
				rectory -----------------; 
 070A                           rest_dir: 
 070A  80 3E 0111 R 00                  cmp     [fudge],0 
 070F  74 1A                            je      no_fudge 
                                 
 0711  B8 2524                          mov     ax,(set_interrupt_vector shl 8)
				 or 24h 
 0714  C5 16 010C R                     lds     dx,[hardch] 
 0718  CD 21                            int     21h 
 071A  0E                               push    cs 
 071B  1F                               pop     ds 
                                 
 071C  BA 0116 R                        mov     dx,offset dg: userdir          
				     ;restore directory 
 071F  B4 3B                            mov     ah,chdir 
 0721  CD 21                            int     21h 
 0723  8A 16 0112 R                     mov     dl,[user_drive]                
				 ;restore old current drive 
 0727  B4 0E                            mov     ah,set_default_drive 
 0729  CD 21                            int     21h 
                                 
 072B                           no_fudge: 
 072B  C3                               ret 
                                 
                                ;----- INT 24 Processing ----------------------
				-------------------------; 
                                 
 072C  0740 R                   int_24_retaddr dw       int_24_back 
                                 
 072E                           int_24  proc    far 
                                assume  ds:nothing,es:nothing,ss:nothing 
                                 
 072E  9C                               pushf 
 072F  0E                               push    cs 
 0730  2E: FF 36 072C R                 push    [int_24_retaddr] 
 0735  2E: FF 36 010E R                 push    word ptr [hardch+2] 
 073A  2E: FF 36 010C R                 push    word ptr [hardch] 
 073F  CB                               ret 
                                int_24  endp 
                                 
 0740                           int_24_back: 
 0740  3C 02                            cmp     al,2            ;abort? 
 0742  75 07                            jnz     ireti 
 0744  0E                               push    cs 
 0745  1F                               pop     ds 
                                 
                                assume  ds:dg 
                                 
 0746  E8 070A R                        call    rest_dir 
 0749  CD 20                            int     20h 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-74
                                                            

 074B                           ireti: 
 074B  CF                               iret 
                                 
                                        ENDIF 
                                 
 074C                           code  ends 
                                 
 0000                           const   segment public byte 
                                 
                                        EXTRN   BADVER:BYTE,askmsg:BYTE,drvlet:
				BYTE,dirmsg:BYTE 
                                        EXTRN   recmsg_pre:BYTE,DRVLET1:BYTE,re
				cmsg_post:BYTE 
                                        EXTRN   crlf:BYTE,drverr:BYTE,baddrv:BY
				TE,opnerr:BYTE 
                                 
 0000                           const   ends 
                                 
 0000                           data    segment byte 
                                 
                                        PUBLIC  filsiz 
                                 
 0000  46 49 4C 45 30 30 30     dirent  db      'FILE0000REC' 
       30 52 45 43              
 000B  0015[                            db      21 dup (00) 
            00                  
                         ]      
                                
                                 
 0020  0000                     fndfat  dw      0000                    ;sector
				 of first good fat 
 0022  0000                     filcnt  dw      0000 
 0024  00                       fatcnt  db      00 
 0025  00                       fatnum  db      00 
 0026  0000                     fatsiz  dw      0000 
 0028  0000                     firfat  dw      0000 
 002A  0000                     fatptr  dw      0000 
 002C  0000                     secall  dw      0000                    ;sector
				s per cluster 
 002E  0000                     target  dw      0000 
 0030  0000                     maxent  dw      0000 
 0032  0000                     firrec  dw      0000 
 0034  0000                     firdir  dw      0000 
 0036  0000                     secsiz  dw      0000 
 0038  0000                     siztmp  dw      0000 
 003A  0000                             dw      0000 
 003C  0000                     filsiz  dw      0000 
 003E  0000                             dw      0000 
 0040  0000                     lastfat dw      0000 
                                ; 
 0042  1844 R                   table   dw      offset dg:fattbl + 6 * 1024 
 0044  00                       fattbl  db      0 
                                 
 0045                           data    ends 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Page     1-75
                                                            

                                 
                                        end     recover 

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-4
                                                             

SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DG . . . . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	074C	PARA	PUBLIC	
  CONST  . . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  DATA . . . . . . . . . . . . .  	0045	BYTE	PUBLIC	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-5
                                                             

ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Number	0000	
AREAD  . . . . . . . . . . . . .  	Number	0025	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASKMSG . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AWRITE . . . . . . . . . . . . .  	Number	0026	

BADDRV . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BADDRVSPEC . . . . . . . . . . .  	L NEAR	0412	CODE
BADDRVSPECJ  . . . . . . . . . .  	L NEAR	031B	CODE
BADVER . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
BDOS . . . . . . . . . . . . . .  	Number	0021	
BLANKZER . . . . . . . . . . . .  	L NEAR	022E	CODE
BOOT . . . . . . . . . . . . . .  	Number	0020	
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CONVERT  . . . . . . . . . . . .  	L NEAR	01E0	CODE	Global
CONVLP . . . . . . . . . . . . .  	L NEAR	01EA	CODE
CONVWRD  . . . . . . . . . . . .  	L NEAR	0241	CODE
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CR . . . . . . . . . . . . . . .  	Number	000D	
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-6
                                                             

CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CRLF . . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
CURR_IS_ROOT . . . . . . . . . .  	L NEAR	043A	CODE
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DIGIT  . . . . . . . . . . . . .  	L NEAR	0227	CODE
DIRCHAR  . . . . . . . . . . . .  	L BYTE 	0114	CODE
DIRENT . . . . . . . . . . . . .  	L BYTE 	0000	DATA
DIRERR . . . . . . . . . . . . .  	L NEAR	05D8	CODE
DIRMSG . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SAVE_LOOP  . . . . . . . . .  	L NEAR	0434	CODE
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DOSVER . . . . . . . . . . . . .  	Number	00D3	
DOSVER_HIGH  . . . . . . . . . .  	Number	0200	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-7
                                                             

DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRIVE  . . . . . . . . . . . . .  	L BYTE 	0113	CODE
DRVERR . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DRVISOK  . . . . . . . . . . . .  	L NEAR	0426	CODE
DRVLET . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DRVLET1  . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
DRVOK  . . . . . . . . . . . . .  	L NEAR	0496	CODE
DRVOK1 . . . . . . . . . . . . .  	L NEAR	0337	CODE
DRVOK2 . . . . . . . . . . . . .  	L NEAR	0391	CODE
DSKERR . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSKRD  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSKWRT . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

EGOMES . . . . . . . . . . . . .  	L NEAR	0357	CODE
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-8
                                                             

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATCNT . . . . . . . . . . . . .  	L BYTE 	0024	DATA
FATNUM . . . . . . . . . . . . .  	L BYTE 	0025	DATA
FATPRI . . . . . . . . . . . . .  	Number	001E	
FATPTR . . . . . . . . . . . . .  	L WORD 	002A	DATA
FATSIZ . . . . . . . . . . . . .  	L WORD 	0026	DATA
FATTBL . . . . . . . . . . . . .  	L BYTE 	0044	DATA
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FDFAT  . . . . . . . . . . . . .  	L NEAR	02B3	CODE
FILCNT . . . . . . . . . . . . .  	L WORD 	0022	DATA
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FILSIZ . . . . . . . . . . . . .  	L WORD 	003C	DATA	Global
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FIRDIR . . . . . . . . . . . . .  	L WORD 	0034	DATA
FIRFAT . . . . . . . . . . . . .  	L WORD 	0028	DATA
FIRREC . . . . . . . . . . . . .  	L WORD 	0032	DATA
FNAME_BUFFER . . . . . . . . . .  	L BYTE 	0158	CODE	Length = 0080
FNDFAT . . . . . . . . . . . . .  	L WORD 	0020	DATA
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FUDGE  . . . . . . . . . . . . .  	L BYTE 	0111	CODE

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETFAT . . . . . . . . . . . . .  	L NEAR	024C	CODE
GETFAT1  . . . . . . . . . . . .  	L NEAR	0260	CODE
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-9
                                                             

GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GOTBADDOS  . . . . . . . . . . .  	L NEAR	02F6	CODE
GOTPARM  . . . . . . . . . . . .  	L NEAR	031E	CODE

HARDCH . . . . . . . . . . . . .  	L DWORD	010C	CODE
HEADER . . . . . . . . . . . . .  	L BYTE 	0103	CODE

IBMVER . . . . . . . . . . . . .  	Alias	 TRUE		
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_23 . . . . . . . . . . . . .  	L NEAR	0705	CODE	Global
INT_24 . . . . . . . . . . . . .  	F PROC	072E	CODE	Length = 0012
INT_24_BACK  . . . . . . . . . .  	L NEAR	0740	CODE
INT_24_RETADDR . . . . . . . . .  	L WORD 	072C	CODE
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IRETI  . . . . . . . . . . . . .  	L NEAR	074B	CODE

KANJI  . . . . . . . . . . . . .  	Alias	 FALSE		
KEEP_PROCESS . . . . . . . . . .  	Number	0031	
KILL_BL  . . . . . . . . . . . .  	L NEAR	03BA	CODE

LASTFAT  . . . . . . . . . . . .  	L WORD 	0040	DATA
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LF . . . . . . . . . . . . . . .  	Number	000A	
LOAD . . . . . . . . . . . . . .  	L NEAR	028D	CODE
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LOOK . . . . . . . . . . . . . .  	L NEAR	030B	CODE
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXENT . . . . . . . . . . . . .  	L WORD 	0030	DATA
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-10
                                                             

MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		

NAM0 . . . . . . . . . . . . . .  	L NEAR	0563	CODE
NAM1 . . . . . . . . . . . . . .  	L NEAR	0570	CODE
NAME_COPIED  . . . . . . . . . .  	L NEAR	03D9	CODE
NEXT_CHAR  . . . . . . . . . . .  	L NEAR	03CA	CODE
NONAME . . . . . . . . . . . . .  	L NEAR	048D	CODE
NOPARM . . . . . . . . . . . . .  	L NEAR	0318	CODE
NOTEOF . . . . . . . . . . . . .  	L NEAR	0687	CODE
NOT_ROOT . . . . . . . . . . . .  	L NEAR	03F5	CODE
NO_ERRORS  . . . . . . . . . . .  	L NEAR	0455	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NO_FUDGE . . . . . . . . . . . .  	L NEAR	072B	CODE

OEM  . . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OKDOS  . . . . . . . . . . . . .  	L NEAR	02FE	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
OPNERR . . . . . . . . . . . . .  	V BYTE 	0000	CONST	External
OUTBYTE  . . . . . . . . . . . .  	L NEAR	0218	CODE
OUTWORD  . . . . . . . . . . . .  	L NEAR	0211	CODE

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PCRLF  . . . . . . . . . . . . .  	L NEAR	01D8	CODE	Global
PRET . . . . . . . . . . . . . .  	L NEAR	01DF	CODE
PRINT  . . . . . . . . . . . . .  	L NEAR	01DB	CODE	Global
PRINTERR . . . . . . . . . . . .  	L NEAR	02E4	CODE

RABORT . . . . . . . . . . . . .  	L NEAR	0708	CODE
RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READFT . . . . . . . . . . . . .  	L NEAR	02A2	CODE
READIT . . . . . . . . . . . . .  	L NEAR	02A5	CODE
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RECDSK . . . . . . . . . . . . .  	L NEAR	0508	CODE
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-11
                                                             

RECFIL . . . . . . . . . . . . .  	L NEAR	060E	CODE
RECFIL0  . . . . . . . . . . . .  	L NEAR	0622	CODE
RECFIL1  . . . . . . . . . . . .  	L NEAR	064A	CODE
RECFIL2  . . . . . . . . . . . .  	L NEAR	068D	CODE
RECFIL3  . . . . . . . . . . . .  	L NEAR	0695	CODE
RECFIL4  . . . . . . . . . . . .  	L NEAR	06CB	CODE
RECFIL5  . . . . . . . . . . . .  	L NEAR	06E7	CODE
RECFIL6  . . . . . . . . . . . .  	L NEAR	06F1	CODE
RECFILX  . . . . . . . . . . . .  	L NEAR	06B1	CODE
RECMSG_POST  . . . . . . . . . .  	V BYTE 	0000	CONST	External
RECMSG_PRE . . . . . . . . . . .  	V BYTE 	0000	CONST	External
RECOK  . . . . . . . . . . . . .  	L NEAR	06E1	CODE
RECOVER  . . . . . . . . . . . .  	L NEAR	0100	CODE
RECVEC . . . . . . . . . . . . .  	L NEAR	0647	CODE
REC_START  . . . . . . . . . . .  	L NEAR	02EA	CODE
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
REPORT . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
REST_DIR . . . . . . . . . . . .  	L NEAR	070A	CODE
RET2 . . . . . . . . . . . . . .  	L NEAR	0210	CODE
RET66  . . . . . . . . . . . . .  	L NEAR	02A1	CODE
REXIT  . . . . . . . . . . . . .  	L NEAR	06FE	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAME_DIR . . . . . . . . . . . .  	L NEAR	047E	CODE
SAME_DRIVE . . . . . . . . . . .  	L NEAR	0418	CODE
SECALL . . . . . . . . . . . . .  	L WORD 	002C	DATA
SECSIZ . . . . . . . . . . . . .  	L WORD 	0036	DATA
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETFAT . . . . . . . . . . . . .  	L NEAR	0269	CODE
SETFAT1  . . . . . . . . . . . .  	L NEAR	0281	CODE
SETFAT2  . . . . . . . . . . . .  	L NEAR	0288	CODE
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-12
                                                             

SIZTMP . . . . . . . . . . . . .  	L WORD 	0038	DATA
SJ1  . . . . . . . . . . . . . .  	L NEAR	0449	CODE
SJA  . . . . . . . . . . . . . .  	L NEAR	03E9	CODE
SJB  . . . . . . . . . . . . . .  	L NEAR	03F0	CODE
SLASHOK  . . . . . . . . . . . .  	L NEAR	03B2	CODE
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STEP1  . . . . . . . . . . . . .  	L NEAR	0515	CODE
STEP1A . . . . . . . . . . . . .  	L NEAR	0521	CODE
STEP2  . . . . . . . . . . . . .  	L NEAR	0534	CODE
STEP3  . . . . . . . . . . . . .  	L NEAR	0540	CODE
STEP4  . . . . . . . . . . . . .  	L NEAR	054E	CODE
STEP6  . . . . . . . . . . . . .  	L NEAR	05C8	CODE
STEP7  . . . . . . . . . . . . .  	L NEAR	05E2	CODE

TABLE  . . . . . . . . . . . . .  	L WORD 	0042	DATA
TARGET . . . . . . . . . . . . .  	L WORD 	002E	DATA
THE_ROOT . . . . . . . . . . . .  	L BYTE 	0110	CODE
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERDIR  . . . . . . . . . . . .  	L BYTE 	0116	CODE
USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_DRIVE . . . . . . . . . . .  	L BYTE 	0112	CODE

VER  . . . . . . . . . . . . . .  	Text  		

WAIT . . . . . . . . . . . . . .  	Number	004D	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRTFAT . . . . . . . . . . . . .  	L NEAR	02CD	CODE
WRTIT  . . . . . . . . . . . . .  	L NEAR	02D0	CODE
WRTOK  . . . . . . . . . . . . .  	L NEAR	02DB	CODE

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 16:04:28
RECOVER MS-DOS File/Disk Recovery Utility                   Symbols-13
                                                             


   2145 Source  Lines
   2207 Total   Lines
    627 Symbols

  19706 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
