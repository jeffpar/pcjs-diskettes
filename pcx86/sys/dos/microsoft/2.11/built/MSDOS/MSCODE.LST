Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-1
                                                            

                                ; 
                                ; MSCODE.ASM -- MSDOS code 
                                ; 
                                 
                             C  INCLUDE DOSSEG.ASM 
                             C  ; 
                             C  ; segment ordering for MSDOS 
                             C  ; 
                             C   
 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CONST' 
 0000                        C  CONSTANTS       ENDS 
                             C   
 0000                        C  DATA            SEGMENT BYTE PUBLIC 'DATA' 
 0000                        C  DATA            ENDS 
                             C   
 0000                        C  CODE            SEGMENT BYTE PUBLIC 'CODE' 
 0000                        C  CODE            ENDS 
                             C   
 0000                        C  LAST            SEGMENT BYTE PUBLIC 'LAST' 
 0000                        C  LAST            ENDS 
                             C   
                             C  DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST 
                                 
                             C  INCLUDE STDSW.ASM 
 = FFFF                      C  TRUE    EQU     0FFFFH 
 = 0000                      C  FALSE   EQU     NOT TRUE 
                             C   
                             C  ; Use the switches below to produce the standar
				d Microsoft version or the IBM 
                             C  ; version of the operating system 
                             C  ELSE 
 =                           C  MSVER   EQU     TRUE 
 =                           C  IBM     EQU     FALSE 
                             C  ENDIF 
 =                           C  WANG    EQU     FALSE 
 =                           C  ALTVECT EQU     FALSE 
                             C   
                             C  ; Set this switch to cause DOS to move itself t
				o the end of memory 
 =                           C  HIGHMEM EQU     FALSE 
                             C   
                             C          ELSE 
                             C          ELSE 
 = 001B                      C  ESCCH   EQU     1BH 
                             C          ENDIF 
 = 0018                      C  CANCEL  EQU     "X"-"@"                 ;Cancel
				 with Ctrl-X 
 =                           C  TOGLINS EQU     WANG                    ;Separa
				te keys for insert mode on 
                             C                                          ;and of
				f if not WANG 
 =                           C  TOGLPRN EQU     FALSE                   ;Separa
				te keys for printer echo on 
                             C                                          ;and of
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-2
                                                            

				f 
 =                           C  ZEROEXT EQU     TRUE 
                             C          ENDIF 
                                 
                                 
 0000                           CODE    SEGMENT BYTE PUBLIC  'CODE' 
                                ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NO
				THING 
                                 
                                .xcref 
                             C  INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-3
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-10
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-11
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-12
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-13
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-14
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-15
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-16
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-17
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-18
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-19
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  ELSE 
                             C    ELSE 
                             C      ENDIF 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (DOSVER / 100) 
 = 000B                      C  DOS_MINOR_VERSION   EQU     (DOSVER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-20
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-21
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-22
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-23
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-24
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-25
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-26
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-27
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-28
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-29
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-30
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-31
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-32
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-33
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-34
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-35
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-36
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-37
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-38
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-39
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-40
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-41
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-42
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-43
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-44
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-45
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-46
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-47
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-48
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-49
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-50
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-51
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-52
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-53
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-54
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-55
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-56
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-57
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-58
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                                 
                             C  INCLUDE DEVSYM.ASM 
                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-59
DEVICE TABLE AND SRH DEFINITION                             

                             C  PAGE 
                             C  ; The device table list has the form: 
                             C  SYSDEV  STRUC 
 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointer to nex
				t device header 
 0004  ????                  C  SDEVATT         DW      ?       ;Attributes of 
				the device 
 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strategy entry
				 point 
 0008  ????                  C  SDEVINT         DW      ?       ;Interrupt entr
				y point 
 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name of devi
				ce (only first byte used for block) 
            ??               C  
                         ]   C  
                             C  
 0012                        C  SYSDEV  ENDS 
                             C   
                             C  ;Attribute bit masks 
 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15 - 1  if
				 Char, 0 if block 
 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14 - CONTR
				OL mode bit 
 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13 - Devic
				e uses FAT ID bytes, comp media. 
 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 - This d
				evice is the console input. 
 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 - This d
				evice is the console output. 
 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 - This d
				evice is the null device. 
 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 - This d
				evice is the clock device. 
 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 - This d
				evice is special 
                             C   
                             C  ;Static Reguest Header 
                             C  SRHEAD  STRUC 
 0000  ??                    C  REQLEN  DB      ?               ;Length in byte
				s of request block 
 0001  ??                    C  REQUNIT DB      ?               ;Device unit nu
				mber 
 0002  ??                    C  REQFUNC DB      ?               ;Type of reques
				t 
 0003  ????                  C  REQSTAT DW      ?               ;Status Word 
 0005  0008[                 C          DB      8 DUP(?)        ;Reserved for q
				ueue links 
            ??               C  
                         ]   C  
                             C  
 000D                        C  SRHEAD  ENDS 
                             C   
                             C  ;Status word masks 
 = 8000                      C  STERR   EQU     8000H           ;Bit 15 - Error
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-60
DEVICE TABLE AND SRH DEFINITION                             

				 
 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 - Buisy 
 = 0100                      C  STDON   EQU     0100H           ;Bit 8 - Done 
 = 00FF                      C  STECODE EQU     00FFH           ;Error code 
 = 0000                      C  WRECODE EQU     0 
                             C   
                             C  ;Function codes 
 = 0000                      C  DEVINIT EQU     0               ;Initialization
				 
 = 001A                      C  DINITHL EQU     26              ;Size of init h
				eader 
 = 0001                      C  DEVMDCH EQU     1               ;Media check 
 = 000F                      C  DMEDHL  EQU     15              ;Size of media 
				check header 
 = 0002                      C  DEVBPB  EQU     2               ;Get BPB 
 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL read 
 = 0016                      C  DBPBHL  EQU     22              ;Size of Get BP
				B header 
 = 0004                      C  DEVRD   EQU     4               ;Read 
 = 0016                      C  DRDWRHL EQU     22              ;Size of RD/WR 
				header 
 = 0005                      C  DEVRDND EQU     5               ;Non destructiv
				e read no wait (character devs) 
 = 000E                      C  DRDNDHL EQU     14              ;Size of non de
				structive read header 
 = 0006                      C  DEVIST  EQU     6               ;Input status 
 = 000D                      C  DSTATHL EQU     13              ;Size of status
				 header 
 = 0007                      C  DEVIFL  EQU     7               ;Input flush 
 = 000F                      C  DFLSHL  EQU     15              ;Size of flush 
				header 
 = 0008                      C  DEVWRT  EQU     8               ;Write 
 = 0009                      C  DEVWRTV EQU     9               ;Write with ver
				ify 
 = 000A                      C  DEVOST  EQU     10              ;Output status 
 = 000B                      C  DEVOFL  EQU     11              ;Output flush 
 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL write 
                                 
                                .cref 
                                .list 
                                 
                                ENDIF 
                                 
                                ENDIF 
                                 
                                ENDIF 
                                 
                                 
                                        i_need  USER_SP,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  USER_SS,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-61
DEVICE TABLE AND SRH DEFINITION                             

                                        i_need  SAVEDS,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  SAVEBX,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  INDOS,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  NSP,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  NSS,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  CURRENTPDB,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  AUXSTACK,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  CONSWAP,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  IDLEINT,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  NOSETDIR,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  ERRORMODE,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  IOSTACK,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  WPERR,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  DSKSTACK,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  CNTCFLAG,BYTE 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  LEAVEADDR,WORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        i_need  NULLDEVPT,DWORD 
 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                 
                                        IF NOT IBM 
                                        i_need  OEM_HANDLER,DWORD 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-62
DEVICE TABLE AND SRH DEFINITION                             

 0000                         1  DATA SEGMENT BYTE PUBLIC 'DATA'
 0000                         1  DATA ENDS
                                        ENDIF 
                                 
                                        EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKR
				EAD:NEAR,DSKWRITE:NEAR 
                                 
                                 
                                BREAK   <Copyright notice and version> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-63
Copyright notice and version                                

                                 
 = 0000                         CODSTRT EQU     $ 
                                 
                                        IF      NOT IBM 
                                        IF      NOT KANJI 
                                        PUBLIC  HEADER 
 0000  0D 0A 4D 69 63 72 6F     HEADER  DB      13,10,"Microsoft MS-DOS version
				 " 
       73 6F 66 74 20 4D 53     
       2D 44 4F 53 20 76 65     
       72 73 69 6F 6E 20        
 001B  32                               DB      DOS_MAJOR_VERSION + "0" 
 001C  2E                               DB      "." 
 001D  31                               DB      (DOS_MINOR_VERSION / 10) + "0" 
 001E  31                               DB      (DOS_MINOR_VERSION MOD 10) + "0
				" 
                                        ENDIF 
                                        ENDIF 
                                        ENDIF 
 001F  0D 0A                            DB      13,10 
 0021  43 6F 70 79 72 69 67             DB      "Copyright 1981,82,83 Microsoft
				 Corp.",13,10,"$" 
       68 74 20 31 39 38 31     
       2C 38 32 2C 38 33 20     
       4D 69 63 72 6F 73 6F     
       66 74 20 43 6F 72 70     
       2E 0D 0A 24              
                                        ENDIF 
                                BREAK   <System call entry points and dispatche
				r> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-64
System call entry points and dispatcher                     

                                ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NO
				THING 
                                 
                                        procedure   SYSTEM_CALL,NEAR 
 0048                         1 SYSTEM_CALL PROC NEAR
                                entry   QUIT                                   
				; INT 20H entry point 
 0048                         1 QUIT:
 0048  B4 00                            MOV     AH,0 
 004A  EB 28                            JMP     SHORT SAVREGS 
                                 
                                entry   COMMAND                         ; Inter
				rupt call entry point (INT 21H) 
 004C                         1 COMMAND:
                                 
                                        IF      NOT IBM 
 004C  80 FC F8                         CMP     AH,SET_OEM_HANDLER 
 004F  72 03                            JB      NOTOEM 
 0051  E9 021E R                        JMP     $SET_OEM_HANDLER 
 0054                           NOTOEM: 
                                        ENDIF 
                                 
 0054  80 FC 58 90                      CMP     AH,MAXCOM 
 0058  76 1A                            JBE     SAVREGS 
 005A                           BADCALL: 
 005A  B0 00                            MOV     AL,0 
                                entry   IRET 
 005C                         1 IRET:
 005C  CF                               IRET 
                                 
                                entry   CALL_ENTRY                      ; Syste
				m call entry point and dispatcher 
 005D                         1 CALL_ENTRY:
 005D  58                               POP     AX                      ; IP fr
				om the long call at 5 
 005E  58                               POP     AX                      ; Segme
				nt from the long call at 5 
 005F  2E: 8F 06 0000 E                 POP     [User_SP]               ; IP fr
				om the CALL 5 
 0064  9C                               PUSHF                           ; Start
				 re-ordering the stack 
 0065  FA                               CLI 
 0066  50                               PUSH    AX                      ; Save 
				segment 
 0067  2E: FF 36 0000 E                 PUSH    [User_SP]               ; Stack
				 now ordered as if INT had been used 
 006C  80 F9 24 90                      CMP     CL,MAXCALL              ; This 
				entry point doesn't get as many calls 
 0070  77 E8                            JA      BADCALL 
 0072  8A E1                            MOV     AH,CL 
 0074                           SAVREGS: 
 0074  E8 0153 R                        CALL    save_world 
 0077  2E: 8C 1E 0000 E                 MOV     [SaveDS],DS 
 007C  2E: 89 1E 0000 E                 MOV     [SaveBX],BX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-65
System call entry points and dispatcher                     

 0081  8C CB                            MOV     BX,CS 
 0083  8E DB                            MOV     DS,BX 
                                ASSUME  DS:DOSGROUP 
 0085  FE 06 0000 E                     INC     [INDOS]                 ; Flag 
				that we're in the DOS 
 0089  A1 0000 E                        MOV     AX,[user_SP] 
 008C  A3 0000 E                        MOV     [NSP],AX 
 008F  A1 0000 E                        MOV     AX,[user_SS] 
 0092  A3 0000 E                        MOV     [NSS],AX 
 0095  58                               POP     AX 
 0096  50                               PUSH    AX 
 0097  89 26 0000 E                     MOV     [user_SP],SP 
 009B  8C 16 0000 E                     MOV     [user_SS],SS 
                                ; 
                                ; save user stack in his area for later returns
				 (possibly from EXEC) 
                                ; Here comes multitasking!!! 
                                ; 
 009F  8E 1E 0000 E                     MOV     DS,[CurrentPDB] 
 00A3  89 26 002E                       MOV     WORD PTR DS:[PDB_User_stack],SP
				 
 00A7  8C 16 0030                       MOV     WORD PTR DS:[PDB_User_stack+2],
				SS 
                                 
 00AB  8C CB                            MOV     BX,CS                   ; no ho
				les here. 
 00AD  8E D3                            MOV     SS,BX 
                                ASSUME  SS:DOSGROUP 
                                 
                                    entry   REDISP 
 00AF                         1 REDISP:
 00AF  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:AUXSTACK    
				 ; Enough stack for interrupts 
 00B2  FB                               STI                             ; Stack
				 OK now 
 00B3  0E                               PUSH    CS 
 00B4  1F                               POP     DS 
 00B5  32 FF                            XOR     BH,BH 
 00B7  88 3E 0000 E                     MOV     [CONSWAP],BH 
 00BB  C6 06 0000 E 01                  MOV     [IDLEINT],1 
 00C0  C6 06 0000 E 00                  MOV     BYTE PTR [NoSetDir],0   ; set d
				irectories on search 
 00C5  8A DC                            MOV     BL,AH 
 00C7  D1 E3                            SHL     BX,1 
 00C9  FC                               CLD 
 00CA  0A E4                            OR      AH,AH 
 00CC  74 1B                            JZ      DSKROUT                 ; ABORT
				 
 00CE  80 FC 0C                         CMP     AH,12 
 00D1  76 0A                            JBE     IOROUT                  ; Chara
				cter I/O 
 00D3  80 FC 51                         CMP     AH,GET_CURRENT_PDB      ; INT 2
				4 needs GET,SET PDB 
 00D6  74 05                            JZ      IOROUT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-66
System call entry points and dispatcher                     

 00D8  80 FC 50                         CMP     AH,SET_CURRENT_PDB 
 00DB  75 0C                            JNZ     DSKROUT 
 00DD                           IOROUT: 
 00DD  80 3E 0000 E 00                  CMP     [ERRORMODE],0 
 00E2  75 1E                            JNZ     DISPCALL                ; Stay 
				on AUXSTACK if INT 24 
 00E4  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:IOSTACK 
 00E7  EB 19                            JMP     SHORT DISPCALL 
                                 
 00E9                           DSKROUT: 
 00E9  C6 06 0000 E 00                  MOV     [ERRORMODE],0           ; Canno
				t make non 1-12 calls in 
 00EE  C6 06 0000 E FF                  MOV     [WPERR],-1              ; error
				 mode, so good place to 
                                                                        ; make 
				sure flags are reset 
 00F3  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:DSKSTACK 
 00F6  F6 06 0000 E FF                  TEST    [CNTCFLAG],-1 
 00FB  74 05                            JZ      DISPCALL 
 00FD  50                               PUSH    AX 
                                        invoke  DSKSTATCHK 
 00FE  E8 0000 E              1  CALL DSKSTATCHK
 0101  58                               POP     AX 
 0102                           DISPCALL: 
 0102  FF 36 0000 E                     PUSH    [LEAVEADDR] 
 0106  2E: FF B7 0169 R                 PUSH    CS:[BX+DISPATCH] 
 010B  8B 1E 0000 E                     MOV     BX,[SaveBX] 
 010F  8E 1E 0000 E                     MOV     DS,[SaveDS] 
                                ASSUME  DS:NOTHING 
                                        return 
 0113                         1 ??0000:
 0113  C3                     1  RET
                                 
                                        entry LEAVE 
 0114                         1 LEAVE:
                                ASSUME  SS:NOTHING                      ; User 
				routines may misbehave 
 0114  FA                               CLI 
 0115  2E: FE 0E 0000 E                 DEC     [INDOS] 
 011A  2E: 8B 26 0000 E                 MOV     SP,[user_SP] 
 011F  2E: 8E 16 0000 E                 MOV     SS,[user_SS] 
 0124  8B EC                            MOV     BP,SP 
 0126  88 46 00                         MOV     BYTE PTR [BP.user_AX],AL 
 0129  2E: A1 0000 E                    MOV     AX,[NSP] 
 012D  2E: A3 0000 E                    MOV     [user_SP],AX 
 0131  2E: A1 0000 E                    MOV     AX,[NSS] 
 0135  2E: A3 0000 E                    MOV     [user_SS],AX 
 0139  E8 013F R                        CALL    restore_world 
                                 
 013C  CF                               IRET 
                                SYSTEM_CALL ENDP 
                                 
                                ; 
                                ; restore_world restores all registers ('cept S
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-67
System call entry points and dispatcher                     

				S:SP, CS:IP, flags) from 
                                ; the stack prior to giving the user control 
                                ; 
                                        ASSUME  DS:NOTHING,ES:NOTHING 
 013D  ????                     restore_tmp DW  ? 
                                        procedure   restore_world,NEAR 
 013F                         1 restore_world PROC NEAR
 013F  2E: 8F 06 013D R                 POP     restore_tmp     ; POP     resto
				re_tmp 
 0144  58                               POP     AX              ; PUSH    ES 
 0145  5B                               POP     BX              ; PUSH    DS 
 0146  59                               POP     CX              ; PUSH    BP 
 0147  5A                               POP     DX              ; PUSH    DI 
 0148  5E                               POP     SI              ; PUSH    SI 
 0149  5F                               POP     DI              ; PUSH    DX 
 014A  5D                               POP     BP              ; PUSH    CX 
 014B  1F                               POP     DS              ; PUSH    BX 
 014C  07                               POP     ES              ; PUSH    AX 
 014D                           world_ret: 
 014D  2E: FF 36 013D R                 PUSH    restore_tmp     ; PUSH    resto
				re_tmp 
                                        return 
 0152                         1 ??0001:
 0152  C3                     1  RET
                                restore_world   ENDP 
                                 
                                ; 
                                ; save_world saves complete registers on the st
				ack 
                                ; 
                                        procedure   save_world,NEAR 
 0153                         1 save_world PROC NEAR
 0153  2E: 8F 06 013D R                 POP     restore_tmp 
 0158  06                               PUSH    ES 
 0159  1E                               PUSH    DS 
 015A  55                               PUSH    BP 
 015B  57                               PUSH    DI 
 015C  56                               PUSH    SI 
 015D  52                               PUSH    DX 
 015E  51                               PUSH    CX 
 015F  53                               PUSH    BX 
 0160  50                               PUSH    AX 
 0161  EB EA                            JMP     SHORT world_ret 
                                save_world      ENDP 
                                 
                                ; 
                                ; get_user_stack returns the user's stack (and 
				hence registers) in DS:SI 
                                ; 
                                        procedure   get_user_stack,NEAR 
 0163                         1 get_user_stack PROC NEAR
 0163  2E: C5 36 0000 E                 LDS     SI,DWORD PTR [user_SP] 
                                        return 
 0168                         1 ??0002:
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-68
System call entry points and dispatcher                     

 0168  C3                     1  RET
                                get_user_stack  ENDP 
                                 
                                ; Standard Functions 
 0169                           DISPATCH    LABEL WORD 
                                .lall 
                                        short_addr  $ABORT                     
				     ;  0      0 
                              1  IFDIF <$ABORT>,<?>
                              1 .xcref
                              1  IF2
                              1  IFNDEF $ABORT
                              1  EXTRN $ABORT:NEAR
                              1  ENDIF
                              1  ENDIF
                              1 .cref
 0169  0000 E                 1  DW OFFSET DOSGROUP:$ABORT
                              1  ENDIF
                                .xall 
                                        short_addr  $STD_CON_INPUT             
				     ;  1      1 
 016B  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT
                                        short_addr  $STD_CON_OUTPUT            
				     ;  2      2 
 016D  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_OUTPUT
                                        short_addr  $STD_AUX_INPUT             
				     ;  3      3 
 016F  0000 E                 1  DW OFFSET DOSGROUP:$STD_AUX_INPUT
                                        short_addr  $STD_AUX_OUTPUT            
				     ;  4      4 
 0171  0000 E                 1  DW OFFSET DOSGROUP:$STD_AUX_OUTPUT
                                        short_addr  $STD_PRINTER_OUTPUT        
				     ;  5      5 
 0173  0000 E                 1  DW OFFSET DOSGROUP:$STD_PRINTER_OUTPUT
                                        short_addr  $RAW_CON_IO                
				     ;  6      6 
 0175  0000 E                 1  DW OFFSET DOSGROUP:$RAW_CON_IO
                                        short_addr  $RAW_CON_INPUT             
				     ;  7      7 
 0177  0000 E                 1  DW OFFSET DOSGROUP:$RAW_CON_INPUT
                                        short_addr  $STD_CON_INPUT_NO_ECHO     
				     ;  8      8 
 0179  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT_NO_ECHO
                                        short_addr  $STD_CON_STRING_OUTPUT     
				     ;  9      9 
 017B  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_STRING_OUTPUT
                                        short_addr  $STD_CON_STRING_INPUT      
				     ; 10      A 
 017D  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_STRING_INPUT
                                        short_addr  $STD_CON_INPUT_STATUS      
				     ; 11      B 
 017F  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT_STATUS
                                        short_addr  $STD_CON_INPUT_FLUSH       
				     ; 12      C 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-69
System call entry points and dispatcher                     

 0181  0000 E                 1  DW OFFSET DOSGROUP:$STD_CON_INPUT_FLUSH
                                        short_addr  $DISK_RESET                
				     ; 13      D 
 0183  0000 E                 1  DW OFFSET DOSGROUP:$DISK_RESET
                                        short_addr  $SET_DEFAULT_DRIVE         
				     ; 14      E 
 0185  0000 E                 1  DW OFFSET DOSGROUP:$SET_DEFAULT_DRIVE
                                        short_addr  $FCB_OPEN                  
				     ; 15      F 
 0187  0000 E                 1  DW OFFSET DOSGROUP:$FCB_OPEN
                                        short_addr  $FCB_CLOSE                 
				     ; 16     10 
 0189  0000 E                 1  DW OFFSET DOSGROUP:$FCB_CLOSE
                                        short_addr  $DIR_SEARCH_FIRST          
				     ; 17     11 
 018B  0000 E                 1  DW OFFSET DOSGROUP:$DIR_SEARCH_FIRST
                                        short_addr  $DIR_SEARCH_NEXT           
				     ; 18     12 
 018D  0000 E                 1  DW OFFSET DOSGROUP:$DIR_SEARCH_NEXT
                                        short_addr  $FCB_DELETE                
				     ; 19     13 
 018F  0000 E                 1  DW OFFSET DOSGROUP:$FCB_DELETE
                                        short_addr  $FCB_SEQ_READ              
				     ; 20     14 
 0191  0000 E                 1  DW OFFSET DOSGROUP:$FCB_SEQ_READ
                                        short_addr  $FCB_SEQ_WRITE             
				     ; 21     15 
 0193  0000 E                 1  DW OFFSET DOSGROUP:$FCB_SEQ_WRITE
                                        short_addr  $FCB_CREATE                
				     ; 22     16 
 0195  0000 E                 1  DW OFFSET DOSGROUP:$FCB_CREATE
                                        short_addr  $FCB_RENAME                
				     ; 23     17 
 0197  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RENAME
                                        short_addr  CPMFUNC                    
				     ; 24     18 
 0199  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
                                        short_addr  $GET_DEFAULT_DRIVE         
				     ; 25     19 
 019B  0000 E                 1  DW OFFSET DOSGROUP:$GET_DEFAULT_DRIVE
                                        short_addr  $SET_DMA                   
				     ; 26     1A 
 019D  0000 E                 1  DW OFFSET DOSGROUP:$SET_DMA
                                 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;                                              
				                            ; 
                                        short_addr  $SLEAZEFUNC                
				     ; 27     1B 
 019F  0000 E                 1  DW OFFSET DOSGROUP:$SLEAZEFUNC
                                        short_addr  $SLEAZEFUNCDL              
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-70
System call entry points and dispatcher                     

				     ; 28     1C 
 01A1  0000 E                 1  DW OFFSET DOSGROUP:$SLEAZEFUNCDL
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                 
                                        short_addr  CPMFUNC                    
				     ; 29     1D 
 01A3  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
                                        short_addr  CPMFUNC                    
				     ; 30     1E 
 01A5  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;                                              
				                            ; 
                                        short_addr  $GET_DEFAULT_DPB           
				     ; 31     1F 
 01A7  0000 E                 1  DW OFFSET DOSGROUP:$GET_DEFAULT_DPB
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                        short_addr  CPMFUNC                    
				     ; 32     20 
 01A9  021B R                 1  DW OFFSET DOSGROUP:CPMFUNC
                                        short_addr  $FCB_RANDOM_READ           
				     ; 33     21 
 01AB  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_READ
                                        short_addr  $FCB_RANDOM_WRITE          
				     ; 34     22 
 01AD  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_WRITE
                                        short_addr  $GET_FCB_FILE_LENGTH       
				     ; 35     23 
 01AF  0000 E                 1  DW OFFSET DOSGROUP:$GET_FCB_FILE_LENGTH
                                        short_addr  $GET_FCB_POSITION          
				     ; 36     24 
 01B1  0000 E                 1  DW OFFSET DOSGROUP:$GET_FCB_POSITION
 = 0024                         MAXCALL =       ($-DISPATCH)/2 - 1 
                                 
                                ; Extended Functions 
                                        short_addr  $SET_INTERRUPT_VECTOR      
				     ; 37     25 
 01B3  0000 E                 1  DW OFFSET DOSGROUP:$SET_INTERRUPT_VECTOR
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-71
System call entry points and dispatcher                     

				  A  M  M  E  R             ; 
                                ;                                              
				                            ; 
                                        short_addr  $CREATE_PROCESS_DATA_BLOCK 
				     ; 38     26 
 01B5  0000 E                 1  DW OFFSET DOSGROUP:$CREATE_PROCESS_DATA_BLOCK
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                        short_addr  $FCB_RANDOM_READ_BLOCK     
				     ; 39     27 
 01B7  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_READ_BLOCK
                                        short_addr  $FCB_RANDOM_WRITE_BLOCK    
				     ; 40     28 
 01B9  0000 E                 1  DW OFFSET DOSGROUP:$FCB_RANDOM_WRITE_BLOCK
                                        short_addr  $PARSE_FILE_DESCRIPTOR     
				     ; 41     29 
 01BB  0000 E                 1  DW OFFSET DOSGROUP:$PARSE_FILE_DESCRIPTOR
                                        short_addr  $GET_DATE                  
				     ; 42     2A 
 01BD  0000 E                 1  DW OFFSET DOSGROUP:$GET_DATE
                                        short_addr  $SET_DATE                  
				     ; 43     2B 
 01BF  0000 E                 1  DW OFFSET DOSGROUP:$SET_DATE
                                        short_addr  $GET_TIME                  
				     ; 44     2C 
 01C1  0000 E                 1  DW OFFSET DOSGROUP:$GET_TIME
                                        short_addr  $SET_TIME                  
				     ; 45     2D 
 01C3  0000 E                 1  DW OFFSET DOSGROUP:$SET_TIME
                                        short_addr  $SET_VERIFY_ON_WRITE       
				     ; 46     2E 
 01C5  0000 E                 1  DW OFFSET DOSGROUP:$SET_VERIFY_ON_WRITE
                                 
                                ; Extended functionality group 
                                        short_addr  $GET_DMA                   
				     ; 47     2F 
 01C7  0000 E                 1  DW OFFSET DOSGROUP:$GET_DMA
                                        short_addr  $GET_VERSION               
				     ; 48     30 
 01C9  0000 E                 1  DW OFFSET DOSGROUP:$GET_VERSION
                                        short_addr  $Keep_Process              
				     ; 49     31 
 01CB  0000 E                 1  DW OFFSET DOSGROUP:$Keep_Process
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;                                              
				                            ; 
                                        short_addr  $GET_DPB                   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-72
System call entry points and dispatcher                     

				     ; 50     32 
 01CD  0000 E                 1  DW OFFSET DOSGROUP:$GET_DPB
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                        short_addr  $SET_CTRL_C_TRAPPING       
				     ; 51     33 
 01CF  0000 E                 1  DW OFFSET DOSGROUP:$SET_CTRL_C_TRAPPING
                                        short_addr  $GET_INDOS_FLAG            
				     ; 52     34 
 01D1  0000 E                 1  DW OFFSET DOSGROUP:$GET_INDOS_FLAG
                                        short_addr  $GET_INTERRUPT_VECTOR      
				     ; 53     35 
 01D3  0000 E                 1  DW OFFSET DOSGROUP:$GET_INTERRUPT_VECTOR
                                        short_addr  $GET_DRIVE_FREESPACE       
				     ; 54     36 
 01D5  0000 E                 1  DW OFFSET DOSGROUP:$GET_DRIVE_FREESPACE
                                        short_addr  $CHAR_OPER                 
				     ; 55     37 
 01D7  0000 E                 1  DW OFFSET DOSGROUP:$CHAR_OPER
                                        short_addr  $INTERNATIONAL             
				     ; 56     38 
 01D9  0000 E                 1  DW OFFSET DOSGROUP:$INTERNATIONAL
                                ; XENIX CALLS 
                                ;   Directory Group 
                                        short_addr  $MKDIR                     
				     ; 57     39 
 01DB  0000 E                 1  DW OFFSET DOSGROUP:$MKDIR
                                        short_addr  $RMDIR                     
				     ; 58     3A 
 01DD  0000 E                 1  DW OFFSET DOSGROUP:$RMDIR
                                        short_addr  $CHDIR                     
				     ; 59     3B 
 01DF  0000 E                 1  DW OFFSET DOSGROUP:$CHDIR
                                ;   File Group 
                                        short_addr  $CREAT                     
				     ; 60     3C 
 01E1  0000 E                 1  DW OFFSET DOSGROUP:$CREAT
                                        short_addr  $OPEN                      
				     ; 61     3D 
 01E3  0000 E                 1  DW OFFSET DOSGROUP:$OPEN
                                        short_addr  $CLOSE                     
				     ; 62     3E 
 01E5  0000 E                 1  DW OFFSET DOSGROUP:$CLOSE
                                        short_addr  $READ                      
				     ; 63     3F 
 01E7  0000 E                 1  DW OFFSET DOSGROUP:$READ
                                        short_addr  $WRITE                     
				     ; 64     40 
 01E9  0000 E                 1  DW OFFSET DOSGROUP:$WRITE
                                        short_addr  $UNLINK                    
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-73
System call entry points and dispatcher                     

				     ; 65     41 
 01EB  0000 E                 1  DW OFFSET DOSGROUP:$UNLINK
                                        short_addr  $LSEEK                     
				     ; 66     42 
 01ED  0000 E                 1  DW OFFSET DOSGROUP:$LSEEK
                                        short_addr  $CHMOD                     
				     ; 67     43 
 01EF  0000 E                 1  DW OFFSET DOSGROUP:$CHMOD
                                        short_addr  $IOCTL                     
				     ; 68     44 
 01F1  0000 E                 1  DW OFFSET DOSGROUP:$IOCTL
                                        short_addr  $DUP                       
				     ; 69     45 
 01F3  0000 E                 1  DW OFFSET DOSGROUP:$DUP
                                        short_addr  $DUP2                      
				     ; 70     46 
 01F5  0000 E                 1  DW OFFSET DOSGROUP:$DUP2
                                        short_addr  $CURRENT_DIR               
				     ; 71     47 
 01F7  0000 E                 1  DW OFFSET DOSGROUP:$CURRENT_DIR
                                ;    Memory Group 
                                        short_addr  $ALLOC                     
				     ; 72     48 
 01F9  0000 E                 1  DW OFFSET DOSGROUP:$ALLOC
                                        short_addr  $DEALLOC                   
				     ; 73     49 
 01FB  0000 E                 1  DW OFFSET DOSGROUP:$DEALLOC
                                        short_addr  $SETBLOCK                  
				     ; 74     4A 
 01FD  0000 E                 1  DW OFFSET DOSGROUP:$SETBLOCK
                                ;    Process Group 
                                        short_addr  $EXEC                      
				     ; 75     4B 
 01FF  0000 E                 1  DW OFFSET DOSGROUP:$EXEC
                                        short_addr  $EXIT                      
				     ; 76     4C 
 0201  0000 E                 1  DW OFFSET DOSGROUP:$EXIT
                                        short_addr  $WAIT                      
				     ; 77     4D 
 0203  0000 E                 1  DW OFFSET DOSGROUP:$WAIT
                                        short_addr  $FIND_FIRST                
				     ; 78     4E 
 0205  0000 E                 1  DW OFFSET DOSGROUP:$FIND_FIRST
                                ;   Special Group 
                                        short_addr  $FIND_NEXT                 
				     ; 79     4F 
 0207  0000 E                 1  DW OFFSET DOSGROUP:$FIND_NEXT
                                ; SPECIAL SYSTEM GROUP 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-74
System call entry points and dispatcher                     

                                        short_addr  $SET_CURRENT_PDB           
				     ; 80     50 
 0209  023B R                 1  DW OFFSET DOSGROUP:$SET_CURRENT_PDB
                                        short_addr  $GET_CURRENT_PDB           
				     ; 81     51 
 020B  0241 R                 1  DW OFFSET DOSGROUP:$GET_CURRENT_PDB
                                        short_addr  $GET_IN_VARS               
				     ; 82     52 
 020D  0000 E                 1  DW OFFSET DOSGROUP:$GET_IN_VARS
                                        short_addr  $SETDPB                    
				     ; 83     53 
 020F  0000 E                 1  DW OFFSET DOSGROUP:$SETDPB
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                        short_addr  $GET_VERIFY_ON_WRITE       
				     ; 84     54 
 0211  0000 E                 1  DW OFFSET DOSGROUP:$GET_VERIFY_ON_WRITE
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;                                              
				                            ; 
                                        short_addr  $DUP_PDB                   
				     ; 85     55 
 0213  0000 E                 1  DW OFFSET DOSGROUP:$DUP_PDB
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                        short_addr  $RENAME                    
				     ; 86     56 
 0215  0000 E                 1  DW OFFSET DOSGROUP:$RENAME
                                        short_addr  $FILE_TIMES                
				     ; 87     57 
 0217  0000 E                 1  DW OFFSET DOSGROUP:$FILE_TIMES
                                        short_addr  $AllocOper                 
				     ; 88     58 
 0219  0000 E                 1  DW OFFSET DOSGROUP:$AllocOper
                                 
 = 0058                         MAXCOM  =       ($-DISPATCH)/2 - 1 
                                 
 021B                           CPMFUNC: 
 021B  32 C0                            XOR     AL,AL 
                                        return 
 021D                         1 ??0003:
 021D  C3                     1  RET
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-75
System call entry points and dispatcher                     

                                        IF      NOT IBM 
                                BREAK <Set_OEM_Handler -- Set OEM sys call addr
				ess and handle OEM Calls> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-76
Set_OEM_Handler -- Set OEM sys call address and handle OEM C

                                 
 021E                           $SET_OEM_HANDLER: 
                                ASSUME  DS:NOTHING,ES:NOTHING 
                                 
                                ; Inputs: 
                                ;       User registers, User Stack, INTS disabl
				ed 
                                ;       If CALL F8, DS:DX is new handler addres
				s 
                                ; Function: 
                                ;       Process OEM INT 21 extensions 
                                ; Outputs: 
                                ;       Jumps to OEM_HANDLER if appropriate 
                                 
 021E  75 0B                            JNE     DO_OEM_FUNC             ; If ab
				ove F8 try to jump to handler 
 0220  2E: 89 16 0000 E                 MOV     WORD PTR [OEM_HANDLER],DX      
				 ; Set Handler 
 0225  2E: 8C 1E 0002 E                 MOV     WORD PTR [OEM_HANDLER+2],DS 
 022A  CF                               IRET                            ; Quick
				 return, Have altered no registers 
                                 
 022B                           DO_OEM_FUNC: 
 022B  2E: 83 3E 0000 E FF              CMP     WORD PTR [OEM_HANDLER],-1 
 0231  75 03                            JNZ     OEM_JMP 
 0233  E9 005A R                        JMP     BADCALL                 ; Handl
				er not initialized 
                                 
 0236                           OEM_JMP: 
 0236  2E: FF 2E 0000 E                 JMP     [OEM_HANDLER] 
                                 
                                        ENDIF 
                                 
                                 
                                ASSUME  SS:DOSGROUP 
                                 
                                ; 
                                ; $Set_current_PDB takes BX and sets it to be t
				he current process 
                                ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE
				!!! *** 
                                ; 
                                        procedure   $SET_CURRENT_PDB,NEAR 
 023B                         1 $SET_CURRENT_PDB PROC NEAR
                                        ASSUME  DS:NOTHING,SS:NOTHING 
 023B  2E: 89 1E 0000 E                 MOV     [CurrentPDB],BX 
                                        return 
 0240                         1 ??0004:
 0240  C3                     1  RET
                                $SET_CURRENT_PDB    ENDP 
                                 
                                ; 
                                ; $get_current_PDB returns in BX the current pr
				ocess 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-77
Set_OEM_Handler -- Set OEM sys call address and handle OEM C

                                ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE
				!!! *** 
                                ; 
                                        procedure   $GET_CURRENT_PDB,NEAR 
 0241                         1 $GET_CURRENT_PDB PROC NEAR
                                        ASSUME  DS:NOTHING,SS:NOTHING 
                                        invoke  get_user_stack 
 0241  E8 0163 R              1  CALL get_user_stack
 0244  2E: FF 36 0000 E                 PUSH    [CurrentPDB] 
 0249  8F 44 02                         POP     [SI.user_BX] 
                                        return 
 024C                         1 ??0005:
 024C  C3                     1  RET
                                $GET_CURRENT_PDB    ENDP 
                                ;                                              
				                            ; 
                                ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                                ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                                 
                                BREAK <NullDev -- Driver for null device> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-78
NullDev -- Driver for null device                           

                                        procedure   SNULDEV,FAR 
 024D                         1 SNULDEV PROC FAR
                                ASSUME DS:NOTHING,ES:NOTHING,SS:NOTHING 
 024D  2E: 89 1E 0000 E                 MOV     WORD PTR [NULLDEVPT],BX 
 0252  2E: 8C 06 0002 E                 MOV     WORD PTR [NULLDEVPT+2],ES 
                                        return 
 0257                         1 ??0006:
 0257  CB                     1  RET
                                SNULDEV ENDP 
                                 
                                        procedure   INULDEV,FAR 
 0258                         1 INULDEV PROC FAR
 0258  06                               PUSH    ES 
 0259  53                               PUSH    BX 
 025A  2E: C4 1E 0000 E                 LES     BX,[NULLDEVPT] 
 025F  26: 81 4F 03 0100                OR      ES:[BX.REQSTAT],STDON          
				 ; Set done bit 
 0265  5B                               POP     BX 
 0266  07                               POP     ES 
                                        return 
 0267                         1 ??0007:
 0267  CB                     1  RET
                                 
                                INULDEV ENDP 
                                 
                                 
                                BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, in
				t_disk_write handlers> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-79
AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handler

                                 
                                 
                                        ENDIF 
                                 
                                        procedure   ABSDRD,FAR 
 0268                         1 ABSDRD PROC FAR
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
                                 
 0268  FA                               CLI 
 0269  2E: 8C 16 0000 E                 MOV     [user_SS],SS 
 026E  2E: 89 26 0000 E                 MOV     [user_SP],SP 
 0273  0E                               PUSH    CS 
 0274  17                               POP     SS 
                                ASSUME  SS:DOSGROUP 
 0275  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:DSKSTACK 
 0278  36: FE 06 0000 E                 INC     BYTE PTR [INDOS] 
 027D  FB                               STI 
 027E  FC                               CLD 
 027F  06                               PUSH    ES 
 0280  1E                               PUSH    DS 
 0281  16                               PUSH    SS 
 0282  1F                               POP     DS 
                                ASSUME  DS:DOSGROUP 
                                        invoke  GETBP 
 0283  E8 0000 E              1  CALL GETBP
 0286  1F                               POP     DS 
                                ASSUME  DS:NOTHING 
 0287  72 06                            JC      ILEAVE 
                                        invoke  DSKREAD 
 0289  E8 0000 E              1  CALL DSKREAD
 028C                           TLEAVE: 
 028C  74 01                            JZ      ILEAVE 
                                 
                                        ENDIF 
                                 
 028E  F9                               STC 
 028F                           ILEAVE: 
 028F  07                               POP     ES 
 0290  FA                               CLI 
 0291  36: FE 0E 0000 E                 DEC     BYTE PTR [INDOS] 
 0296  36: 8B 26 0000 E                 MOV     SP,[user_SP] 
 029B  36: 8E 16 0000 E                 MOV     SS,[user_SS] 
                                ASSUME  SS:NOTHING 
 02A0  FB                               STI 
                                        return 
 02A1                         1 ??0008:
 02A1  CB                     1  RET
                                ABSDRD  ENDP 
                                 
                                        procedure   ABSDWRT,FAR 
 02A2                         1 ABSDWRT PROC FAR
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
                                 
 02A2  FA                               CLI 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-80
AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handler

 02A3  2E: 8C 16 0000 E                 MOV     [user_SS],SS 
 02A8  2E: 89 26 0000 E                 MOV     [user_SP],SP 
 02AD  0E                               PUSH    CS 
 02AE  17                               POP     SS 
                                ASSUME  SS:DOSGROUP 
 02AF  BC 0000 E                        MOV     SP,OFFSET DOSGROUP:DSKSTACK 
 02B2  36: FE 06 0000 E                 INC     BYTE PTR [INDOS] 
 02B7  FB                               STI 
 02B8  FC                               CLD 
 02B9  06                               PUSH    ES 
 02BA  1E                               PUSH    DS 
 02BB  16                               PUSH    SS 
 02BC  1F                               POP     DS 
                                ASSUME  DS:DOSGROUP 
                                        invoke  GETBP 
 02BD  E8 0000 E              1  CALL GETBP
 02C0  1F                               POP     DS 
                                ASSUME  DS:NOTHING 
 02C1  72 CC                            JC      ILEAVE 
                                        invoke  DSKWRITE 
 02C3  E8 0000 E              1  CALL DSKWRITE
 02C6  EB C4                            JMP     TLEAVE 
                                ABSDWRT ENDP 
                                 
                                 
                                 
                                        procedure   SYS_RETURN,NEAR 
 02C8                         1 SYS_RETURN PROC NEAR
                                        ASSUME  DS:NOTHING,ES:NOTHING 
                                        entry   SYS_RET_OK 
 02C8                         1 SYS_RET_OK:
 02C8  E8 0163 R                        call    get_user_stack 
 02CB  FF 74 16                         PUSH    [SI.user_F] 
 02CE  9D                               POPF 
 02CF  F8                               CLC 
 02D0  EB 0A                            JMP     SHORT DO_RET 
                                 
                                        entry   SYS_RET_ERR 
 02D2                         1 SYS_RET_ERR:
 02D2  32 E4                            XOR     AH,AH                   ; hack 
				to allow for smaller error rets 
 02D4  E8 0163 R                        call    get_user_stack 
 02D7  FF 74 16                         PUSH    [SI.user_F] 
 02DA  9D                               POPF 
 02DB  F9                               STC 
 02DC                           DO_RET: 
 02DC  89 04                            MOV     [SI.user_AX],AX         ; Reall
				y only sets AH 
 02DE  9C                               PUSHF 
 02DF  8F 44 16                         POP     [SI.user_F]             ; dump 
				on his flags 
                                        return 
 02E2                         1 ??0009:
 02E2  C3                     1  RET
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Page     1-81
AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handler

                                SYS_RETURN  ENDP 
                                 
                                do_ext 
                                 
 02E3                           CODE    ENDS 
                                        END 

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	02E3	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	0000	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-5
                                                             

  LAST . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'LAST'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ABSDRD . . . . . . . . . . . . .  	F PROC	0268	CODE	Global	Length = 003A
ABSDWRT  . . . . . . . . . . . .  	F PROC	02A2	CODE	Global	Length = 0026
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Alias	 FALSE		
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AUXSTACK . . . . . . . . . . . .  	V BYTE 	0000	DATA	External

BADCALL  . . . . . . . . . . . .  	L NEAR	005A	CODE
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CALL_ENTRY . . . . . . . . . . .  	L NEAR	005D	CODE	Global
CANCEL . . . . . . . . . . . . .  	Number	0018	
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-6
                                                             

CNTCFLAG . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
CODSTRT  . . . . . . . . . . . .  	NEAR 	0000	CODE
COMMAND  . . . . . . . . . . . .  	L NEAR	004C	CODE	Global
CONSWAP  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CPMFUNC  . . . . . . . . . . . .  	L NEAR	021B	CODE
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENTPDB . . . . . . . . . . .  	V WORD 	0000	DATA	External
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-7
                                                             

DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DISPATCH . . . . . . . . . . . .  	L WORD 	0169	CODE
DISPCALL . . . . . . . . . . . .  	L NEAR	0102	CODE
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DOSVER . . . . . . . . . . . . .  	Number	00D3	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DO_OEM_FUNC  . . . . . . . . . .  	L NEAR	022B	CODE
DO_RET . . . . . . . . . . . . .  	L NEAR	02DC	CODE
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DSKREAD  . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSKROUT  . . . . . . . . . . . .  	L NEAR	00E9	CODE
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSKSTACK . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
DSKSTATCHK . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSKWRITE . . . . . . . . . . . .  	L NEAR	0000	CODE	External
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ERRORMODE  . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-8
                                                             

ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ESCCH  . . . . . . . . . . . . .  	Number	001B	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETBP  . . . . . . . . . . . . .  	L NEAR	0000	CODE	External
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-9
                                                             

GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_USER_STACK . . . . . . . . .  	N PROC	0163	CODE	Global	Length = 0006
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	

HEADER . . . . . . . . . . . . .  	L BYTE 	0000	CODE	Global
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		

IBM  . . . . . . . . . . . . . .  	Alias	 FALSE		
IDLEINT  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
ILEAVE . . . . . . . . . . . . .  	L NEAR	028F	CODE
INDOS  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
INULDEV  . . . . . . . . . . . .  	F PROC	0258	CODE	Global	Length = 0010
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IOROUT . . . . . . . . . . . . .  	L NEAR	00DD	CODE
IOSTACK  . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
IRET . . . . . . . . . . . . . .  	L NEAR	005C	CODE	Global
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Number	0000	
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-10
                                                             

LEAVE  . . . . . . . . . . . . .  	L NEAR	0114	CODE	Global
LEAVEADDR  . . . . . . . . . . .  	V WORD 	0000	DATA	External
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXCALL  . . . . . . . . . . . .  	Number	0024	
MAXCOM . . . . . . . . . . . . .  	Number	0058	
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MSVER  . . . . . . . . . . . . .  	Alias	 TRUE		

NOSETDIR . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
NOTOEM . . . . . . . . . . . . .  	L NEAR	0054	CODE
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NSP  . . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
NSS  . . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
NULLDEVPT  . . . . . . . . . . .  	V DWORD	0000	DATA	External

OEM  . . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OEM_HANDLER  . . . . . . . . . .  	V DWORD	0000	DATA	External
OEM_JMP  . . . . . . . . . . . .  	L NEAR	0236	CODE
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	

QUIT . . . . . . . . . . . . . .  	L NEAR	0048	CODE	Global

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REDISP . . . . . . . . . . . . .  	L NEAR	00AF	CODE	Global
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-11
                                                             

RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RESTORE_TMP  . . . . . . . . . .  	L WORD 	013D	CODE
RESTORE_WORLD  . . . . . . . . .  	N PROC	013F	CODE	Global	Length = 0014
RET_L  . . . . . . . . . . . . .  	NEAR 	02E2	CODE
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAVEBX . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SAVEDS . . . . . . . . . . . . .  	V WORD 	0000	DATA	External
SAVE_WORLD . . . . . . . . . . .  	N PROC	0153	CODE	Global	Length = 0010
SAVREGS  . . . . . . . . . . . .  	L NEAR	0074	CODE
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SNULDEV  . . . . . . . . . . . .  	F PROC	024D	CODE	Global	Length = 000B
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:41:54
                                                            Symbols-12
                                                             

SYSTEM_CALL  . . . . . . . . . .  	N PROC	0048	CODE	Global	Length = 00F5
SYS_RETURN . . . . . . . . . . .  	N PROC	02C8	CODE	Global	Length = 001B
SYS_RET_ERR  . . . . . . . . . .  	L NEAR	02D2	CODE	Global
SYS_RET_OK . . . . . . . . . . .  	L NEAR	02C8	CODE	Global

TLEAVE . . . . . . . . . . . . .  	L NEAR	028C	CODE
TOGLINS  . . . . . . . . . . . .  	Alias	 WANG		
TOGLPRN  . . . . . . . . . . . .  	Alias	 FALSE		
TRUE . . . . . . . . . . . . . .  	Number	FFFF	

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_SP  . . . . . . . . . . . .  	V WORD 	0000	DATA	External
USER_SS  . . . . . . . . . . . .  	V WORD 	0000	DATA	External

VER  . . . . . . . . . . . . . .  	Text  		

WAIT . . . . . . . . . . . . . .  	Number	004D	
WANG . . . . . . . . . . . . . .  	Alias	 FALSE		
WORLD_RET  . . . . . . . . . . .  	L NEAR	014D	CODE
WPERR  . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZEROEXT  . . . . . . . . . . . .  	Alias	 TRUE		

$GET_CURRENT_PDB . . . . . . . .  	N PROC	0241	CODE	Global	Length = 000C
$SET_CURRENT_PDB . . . . . . . .  	N PROC	023B	CODE	Global	Length = 0006
$SET_OEM_HANDLER . . . . . . . .  	L NEAR	021E	CODE
??0000 . . . . . . . . . . . . .  	L NEAR	0113	CODE
??0001 . . . . . . . . . . . . .  	L NEAR	0152	CODE
??0002 . . . . . . . . . . . . .  	L NEAR	0168	CODE
??0003 . . . . . . . . . . . . .  	L NEAR	021D	CODE
??0004 . . . . . . . . . . . . .  	L NEAR	0240	CODE
??0005 . . . . . . . . . . . . .  	L NEAR	024C	CODE
??0006 . . . . . . . . . . . . .  	L NEAR	0257	CODE
??0007 . . . . . . . . . . . . .  	L NEAR	0267	CODE
??0008 . . . . . . . . . . . . .  	L NEAR	02A1	CODE
??0009 . . . . . . . . . . . . .  	L NEAR	02E2	CODE


   1996 Source  Lines
   3495 Total   Lines
    702 Symbols

  16066 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
