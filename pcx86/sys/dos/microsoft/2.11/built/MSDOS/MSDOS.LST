Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-1
                                                            

                                TITLE   Standard MSDOS 
                                NAME    MSDOS_2 
                                 
                                ; Number of disk I/O buffers 
                                 
                             C          INCLUDE STDSW.ASM 
 = FFFF                      C  TRUE    EQU     0FFFFH 
 = 0000                      C  FALSE   EQU     NOT TRUE 
                             C   
                             C  ; Use the switches below to produce the standar
				d Microsoft version or the IBM 
                             C  ; version of the operating system 
                             C  ELSE 
 =                           C  MSVER   EQU     TRUE 
 =                           C  IBM     EQU     FALSE 
                             C  ENDIF 
 =                           C  WANG    EQU     FALSE 
 =                           C  ALTVECT EQU     FALSE 
                             C   
                             C  ; Set this switch to cause DOS to move itself t
				o the end of memory 
 =                           C  HIGHMEM EQU     FALSE 
                             C   
                             C          ELSE 
                             C          ELSE 
 = 001B                      C  ESCCH   EQU     1BH 
                             C          ENDIF 
 = 0018                      C  CANCEL  EQU     "X"-"@"                 ;Cancel
				 with Ctrl-X 
 =                           C  TOGLINS EQU     WANG                    ;Separa
				te keys for insert mode on 
                             C                                          ;and of
				f if not WANG 
 =                           C  TOGLPRN EQU     FALSE                   ;Separa
				te keys for printer echo on 
                             C                                          ;and of
				f 
 =                           C  ZEROEXT EQU     TRUE 
                             C          ENDIF 
                                 
                             C          INCLUDE MSHEAD.ASM 
                             C  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-2
                                                            

                             C  PAGE 
                             C  ; MS-DOS  High-performance operating system for
				 the 8086  version 1.28 
                             C  ;       by Microsoft MSDOS development group: 
                             C  ;           Tim Paterson (Ret.) 
                             C  ;           Aaron Reynolds 
                             C  ;           Nancy Panners (Parenting) 
                             C  ;           Mark Zbikowski 
                             C  ;           Chris Peters (BIOS) (ret.) 
                             C   
                             C  ; ****************** Revision History *********
				**************** 
                             C  ;          >> EVERY change must noted below!! <
				< 
                             C  ; 
                             C  ; 0.34 12/29/80 General release, updating all p
				ast customers 
                             C  ; 0.42 02/25/81 32-byte directory entries added
				 
                             C  ; 0.56 03/23/81 Variable record and sector size
				s 
                             C  ; 0.60 03/27/81 Ctrl-C exit changes, including 
				register save on user stack 
                             C  ; 0.74 04/15/81 Recognize I/O devices with file
				 names 
                             C  ; 0.75 04/17/81 Improve and correct buffer hand
				ling 
                             C  ; 0.76 04/23/81 Correct directory size when not
				 2^N entries 
                             C  ; 0.80 04/27/81 Add console input without echo,
				 Functions 7 & 8 
                             C  ; 1.00 04/28/81 Renumber for general release 
                             C  ; 1.01 05/12/81 Fix bug in `STORE' 
                             C  ; 1.10 07/21/81 Fatal error trapping, NUL devic
				e, hidden files, date & time, 
                             C  ;               RENAME fix, general cleanup 
                             C  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on
				 open; fix SET FILE SIZE 
                             C  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK
				 after all (CP/M programs don't) 
                             C  ; 1.13 10/29/81 Fix classic "no write-through" 
				error in buffer handling 
                             C  ; 1.20 12/31/81 Add time to FCB; separate FAT f
				rom DPT; Kill SMALLDIR; Add 
                             C  ;               FLUSH and MAPDEV calls; allow d
				isk mapping in DSKCHG; Lots 
                             C  ;               of smaller improvements 
                             C  ; 1.21 01/06/82 HIGHMEM switch to run DOS in hi
				gh memory 
                             C  ; 1.22 01/12/82 Add VERIFY system call to enabl
				e/disable verify after write 
                             C  ; 1.23 02/11/82 Add defaulting to parser; use v
				ariable escape character Don't 
                             C  ;               zero extent field in IBM versio
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-3
                                                            

				n (back to 1.01!) 
                             C  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; a
				dd fcn. 28 
                             C  ; 1.25 03/03/82 Put marker (00) at end of direc
				tory to speed searches 
                             C  ; 1.26 03/03/82 Directory buffers searched as a
				 circular queue, current buffer 
                             C  ;               is searched first when possible
				 to minimize I/O 
                             C  ;      03/03/82 STORE routine optimized to tack
				 on partial sector tail as 
                             C  ;               full sector write when file is 
				growing 
                             C  ;      03/09/82 Multiple I/O buffers 
                             C  ;      03/29/82 Two bugs:  Delete all case rese
				ts search to start at beginning 
                             C  ;               of directory (infinite loop pos
				sible otherwise), DSKRESET 
                             C  ;               must invalidate all buffers (di
				sk and directory). 
                             C  ; 1.27 03/31/82 Installable device drivers 
                             C  ;                 Function call 47 - Get pointe
				r to device table list 
                             C  ;                 Function call 48 - Assign CON
				 AUX LIST 
                             C  ;      04/01/82 Spooler interrupt (INT 28) adde
				d. 
                             C  ; 1.28 04/15/82 DOS retructured to use ASSUMEs 
				and PROC labels around system 
                             C  ;               call entries.  Most CS relative
				 references changed to SS 
                             C  ;               relative with an eye toward put
				ting a portion of the DOS in 
                             C  ;               ROM.  DOS source also broken in
				to header, data and code pieces 
                             C  ;      04/15/82 GETDMA and GETVECT calls added 
				as 24 and 32.  These calls 
                             C  ;               return the current values. 
                             C  ;      04/15/82 INDOS flag implemented for inte
				rrupt processing along with 
                             C  ;               call to return flag location (c
				all 29) 
                             C  ;      04/15/82 Volume ID attribute added 
                             C  ;      04/17/82 Changed ABORT return to user to
				 a long ret from a long jump to 
                             C  ;               avoid a CS relative reference. 
                             C  ;      04/17/82 Put call to STATCHK in dispatch
				er to catch ^C more often 
                             C  ;      04/20/82 Added INT int_upooler into loop
				 ^S wait 
                             C  ;      04/22/82 Dynamic disk I/O buffer allocat
				ion and call to manage them 
                             C  ;               call 49. 
                             C  ;      04/23/82 Added GETDSKPTDL as call 50, si
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-4
                                                            

				milar to GETFATPT(DL), returns 
                             C  ;               address of DPB 
                             C  ;      04/29/82 Mod to WRTDEV to look for ^C or
				 ^S at console input when 
                             C  ;               writting to console device via 
				file I/O.  Added a console 
                             C  ;               output attribute to devices. 
                             C  ;      04/30/82 Call to en/dis able ^C check in
				 dispatcher Call 51 
                             C  ;      04/30/82 Code to allow assignment of fun
				c 1-12 to disk files as well 
                             C  ;               as devices....  pipes, redirect
				ion now possible 
                             C  ;      04/30/82 Expanded GETLIST call to 2.0 st
				andard 
                             C  ;      05/04/82 Change to INT int_fatal_abort c
				allout int HARDERR.  DOS SS 
                             C  ;               (data segment) stashed in ES, I
				NT int_fatal_abort routines must 
                             C  ;               preserve ES.  This mod so HARDE
				RR can be ROMed. 
                             C  ; 1.29 06/01/82 Installable block and character
				 devices as per 2.0 spec 
                             C  ;      06/04/82 Fixed Bug in CLOSE regarding ca
				ll to CHKFATWRT.  It got left 
                             C  ;               out back about 1.27 or so (oops
				).  ARR 
                             C  ; 1.30 06/07/82 Directory sector buffering adde
				d to main DOS buffer queue 
                             C  ; 1.40 06/15/82 Tree structured directories.  X
				ENIX Path Parser MKDIR CHDIR 
                             C  ;               RMDIR Xenix calls 
                             C  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF 
                             C  ; 1.50 06/17/82 FATs cached in buffer pool, get
				 FAT pointer calls disappear 
                             C  ;               Frees up lots of memory. 
                             C  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT 
				one sector read/write through 
                             C  ;               system buffers 
                             C  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, 
				DUP2, LSEEK implemented 
                             C  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls,
				 saves and gets remote dir 
                             C  ; 1.54 07/11/82 Function calls 1-12 make use of
				 new 2.0 PDB. Init code 
                             C  ;               changed to set file handle envi
				ronment. 
                             C  ; 2.00 08/01/82 Number for IBM release 
                             C  ;      01/19/83 No environ bug in EXEC 
                             C  ;      01/19/83 MS-DOS OEM INT 21 extensions (S
				ET_OEM_HANDLER) 
                             C  ;      01/19/83 Performance bug fix in cooked w
				rite to NUL 
                             C  ;      01/27/83 Growcnt fixed for 32-bits 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-5
                                                            

                             C  ;      01/27/83 Find-first problem after create
				 
                             C  ; 2.01 02/17/83 International DOS 
                             C  ; 2.11 08/12/83 Dos split into several more mod
				ules for assembly on 
                             C  ;               an IBM PC 
                             C  ; 
                             C  ; *********************************************
				**************** 
                             C   
                             C   
                             C  SUBTTL        EQUATES 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-6
EQUATES                                                     

                             C  PAGE 
                             C  ; Interrupt Entry Points: 
                             C   
                             C  ; INTBASE:      ABORT 
                             C  ; INTBASE+4:    COMMAND 
                             C  ; INTBASE+8:    BASE EXIT ADDRESS 
                             C  ; INTBASE+C:    CONTROL-C ABORT 
                             C  ; INTBASE+10H:  FATAL ERROR ABORT 
                             C  ; INTBASE+14H:  BIOS DISK READ 
                             C  ; INTBASE+18H:  BIOS DISK WRITE 
                             C  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET 
				BY DOS) 
                             C  ; INTBASE+20H:  SPOOLER INTERRUPT 
                             C  ; INTBASE+40H:  Long jump to CALL entry point 
                             C   
 = 000C                      C  ENTRYPOINTSEG   EQU     0CH 
 = 0FFF                      C  MAXDIF          EQU     0FFFH 
 = 000A                      C  SAVEXIT         EQU     10 
                             C   
                             C          INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-7
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-10
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-11
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-12
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-13
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-14
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-15
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-16
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-17
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-18
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-19
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-20
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-21
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-22
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-23
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  ELSE 
                             C    ELSE 
                             C      ENDIF 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (DOSVER / 100) 
 = 000B                      C  DOS_MINOR_VERSION   EQU     (DOSVER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-24
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-25
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-26
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-27
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-28
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-29
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-30
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-31
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-32
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-33
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-34
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-35
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-36
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-37
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-38
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-39
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-40
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-41
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-42
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-43
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-44
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-45
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-46
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-47
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-48
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-49
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-50
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-51
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-52
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-53
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-54
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-55
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-56
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-57
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-58
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-59
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-60
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-61
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-62
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                             C   
                             C          INCLUDE DEVSYM.ASM 
                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-63
DEVICE TABLE AND SRH DEFINITION                             

                             C  PAGE 
                             C  ; The device table list has the form: 
                             C  SYSDEV  STRUC 
 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointer to nex
				t device header 
 0004  ????                  C  SDEVATT         DW      ?       ;Attributes of 
				the device 
 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strategy entry
				 point 
 0008  ????                  C  SDEVINT         DW      ?       ;Interrupt entr
				y point 
 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name of devi
				ce (only first byte used for block) 
            ??               C  
                         ]   C  
                             C  
 0012                        C  SYSDEV  ENDS 
                             C   
                             C  ;Attribute bit masks 
 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15 - 1  if
				 Char, 0 if block 
 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14 - CONTR
				OL mode bit 
 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13 - Devic
				e uses FAT ID bytes, comp media. 
 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 - This d
				evice is the console input. 
 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 - This d
				evice is the console output. 
 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 - This d
				evice is the null device. 
 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 - This d
				evice is the clock device. 
 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 - This d
				evice is special 
                             C   
                             C  ;Static Reguest Header 
                             C  SRHEAD  STRUC 
 0000  ??                    C  REQLEN  DB      ?               ;Length in byte
				s of request block 
 0001  ??                    C  REQUNIT DB      ?               ;Device unit nu
				mber 
 0002  ??                    C  REQFUNC DB      ?               ;Type of reques
				t 
 0003  ????                  C  REQSTAT DW      ?               ;Status Word 
 0005  0008[                 C          DB      8 DUP(?)        ;Reserved for q
				ueue links 
            ??               C  
                         ]   C  
                             C  
 000D                        C  SRHEAD  ENDS 
                             C   
                             C  ;Status word masks 
 = 8000                      C  STERR   EQU     8000H           ;Bit 15 - Error
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-64
DEVICE TABLE AND SRH DEFINITION                             

				 
 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 - Buisy 
 = 0100                      C  STDON   EQU     0100H           ;Bit 8 - Done 
 = 00FF                      C  STECODE EQU     00FFH           ;Error code 
 = 0000                      C  WRECODE EQU     0 
                             C   
                             C  ;Function codes 
 = 0000                      C  DEVINIT EQU     0               ;Initialization
				 
 = 001A                      C  DINITHL EQU     26              ;Size of init h
				eader 
 = 0001                      C  DEVMDCH EQU     1               ;Media check 
 = 000F                      C  DMEDHL  EQU     15              ;Size of media 
				check header 
 = 0002                      C  DEVBPB  EQU     2               ;Get BPB 
 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL read 
 = 0016                      C  DBPBHL  EQU     22              ;Size of Get BP
				B header 
 = 0004                      C  DEVRD   EQU     4               ;Read 
 = 0016                      C  DRDWRHL EQU     22              ;Size of RD/WR 
				header 
 = 0005                      C  DEVRDND EQU     5               ;Non destructiv
				e read no wait (character devs) 
 = 000E                      C  DRDNDHL EQU     14              ;Size of non de
				structive read header 
 = 0006                      C  DEVIST  EQU     6               ;Input status 
 = 000D                      C  DSTATHL EQU     13              ;Size of status
				 header 
 = 0007                      C  DEVIFL  EQU     7               ;Input flush 
 = 000F                      C  DFLSHL  EQU     15              ;Size of flush 
				header 
 = 0008                      C  DEVWRT  EQU     8               ;Write 
 = 0009                      C  DEVWRTV EQU     9               ;Write with ver
				ify 
 = 000A                      C  DEVOST  EQU     10              ;Output status 
 = 000B                      C  DEVOFL  EQU     11              ;Output flush 
 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL write 
                             C   
                             C   
                             C  SUBTTL ^C, terminate/abort/exit and Hard error 
				actions 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-65
^C, terminate/abort/exit and Hard error actions             

                             C  PAGE 
                             C  ; 
                             C  ; There are three kinds of context resets that 
				can occur during normal DOS 
                             C  ; functioning:  ^C trap, terminate/abort/exit, 
				and Hard-disk error.  These must 
                             C  ; be handles in a clean fashion that allows nes
				ted executions along with the 
                             C  ; ability to trap one's own errors. 
                             C  ; 
                             C  ; ^C trap - A process may elect to catch his ow
				n ^Cs.  This is achieved by 
                             C  ;           using the $GET_INTERRUPT_VECTOR and
				 $SET_INTERRUPT_VECTOR as 
                             C  ;           follows: 
                             C  ; 
                             C  ;           $GET_INTERRUPT_VECTOR for INT int_c
				trl_c 
                             C  ;           Save it in static memory. 
                             C  ;           $SET_INTERRUPT_VECTOR for INT int_c
				trl_c 
                             C  ; 
                             C  ;           The interrupt service routine must 
				preserve all registers and 
                             C  ;           return carry set iff the operation 
				is to be aborted (via abort 
                             C  ;           system call), otherwise, carry is r
				eset and the operation is 
                             C  ;           restarted.  ANY DEVIATION FROM THIS
				 WILL LEAD TO UNRELIABLE 
                             C  ;           RESULTS. 
                             C  ; 
                             C  ;           To restore original ^C processing (
				done on terminate/abort/exit), 
                             C  ;           restore INT int_ctrl_c from the sav
				ed vector. 
                             C  ; 
                             C  ; Hard-disk error -- The interrupt service rout
				ine for INT int_fatal_abort must 
                             C  ;           also preserve registers and return 
				one of three values in AL: 0 and 
                             C  ;           1 imply retry and ignore (???)  and
				 2 indicates an abort.  The user 
                             C  ;           himself is not to issue the abort, 
				rather, the dos will do it for 
                             C  ;           him by simulating a normal abort/ex
				it system call.  ANY DEVIATION 
                             C  ;           FROM THIS WILL LEAD TO UNRELIABLE R
				ESULTS. 
                             C  ; 
                             C  ; terminate/abort/exit -- The user may not, und
				er any circumstances trap an 
                             C  ;           abort call.  This is reserved for k
				nowledgeable system programs. 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-66
^C, terminate/abort/exit and Hard error actions             

                             C  ;           ANY DEVIATION FROM THIS WILL LEAD T
				O UNRELIABLE RESULTS. 
                             C   
                             C  SUBTTL SEGMENT DECLARATIONS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-67
SEGMENT DECLARATIONS                                        

                             C  PAGE 
                             C   
                             C  ; The following are all of the segments used.  
				They are declared in the order 
                             C  ; that they should be placed in the executable 
                             C   
                             C  ; 
                             C  ; segment ordering for MSDOS 
                             C  ; 
                             C   
 0000                        C  START           SEGMENT BYTE PUBLIC 'START' 
 0000                        C  START           ENDS 
                             C   
 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CONST' 
 0000                        C  CONSTANTS       ENDS 
                             C   
 0000                        C  DATA            SEGMENT WORD PUBLIC 'DATA' 
 0000                        C  DATA            ENDS 
                             C   
 0000                        C  CODE            SEGMENT BYTE PUBLIC 'CODE' 
 0000                        C  CODE            ENDS 
                             C   
 0000                        C  LAST            SEGMENT BYTE PUBLIC 'LAST' 
 0000                        C  LAST            ENDS 
                             C   
                             C  DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST 
                             C   
                             C  ; The following segment is defined such that th
				e data/const classes appear 
                             C  ; before the code class for ROMification 
                             C   
 0000                        C  START           SEGMENT BYTE PUBLIC 'START' 
                             C                  ASSUME  CS:DOSGROUP,DS:NOTHING,
				ES:NOTHING,SS:NOTHING 
 0000  E9 0000 R             C          JMP     DOSINIT 
 0003                        C  START           ENDS 
                                 
                             C          INCLUDE MSDATA.ASM 
                             C  SUBTTL Initialized data and data used at DOS in
				itialization 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-68
Initialized data and data used at DOS initialization        

                             C  PAGE 
                             C  ; DATA AREA for MS-DOS 
                             C   
                             C  ENDIF 
                             C   
 0000                        C  CONSTANTS       SEGMENT BYTE PUBLIC 'CONST' 
                             C          EXTRN   international_table:BYTE 
                             C          EXTRN   Current_Country:WORD 
                             C   
                             C   
 0000                        C          ORG     0 
 = 0000                      C  CONSTRT EQU     $               ; Start of cons
				tants segment 
                             C   
                             C          PUBLIC  DevStrLen 
 0000  03                    C  DEVSTRLEN DB    3              ; Size of below 
                             C          PUBLIC  DevString 
 0001  44 45 56              C  DEVSTRING DB    "DEV"          ; Dummy device d
				irectory 
                             C   
                             C  ; 
                             C  ; Table of routines for assignable devices 
                             C  ; 
                             C  ; MSDOS allows assignment if the following stan
				dard devices: 
                             C  ;   stdin  (usually CON input) 
                             C  ;   stdout (usually CON output) 
                             C  ;   auxin  (usually AUX input) 
                             C  ;   auxout (usually AUX output) 
                             C  ;   stdlpt (usually PRN output) 
                             C  ; 
                             C  ; SPECIAL NOTE: 
                             C  ;   Status of a file is a strange idea.  We cho
				ose to handle it in this manner: 
                             C  ;   If we're not at end-of-file, then we always
				 say that we have a character. 
                             C  ;   Otherwise, we return ^Z as the character an
				d set the ZERO flag.  In this 
                             C  ;   manner we can support program written under
				 the old DOS (they use ^Z as EOF 
                             C  ;   on devices) and programs written under the 
				new DOS (they use the ZERO flag 
                             C  ;   as EOF). 
                             C   
                             C  ; Default FCBs for boot up 
                             C   
 0004                        C  sftabl      LABEL   DWORD                     ;
				 file table 
 0004  FFFF                  C              DW      -1 
 0006  FFFF                  C              DW      -1 
 0008  0005                  C              DW      sf_default_number  ; Number
				 of entries in table 
 000A  0005[                 C              DB      sf_default_number DUP ( (SI
				ZE sf_entry) DUP (0)) 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-69
Initialized data and data used at DOS initialization        

        0028[                C  
             00              C  
                        ]    C  
                         ]   C  
                             C  
                             C   
                             C          I_AM    NoSetDir,BYTE           ; true 
				-> do not set directory 
 00D2  ??                    C1 NoSetDir DB ?
                             C          I_am    DidCTRLC,BYTE           ; true 
				-> we did a ^C exit 
 00D3  ??                    C1 DidCTRLC DB ?
                             C          I_am    SpaceFlag,BYTE          ; true 
				-> embedded spaces are allowed 
 00D4  ??                    C1 SpaceFlag DB ?
                             C                                          ; in FC
				B 
                             C  ; the next two variables relate to the position
				 of the logical stdout/stdin 
                             C  ; cursor.  They are only meaningful when stdin/
				stdout are assigned to the 
                             C  ; console. 
                             C   
                             C          i_am    CARPOS,BYTE             ; curso
				r position in stdin 
 00D5  ??                    C1 CARPOS DB ?
                             C          i_am    STARTPOS,BYTE           ; posit
				ion of cursor at beginning 
 00D6  ??                    C1 STARTPOS DB ?
                             C                                          ; of bu
				ffered input call 
                             C          I_AM    PFLAG,BYTE 
 00D7  ??                    C1 PFLAG DB ?
                             C          I_AM    VERFLG,BYTE             ; Initi
				alize with verify off 
 00D8  ??                    C1 VERFLG DB ?
                             C          I_AM    CONTPOS,WORD 
 00D9  ????                  C1 CONTPOS DW ?
                             C          PUBLIC  CHARCO 
 00DB  03                    C  CHARCO      DB      00000011B           ; Allow
				s statchks every 4 chars... 
                             C   
                             C          I_AM    DMAADD,DWORD            ; User'
				s disk transfer address 
 00DC  ????????              C1 DMAADD DD ?
                             C                                          ; (disp
				/seg) 
 00DC                        C              ORG     $-CONSTRT-4 
 00DC  0080                  C              DW      80H 
 00DE  ????                  C              DW      ? 
                             C   
 00E0  ????                  C  ENDMEM      DW      ? 
                             C   
                             C              PUBLIC  switch_character 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-70
Initialized data and data used at DOS initialization        

 00E2  2F                    C  switch_character    DB  '/' 
                             C   
                             C              PUBLIC  device_availability 
 00E3  FF                    C  device_availability DB  0FFH 
                             C   
                             C              I_AM    FirstArena,WORD         ; f
				irst free block found 
 00E4  ????                  C1 FirstArena DW ?
                             C              I_AM    BestArena,WORD          ; b
				est free block found 
 00E6  ????                  C1 BestArena DW ?
                             C              I_AM    LastArena,WORD          ; l
				ast free block found 
 00E8  ????                  C1 LastArena DW ?
                             C              I_AM    AllocMethod,BYTE        ; h
				ow to alloc first(best)last 
 00EA  ??                    C1 AllocMethod DB ?
                             C              I_AM    arena_head,WORD 
 00EB  ????                  C1 arena_head DW ?
                             C   
                             C  ; The following block of data is used by SYSINI
				T.  Do not change the order or 
                             C  ; size of this block 
                             C   
                             C              PUBLIC  SYSINITVAR 
 00ED                        C  SYSINITVAR  LABEL   WORD 
                             C          I_AM    DPBHEAD,DWORD           ; Point
				er to head of DPB-FAT list 
 00ED  ????????              C1 DPBHEAD DD ?
                             C          I_AM    sft_addr,DWORD          ; Point
				er to first FCB table 
 00F1  ????????              C1 sft_addr DD ?
 00F1                        C              ORG     $-CONSTRT-4 
                             C              short_addr  sftabl 
 00F1  0004 R                C1  DW OFFSET DOSGROUP:sftabl
 00F3  ????                  C              DW      ?                   ; DOS s
				egment set at INIT 
                             C   
                             C  ; The following address points to the CLOCK dev
				ice 
                             C          i_am    BCLOCK,DWORD 
 00F5  ????????              C1 BCLOCK DD ?
                             C  ; The following address is used by DISKSTATCHK 
				it is always points to the 
                             C  ; console input device header 
                             C          I_AM    BCON,DWORD              ; Conso
				le device entry points 
 00F9  ????????              C1 BCON DD ?
                             C          i_am    NUMIO,BYTE              ; Numbe
				r of disk tables 
 00FD  ??                    C1 NUMIO DB ?
 00FE  0000                  C  MAXSEC      DW      0                   ; Maxim
				um allowed sector size 
                             C          I_AM    BUFFHEAD,DWORD          ; Point
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-71
Initialized data and data used at DOS initialization        

				er to head of buffer queue 
 0100  ????????              C1 BUFFHEAD DD ?
 0104                        C  DEVHEAD LABEL   DWORD 
                             C          I_AM    NULDEV,DWORD            ; Set t
				o list start passed by 
 0104  ????????              C1 NULDEV DD ?
                             C  					; BIOS at DOS Init 
                             C   
 0108  8004                  C          DW      DEVTYP OR ISNULL 
                             C          short_addr  SNULDEV 
 010A  0000 E                C1  DW OFFSET DOSGROUP:SNULDEV
                             C          short_addr  INULDEV 
 010C  0000 E                C1  DW OFFSET DOSGROUP:INULDEV
 010E  4E 55 4C 20 20 20 20  C          DB      "NUL     " 
       20                    C  
                             C   
                             C   
                             C          i_am    DAY,BYTE 
 0116  ??                    C1 DAY DB ?
                             C          i_am    MONTH,BYTE 
 0117  ??                    C1 MONTH DB ?
                             C          i_am    YEAR,WORD 
 0118  ????                  C1 YEAR DW ?
                             C          i_am    DAYCNT,WORD 
 011A  ????                  C1 DAYCNT DW ?
                             C          i_am    WEEKDAY,BYTE 
 011C  ??                    C1 WEEKDAY DB ?
 0116                        C          ORG     $-CONSTRT-7 
 0116  00 00                 C          DB      0,0 
 0118  0000 FFFF             C          DW      0,-1 
 011C  00                    C          DB      0 
                             C   
                             C          I_AM    CURDRV,BYTE             ; Defau
				lt to drive A 
 011D  ??                    C1 CURDRV DB ?
                             C          I_AM    LASTENT,WORD 
 011E  ????                  C1 LASTENT DW ?
                             C          i_am    INDOS,BYTE              ; DOS s
				tatus for interrupt processing 
 0120  ??                    C1 INDOS DB ?
 0120                        C              ORG     $-CONSTRT-1 
 0120  00                    C              DB      0 
                             C          I_AM    ErrorMode,BYTE          ; Flag 
				for INT 24 processing 
 0121  ??                    C1 ErrorMode DB ?
                             C          PUBLIC  WPErr 
 0122  FF                    C  WPERR       DB      -1                  ; Write
				 protect error flag 
                             C          I_AM    CONSWAP,BYTE 
 0123  ??                    C1 CONSWAP DB ?
                             C          PUBLIC  IDLEINT 
 0124  01                    C  IDLEINT     DB      1 
                             C          PUBLIC  CNTCFLAG 
 0125  00                    C  CNTCFLAG    DB      0                   ; ^C ch
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-72
Initialized data and data used at DOS initialization        

				eck in dispatch disabled 
                             C   
                             C          PUBLIC  LastBuffer 
 0126                        C  LASTBUFFER  LABEL   DWORD               ; Buffe
				r queue recency pointer 
 0126  FFFF                  C              DW      -1 
 0128  FFFF                  C              DW      -1 
                             C   
                             C  ; Combination of all device call parameters 
                             C   
                             C          PUBLIC  DEVCALL 
 012A  ??                    C  DEVCALL SRHEAD  <> 
 012B  ??                    C  
 012C  ??                    C  
 012D  ????                  C  
 012F  0008[                 C  
            ??               C  
                         ]   C  
                             C  
 0137                        C  CALLUNIT    LABEL   BYTE 
 0137                        C  CALLFLSH    LABEL   WORD 
                             C          I_AM    CALLMED,BYTE 
 0137  ??                    C1 CALLMED DB ?
 0138                        C  CALLBR      LABEL   DWORD 
                             C          PUBLIC  CALLXAD 
 0138                        C  CALLXAD     LABEL   DWORD 
                             C          I_AM    CALLRBYT,BYTE 
 0138  ??                    C1 CALLRBYT DB ?
 0139  0003[                 C          DB      3 DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C          PUBLIC CallBPB 
 013C                        C  CALLBPB     LABEL   DWORD 
                             C          I_AM    CALLSCNT,WORD 
 013C  ????                  C1 CALLSCNT DW ?
 013E  ????                  C  CALLSSEC    DW      ? 
                             C   
                             C          I_AM    CALLDEVAD,DWORD             ; s
				tash for device entry point 
 0140  ????????              C1 CALLDEVAD DD ?
                             C   
                             C  ; Same as above for I/O calls 
                             C   
                             C          PUBLIC  IOCall 
 0144  ??                    C  IOCALL  SRHEAD  <> 
 0145  ??                    C  
 0146  ??                    C  
 0147  ????                  C  
 0149  0008[                 C  
            ??               C  
                         ]   C  
                             C  
 0151                        C  IOFLSH  LABEL   WORD 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-73
Initialized data and data used at DOS initialization        

                             C          PUBLIC  IORCHR 
 0151                        C  IORCHR  LABEL   BYTE 
                             C          I_AM    IOMED,BYTE 
 0151  ??                    C1 IOMED DB ?
                             C          I_AM    IOXAD,DWORD 
 0152  ????????              C1 IOXAD DD ?
                             C          I_AM    IOSCNT,WORD 
 0156  ????                  C1 IOSCNT DW ?
                             C          I_AM    IOSSEC,WORD 
 0158  ????                  C1 IOSSEC DW ?
                             C   
                             C  ; Call struct for DSKSTATCHK 
                             C          PUBLIC  DSKSTCALL 
 015A  0E                    C  DSKSTCALL       DB      DRDNDHL 
 015B  00                    C                  DB      0 
                             C          PUBLIC  DSKSTCOM 
 015C  05                    C  DSKSTCOM        DB      DEVRDND 
                             C          I_AM    DSKSTST,WORD 
 015D  ????                  C1 DSKSTST DW ?
 015F  0008[                 C                  DB      8 DUP (0) 
            00               C  
                         ]   C  
                             C  
                             C          I_AM    DSKCHRET,BYTE 
 0167  ??                    C1 DSKCHRET DB ?
                             C                  short_addr  DEVIOBUF 
 0168  0109 R                C1  DW OFFSET DOSGROUP:DEVIOBUF
 016A  ????                  C                  DW      ?               ; DOS s
				egment set at Init 
                             C          PUBLIC  DSKSTCNT 
 016C  0001                  C  DSKSTCNT        DW      1 
 016E  0000                  C                  DW      0 
                             C   
                             C  ; Days in year 
                             C          i_am    YRTAB,8 
 0170  0008[                 C1 YRTAB DB 8 DUP (?)
 0170                        C          ORG     $-CONSTRT-8 
 0170  C8 A6                 C          DB      200,166                 ; Leap 
				year 
 0172  C8 A5                 C          DB      200,165 
 0174  C8 A5                 C          DB      200,165 
 0176  C8 A5                 C          DB      200,165 
                             C   
                             C  ; Days of each month 
                             C          i_am    MONTAB,12 
 0178  000C[                 C1 MONTAB DB 12 DUP (?)
 0178                        C          ORG     $-CONSTRT-12 
 0178  1F                    C          DB      31                      ; Janua
				ry 
 0179  1C                    C          DB      28                      ; Febru
				ary--reset each 
                             C  					; time year changes 
 017A  1F                    C          DB      31                      ; March
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-74
Initialized data and data used at DOS initialization        

 017B  1E                    C          DB      30                      ; April
				 
 017C  1F                    C          DB      31                      ; May 
 017D  1E                    C          DB      30                      ; June 
 017E  1F                    C          DB      31                      ; July 
 017F  1F                    C          DB      31                      ; Augus
				t 
 0180  1E                    C          DB      30                      ; Septe
				mber 
 0181  1F                    C          DB      31                      ; Octob
				er 
 0182  1E                    C          DB      30                      ; Novem
				ber 
 0183  1F                    C          DB      31                      ; Decem
				ber 
                             C   
                             C          IF      NOT IBM 
                             C          PUBLIC  OEM_HANDLER 
 0184  FF FF FF FF           C  OEM_HANDLER     DD      -1 
                             C          ENDIF 
                             C   
                             C  ;WARNING For HIGHMEM version, these two vars mu
				st be at the end of the 
                             C  ; Constants segment to prevent them getting ove
				rwritten. 
                             C          I_AM    CurrentPDB,WORD 
 0188  ????                  C1 CurrentPDB DW ?
                             C          i_am    CreatePDB,BYTE          ; flag 
				for creating a process 
 018A  ??                    C1 CreatePDB DB ?
                             C   
                             C          PUBLIC  LEAVEADDR 
 018B                        C  LEAVEADDR LABEL WORD 
                             C          short_addr    LEAVE 
 018B  0000 E                C1  DW OFFSET DOSGROUP:LEAVE
                             C   
 018D                        C  CONSTANTS       ENDS 
                             C   
                             C  SUBTTL Uninitialized data overlayed by initiali
				zation code 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-75
Uninitialized data overlayed by initialization code         

                             C  PAGE 
 0000                        C  DATA    SEGMENT WORD PUBLIC 'DATA' 
                             C  ; Init code overlaps with data area below 
                             C   
 0000                        C          ORG     0 
                             C          i_am    INBUF,128 
 0000  0080[                 C1 INBUF DB 128 DUP (?)
                             C          I_AM    CONBUF,131              ; The r
				est of INBUF and console buffer 
 0080  0083[                 C1 CONBUF DB 131 DUP (?)
                             C          i_am    TIMEBUF,6 
 0103  0006[                 C1 TIMEBUF DB 6 DUP (?)
                             C          I_AM    DEVIOBUF,2              ; Buffe
				r for I/O under file assignment 
 0109  0002[                 C1 DEVIOBUF DB 2 DUP (?)
                             C          I_AM    EXITHOLD,DWORD 
 010B  ????????              C1 EXITHOLD DD ?
                             C   
                             C          PUBLIC  DevFCB 
 010F                        C  DEVFCB  LABEL   BYTE                ; Uses NAME
				1, NAME2, NAME3 combined 
                             C  ; WARNING..  do not alter size or relative loca
				tion of the following 4 items 
                             C  ; without first examining FCB_RENAME 
                             C          I_AM    NAME1,12                ; File 
				name buffer 
 010F  000C[                 C1 NAME1 DB 12 DUP (?)
                             C          I_AM    ATTRIB,BYTE 
 011B  ??                    C1 ATTRIB DB ?
                             C          I_AM    NAME2,13 
 011C  000D[                 C1 NAME2 DB 13 DUP (?)
                             C          I_AM    NAME3,14 
 0129  000E[                 C1 NAME3 DB 14 DUP (?)
                             C   
                             C          I_AM    EXTFCB,BYTE 
 0137  ??                    C1 EXTFCB DB ?
                             C   
                             C  ; WARNING - the following two items are accesse
				d as a word 
                             C          I_AM    CREATING,BYTE 
 0138  ??                    C1 CREATING DB ?
                             C          I_AM    DELALL,BYTE 
 0139  ??                    C1 DELALL DB ?
                             C   
                             C          I_AM    FoundDel,BYTE 
 013A  ??                    C1 FoundDel DB ?
                             C   
                             C          I_AM    user_SP,WORD 
 013B  ????                  C1 user_SP DW ?
                             C          I_AM    user_SS,WORD 
 013D  ????                  C1 user_SS DW ?
                             C          I_AM    CONTSTK,WORD 
 013F  ????                  C1 CONTSTK DW ?
                             C          I_AM    SECCLUSPOS,BYTE         ; Posit
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-76
Uninitialized data overlayed by initialization code         

				ion of first sector 
 0141  ??                    C1 SECCLUSPOS DB ?
                             C  					; within cluster 
                             C          I_AM    DSKERR,BYTE 
 0142  ??                    C1 DSKERR DB ?
                             C          I_AM    TRANS,BYTE 
 0143  ??                    C1 TRANS DB ?
                             C          I_AM    READOP,BYTE 
 0144  ??                    C1 READOP DB ?
                             C          I_AM    THISDRV,BYTE 
 0145  ??                    C1 THISDRV DB ?
                             C          I_AM    THISDPB,DWORD 
 0146  ????????              C1 THISDPB DD ?
                             C          I_AM    CLUSFAC,BYTE 
 014A  ??                    C1 CLUSFAC DB ?
                             C   
                             C  ; WARNING - the following two items are accesse
				d as a word 
                             C          I_AM    DRIVESPEC,BYTE 
 014B  ??                    C1 DRIVESPEC DB ?
                             C          I_AM    ROOTSTART,BYTE 
 014C  ??                    C1 ROOTSTART DB ?
                             C   
                             C          I_AM    CLUSSPLIT,BYTE 
 014D  ??                    C1 CLUSSPLIT DB ?
                             C          i_am    INSMODE,BYTE 
 014E  ??                    C1 INSMODE DB ?
                             C          I_AM    CLUSSAVE,WORD 
 014F  ????                  C1 CLUSSAVE DW ?
                             C          I_AM    CLUSSEC,WORD 
 0151  ????                  C1 CLUSSEC DW ?
                             C          I_AM    PREREAD,WORD            ; 0 mea
				ns preread; 1 means optional 
 0153  ????                  C1 PREREAD DW ?
                             C          I_AM    FATBYT,WORD 
 0155  ????                  C1 FATBYT DW ?
                             C          I_AM    DEVPT,DWORD 
 0157  ????????              C1 DEVPT DD ?
                             C          I_AM    THISFCB,DWORD           ; Addre
				ss of user FCB 
 015B  ????????              C1 THISFCB DD ?
                             C   
                             C          I_AM    NEXTADD,WORD 
 015F  ????                  C1 NEXTADD DW ?
                             C          I_AM    RECPOS,4 
 0161  0004[                 C1 RECPOS DB 4 DUP (?)
                             C          I_AM    RECCNT,WORD 
 0165  ????                  C1 RECCNT DW ?
                             C          I_AM    LASTPOS,WORD 
 0167  ????                  C1 LASTPOS DW ?
                             C          I_AM    CLUSNUM,WORD 
 0169  ????                  C1 CLUSNUM DW ?
                             C          I_AM    DIRSEC,WORD 
 016B  ????                  C1 DIRSEC DW ?
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-77
Uninitialized data overlayed by initialization code         

                             C          I_AM    DIRSTART,WORD 
 016D  ????                  C1 DIRSTART DW ?
                             C          I_AM    SECPOS,WORD             ; Posit
				ion of first sector accessed 
 016F  ????                  C1 SECPOS DW ?
                             C          I_AM    VALSEC,WORD             ; Numbe
				r of valid (previously written) 
 0171  ????                  C1 VALSEC DW ?
                             C  					; sectors 
                             C          I_AM    BYTSECPOS,WORD          ; Posit
				ion of first byte within sector 
 0173  ????                  C1 BYTSECPOS DW ?
                             C          I_AM    BYTPOS,4                ; Byte 
				position in file of access 
 0175  0004[                 C1 BYTPOS DB 4 DUP (?)
                             C          I_AM    BYTCNT1,WORD            ; No. o
				f bytes in first sector 
 0179  ????                  C1 BYTCNT1 DW ?
                             C          I_AM    BYTCNT2,WORD            ; No. o
				f bytes in last sector 
 017B  ????                  C1 BYTCNT2 DW ?
                             C          I_AM    SECCNT,WORD             ; No. o
				f whole sectors 
 017D  ????                  C1 SECCNT DW ?
                             C          I_AM    ENTFREE,WORD 
 017F  ????                  C1 ENTFREE DW ?
                             C          I_AM    ENTLAST,WORD 
 0181  ????                  C1 ENTLAST DW ?
                             C          I_AM    NXTCLUSNUM,WORD 
 0183  ????                  C1 NXTCLUSNUM DW ?
                             C          I_AM    GROWCNT,DWORD 
 0185  ????????              C1 GROWCNT DD ?
                             C          I_AM    CURBUF,DWORD 
 0189  ????????              C1 CURBUF DD ?
                             C          I_AM    VOLID,BYTE 
 018D  ??                    C1 VOLID DB ?
                             C          I_AM    NULLDEVPT,DWORD 
 018E  ????????              C1 NULLDEVPT DD ?
                             C          I_AM    CINSAV,DWORD 
 0192  ????????              C1 CINSAV DD ?
                             C          I_AM    CINDSAV,BYTE 
 0196  ??                    C1 CINDSAV DB ?
                             C          I_AM    COUTDSAV,BYTE 
 0197  ??                    C1 COUTDSAV DB ?
                             C          I_AM    COUTSAV,DWORD 
 0198  ????????              C1 COUTSAV DD ?
                             C          PUBLIC  SaveBX 
 019C  ????                  C  SaveBX  DW      ? 
                             C          PUBLIC  SaveDS 
 019E  ????                  C  SaveDS  DW      ? 
                             C          I_AM    ConC_spsave,WORD 
 01A0  ????                  C1 ConC_spsave DW ?
                             C   
                             C          I_AM    exit_code,WORD              ; e
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-78
Uninitialized data overlayed by initialization code         

				xit code of last proc. 
 01A2  ????                  C1 exit_code DW ?
                             C          I_am    exit_type,BYTE              ; t
				ype of exit... 
 01A4  ??                    C1 exit_type DB ?
                             C   
                             C          ENDIF 
                             C   
                             C  ; make those pushes fast!!! 
 01A5  90                    C  EVEN 
 01A6  00A0[                 C          DB      0A0H DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C          I_am    AuxStack,0A0h 
 0246  00A0[                 C1 AuxStack DB 0A0h DUP (?)
                             C          I_AM    DSKSTACK,0A0h        ; Stack sp
				ace 
 02E6  00A0[                 C1 DSKSTACK DB 0A0h DUP (?)
                             C          PUBLIC  IOSTACK 
 0386                        C  IOSTACK LABEL   BYTE 
                             C   
                             C          PUBLIC  NSS 
 0386  ????                  C  NSS         DW      ? 
                             C          PUBLIC  NSP 
 0388  ????                  C  NSP         DW      ? 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-79
Uninitialized data overlayed by initialization code         

                             C  PAGE 
                             C          INCLUDE MSINIT.ASM 
                             C  ; TITLE MSINIT.ASM -- MS-DOS INITIALIZATION COD
				E 
                             C   
 0000                        C          ORG     0                       ; reset
				 to beginning of data segment 
                             C  ; Init code below overlaps with data area 
                             C   
 0000  0110[                 C  INITBLOCK DB    110H DUP(0)     ; Allow for seg
				ment round up 
            00               C  
                         ]   C  
                             C  
                             C   
 0110  ????                  C  INITSP  DW      ? 
 0112  ????                  C  INITSS  DW      ? 
 0114  ????                  C  BUFFSTRT DW     ? 
                             C   
                             C  ASSUME  CS:DOSGROUP,DS:DOSGROUP,ES:DOSGROUP,SS:
				NOTHING 
                             C   
                             C          EXTRN   QUIT:NEAR,IRET:NEAR,ABSDRD:FAR,
				ABSDWRT:FAR 
                             C          EXTRN   COMMAND:NEAR,CALL_ENTRY:NEAR 
                             C          IF      NOT IBM 
                             C          EXTRN   HEADER:BYTE 
                             C          ENDIF 
                             C   
 0116                        C  MOVDPB: 
                             C  ; This section of code is safe from being overw
				ritten by block move 
 0116  2E: 8B 26 0110 R      C          MOV     SP,CS:[INITSP] 
 011B  2E: 8E 16 0112 R      C          MOV     SS,CS:[INITSS] 
 0120  F3/ A4                C          REP     MOVS    BYTE PTR [DI],[SI] 
 0122  FC                    C          CLD 
 0123  26: 89 16 00DE R      C          MOV     WORD PTR ES:[DMAADD+2],DX 
 0128  8B 36 00ED R          C          MOV     SI,WORD PTR [DPBHEAD]   ; Addre
				ss of first DPB 
 012C  26: 8C 06 00EF R      C          MOV     WORD PTR ES:[DPBHEAD+2],ES 
 0131  26: 8C 06 00F3 R      C          MOV     WORD PTR ES:[sft_addr+2],ES 
 0136  8A 0E 00FD R          C          MOV     CL,[NUMIO]      ; Number of DPB
				s 
 013A  32 ED                 C          XOR     CH,CH 
 013C                        C  SETFINDPB: 
 013C  26: 8C 44 1A          C          MOV     WORD PTR ES:[SI.dpb_next_dpb+2]
				,ES 
 0140  26: C6 44 17 FF       C          MOV     ES:[SI.dpb_first_access],-1    
				  ; Never accessed before 
 0145  83 C6 5E              C          ADD     SI,DPBSIZ       ; Point to next
				 DPB 
 0148  E2 F2                 C          LOOP    SETFINDPB 
 014A  83 EE 5E              C          SUB     SI,DPBSIZ 
 014D  26: C7 44 1A FFFF     C          MOV     WORD PTR ES:[SI.dpb_next_dpb+2]
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-80
Uninitialized data overlayed by initialization code         

				,-1 
 0153  8B 3E 0114 R          C          MOV     DI,[BUFFSTRT]                  
				 ; Set up one default buffer 
 0157  26: 8C 06 0102 R      C          MOV     WORD PTR ES:[BUFFHEAD+2],ES 
 015C  26: 89 3E 0100 R      C          MOV     WORD PTR ES:[BUFFHEAD],DI 
 0161  26: C7 45 04 00FF     C          MOV     WORD PTR ES:[DI.BUFDRV],00FFH 
 0167  26: C6 45 06 00       C          MOV     ES:[DI.BUFPRI],FREEPRI 
 016C  26: C7 05 FFFF        C          MOV     WORD PTR ES:[DI.NEXTBUF],-1 
 0171  26: C7 45 02 FFFF     C          MOV     WORD PTR ES:[DI.NEXTBUF+2],-1 
 0177  06                    C          PUSH    ES 
 0178  42                    C          INC     DX                          ; L
				eave enough room for the ARENA 
 0179  C6 06 018A R FF       C          MOV     BYTE PTR [CreatePDB],0FFh   ; c
				reate jfns and set CurrentPDB 
                             C          invoke  $CREATE_PROCESS_DATA_BLOCK     
				; Set up segment 
 017E  E8 0000 E             C1  CALL $CREATE_PROCESS_DATA_BLOCK
                             C  ASSUME  DS:NOTHING,ES:NOTHING 
 0181  07                    C          POP     ES 
                             C  ASSUME  ES:DOSGROUP 
                             C   
                             C  ; 
                             C  ; set up memory arena 
                             C  ;SPECIAL NOTE FOR HIGHMEM VERSION 
                             C  ; At this point a process header has been built
				 where the start of the 
                             C  ; CONSTANTS segment as refed by CS is. From thi
				s point until the return 
                             C  ; below be careful about references off of CS. 
                             C  ; 
 0182  50                    C          PUSH    AX 
 0183  26: A1 0188 R         C          MOV     AX,[CurrentPDB] 
 0187  26: A3 0188 R         C          MOV     ES:[CurrentPDB],AX         ; Pu
				t it in the REAL location 
 018B  26: C6 06 018A R 00   C          MOV     BYTE PTR ES:[CreatePDB],0h ; re
				set flag in REAL location 
 0191  48                    C          DEC     AX 
 0192  26: A3 00EB R         C          MOV     ES:[arena_head],AX 
 0196  1E                    C          PUSH    DS 
 0197  8E D8                 C          MOV     DS,AX 
 0199  C6 06 0000 5A         C          MOV     DS:[arena_signature],arena_sign
				ature_end 
 019E  C7 06 0001 0000       C          MOV     DS:[arena_owner],arena_owner_sy
				stem 
 01A4  26: 2B 06 00E0 R      C          SUB     AX,ES:[ENDMEM] 
 01A9  F7 D8                 C          NEG     AX 
 01AB  48                    C          DEC     AX 
 01AC  A3 0003               C          MOV     DS:[arena_size],AX 
 01AF  1F                    C          POP     DS 
 01B0  58                    C          POP     AX 
                             C   
 01B1  BF 000A R             C          MOV     DI,OFFSET DOSGROUP:sftabl + sft
				_table   ; Point to sft 0 
 01B4  B0 03                 C          MOV     AL,3 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-81
Uninitialized data overlayed by initialization code         

 01B6  AA                    C          STOSB           ; Adjust Refcount 
 01B7  BF 00ED R             C          MOV     DI,OFFSET DOSGROUP:SYSINITVAR 
                             C   
 01BA                        C  XXX     PROC FAR 
 01BA  CB                    C          RET 
                             C  XXX     ENDP 
 01BB                        C  DATA    ENDS 
                             C   
                             C  ; the next segment defines a new class that MUS
				T appear last in the link map. 
                             C  ; This defines several important locations for 
				the initialization process that 
                             C  ; must be the first available locations of free
				 memory. 
                             C   
 0000                        C  LAST    SEGMENT BYTE PUBLIC 'LAST' 
                             C          PUBLIC  SYSBUF 
                             C          PUBLIC  MEMSTRT 
                             C   
 0000                        C  SYSBUF  LABEL   WORD 
                             C  ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NO
				THING 
                             C   
 0000                        C  DOSINIT: 
 0000  FA                    C          CLI 
 0001  FC                    C          CLD 
 0002  2E: 89 16 00E0 R      C          MOV     [ENDMEM],DX 
 0007  2E: 89 26 0110 R      C          MOV     [INITSP],SP 
 000C  2E: 8C 16 0112 R      C          MOV     [INITSS],SS 
 0011  BC 02B5 R             C          MOV     SP,OFFSET DOSGROUP:INITSTACK 
 0014  8C C8                 C          MOV     AX,CS 
 0016  8E D0                 C          MOV     SS,AX 
                             C  ASSUME  SS:DOSGROUP 
 0018  36: 8C 1E 0106 R      C          MOV     WORD PTR [DEVHEAD+2],DS 
 001D  36: 89 36 0104 R      C          MOV     WORD PTR [DEVHEAD],SI   ; DS:SI
				 Points to CONSOLE Device 
 0022  E8 020D R             C          CALL    CHARINIT 
 0025  56                    C          PUSH    SI 
 0026  83 C6 0A              C          ADD     SI,SDEVNAME             ; Point
				 to name 
 0029  0E                    C          PUSH    CS 
 002A  07                    C          POP     ES 
                             C  ASSUME  ES:DOSGROUP 
 002B  BF 000A R             C          MOV     DI,OFFSET DOSGROUP:sftabl + sft
				_table   ; Point to sft 0 
 002E  B0 03                 C          MOV     AL,3 
 0030  AA                    C          STOSB           ; Refcount 
 0031  FE C8                 C          DEC     AL 
 0033  AA                    C          STOSB           ; Access rd/wr 
 0034  32 C0                 C          XOR     AL,AL 
 0036  AA                    C          STOSB           ; Drive byte 
 0037  AA                    C          STOSB           ; attribute 
 0038  B9 0004               C          MOV     CX,4 
 003B  F3/ A5                C          REP     MOVSW   ; Name 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-82
Uninitialized data overlayed by initialization code         

 003D  B1 03                 C          MOV     CL,3 
 003F  B0 20                 C          MOV     AL," " 
 0041  F3/ AA                C          REP     STOSB   ; Extension 
 0043  83 C7 0C              C          ADD     DI,12   ; Skip 
 0046  B0 C3                 C          MOV     AL,0C0H OR ISCIN OR ISCOUT 
 0048  AA                    C          STOSB 
 0049  5E                    C          POP     SI 
 004A  8B C6                 C          MOV     AX,SI 
 004C  AB                    C          STOSW                   ; Device pointe
				r in FIRCLUS 
 004D  8C D8                 C          MOV     AX,DS 
 004F  AB                    C          STOSW 
 0050  80 4C 04 03           C          OR      BYTE PTR [SI.SDEVATT],ISCIN OR 
				ISCOUT 
 0054  36: 89 36 00F9 R      C          MOV     WORD PTR [BCON],SI 
 0059  36: 8C 1E 00FB R      C          MOV     WORD PTR [BCON+2],DS 
 005E                        C  CHAR_INIT_LOOP: 
 005E  C5 34                 C          LDS     SI,DWORD PTR [SI]              
				 ; AUX device 
 0060  E8 020D R             C          CALL    CHARINIT 
 0063  F6 44 04 08           C          TEST    BYTE PTR [SI.SDEVATT],ISCLOCK 
 0067  74 F5                 C          JZ      CHAR_INIT_LOOP 
 0069  36: 89 36 00F5 R      C          MOV     WORD PTR [BCLOCK],SI 
 006E  36: 8C 1E 00F7 R      C          MOV     WORD PTR [BCLOCK+2],DS 
 0073  BD 02B7 R             C          MOV     BP,OFFSET DOSGROUP:MEMSTRT     
				 ; ES:BP points to DPB 
 0076                        C  PERDRV: 
 0076  C5 34                 C          LDS     SI,DWORD PTR [SI]              
				 ; Next device 
 0078  83 FE FF              C          CMP     SI,-1 
 007B  74 68                 C          JZ      CONTINIT 
 007D  E8 020D R             C          CALL    CHARINIT 
 0080  F7 44 04 8000         C          TEST    [SI.SDEVATT],DEVTYP 
 0085  75 EF                 C          JNZ     PERDRV                         
				 ; Skip any other character devs 
 0087  36: 8A 0E 0137 R      C          MOV     CL,[CALLUNIT] 
 008C  32 ED                 C          XOR     CH,CH 
 008E  88 4C 0A              C          MOV     [SI.SDEVNAME],CL               
				 ; Number of units in name field 
 0091  36: 8A 16 00FD R      C          MOV     DL,[NUMIO] 
 0096  32 F6                 C          XOR     DH,DH 
 0098  36: 00 0E 00FD R      C          ADD     [NUMIO],CL 
 009D  1E                    C          PUSH    DS 
 009E  56                    C          PUSH    SI 
 009F  36: C5 1E 013C R      C          LDS     BX,[CALLBPB] 
 00A4                        C  PERUNIT: 
 00A4  8B 37                 C          MOV     SI,[BX]                 ; DS:SI
				 Points to BPB 
 00A6  43                    C          INC     BX 
 00A7  43                    C          INC     BX                      ; On to
				 next BPB 
 00A8  26: 88 56 00          C          MOV     ES:[BP.dpb_drive],DL 
 00AC  26: 88 76 01          C          MOV     ES:[BP.dpb_UNIT],DH 
 00B0  53                    C          PUSH    BX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-83
Uninitialized data overlayed by initialization code         

 00B1  51                    C          PUSH    CX 
 00B2  52                    C          PUSH    DX 
                             C          invoke  $SETDPB 
 00B3  E8 0000 E             C1  CALL $SETDPB
 00B6  26: 8B 46 02          C          MOV     AX,ES:[BP.dpb_sector_size] 
 00BA  36: 3B 06 00FE R      C          CMP     AX,[MAXSEC] 
 00BF  76 04                 C          JBE     NOTMAX 
 00C1  36: A3 00FE R         C          MOV     [MAXSEC],AX 
 00C5                        C  NOTMAX: 
 00C5  5A                    C          POP     DX 
 00C6  59                    C          POP     CX 
 00C7  5B                    C          POP     BX 
 00C8  8C D8                 C          MOV     AX,DS                   ; Save 
				DS 
 00CA  5E                    C          POP     SI 
 00CB  1F                    C          POP     DS 
 00CC  26: 89 76 12          C          MOV     WORD PTR ES:[BP.dpb_driver_addr
				],SI 
 00D0  26: 8C 5E 14          C          MOV     WORD PTR ES:[BP.dpb_driver_addr
				+2],DS 
 00D4  1E                    C          PUSH    DS 
 00D5  56                    C          PUSH    SI 
 00D6  FE C6                 C          INC     DH 
 00D8  FE C2                 C          INC     DL 
 00DA  8E D8                 C          MOV     DS,AX 
 00DC  83 C5 5E              C          ADD     BP,DPBSIZ 
 00DF  E2 C3                 C          LOOP    PERUNIT 
 00E1  5E                    C          POP     SI 
 00E2  1F                    C          POP     DS 
 00E3  EB 91                 C          JMP     PERDRV 
                             C   
 00E5                        C  CONTINIT: 
 00E5  0E                    C          PUSH    CS 
 00E6  1F                    C          POP     DS 
                             C  ASSUME  DS:DOSGROUP 
                             C  ; Calculate true address of buffers, FATs, free
				 space 
 00E7  8B FD                 C          MOV     DI,BP           ; First byte af
				ter current DPBs 
 00E9  8B 2E 00FE R          C          MOV     BP,[MAXSEC] 
 00ED  B8 0000 R             C          MOV     AX,OFFSET DOSGROUP:SYSBUF 
 00F0  A3 0114 R             C          MOV     [BUFFSTRT],AX 
 00F3  03 C5                 C          ADD     AX,BP           ; One I/O buffe
				r 
 00F5  05 0010               C          ADD     AX,BUFINSIZ 
 00F8  A3 00ED R             C          MOV     WORD PTR [DPBHEAD],AX      ; Tr
				ue start of DPBs 
 00FB  8B D0                 C          MOV     DX,AX 
 00FD  81 EA 0000 R          C          SUB     DX,OFFSET DOSGROUP:SYSBUF 
 0101  8B EA                 C          MOV     BP,DX 
 0103  03 EF                 C          ADD     BP,DI           ; Allocate buff
				er space 
 0105  81 ED 02B7            C          SUB     BP,ADJFAC       ; True address 
				of free memory 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-84
Uninitialized data overlayed by initialization code         

 0109  55                    C          PUSH    BP 
 010A  BF 02B7 R             C          MOV     DI,OFFSET DOSGROUP:MEMSTRT    ;
				 Current start of DPBs 
 010D  83 C7 18              C          ADD     DI,dpb_next_dpb      ; Point at
				 dpb_next_dpb field 
 0110  8A 0E 00FD R          C          MOV     CL,[NUMIO] 
 0114  32 ED                 C          XOR     CH,CH 
 0116                        C  TRUEDPBAD: 
 0116  05 005E               C          ADD     AX,DPBSIZ       ; Compute addre
				ss of next DPB 
 0119  AB                    C          STOSW                   ; Set the link 
				to next DPB 
 011A  83 C7 5C              C          ADD     DI,DPBSIZ-2     ; Point at next
				 address 
 011D  E2 F7                 C          LOOP    TRUEDPBAD 
 011F  83 EF 5E              C          SUB     DI,DPBSIZ       ; Point at last
				 dpb_next_dpb field 
 0122  B8 FFFF               C          MOV     AX,-1 
 0125  AB                    C          STOSW                   ; End of list 
 0126  83 C5 0F              C          ADD     BP,15           ;True start of 
				free space (round up to segment) 
 0129  B1 04                 C          MOV     CL,4 
 012B  D3 ED                 C          SHR     BP,CL           ; Number of seg
				ments for DOS resources 
 012D  8C CA                 C          MOV     DX,CS 
 012F  03 D5                 C          ADD     DX,BP           ; First free se
				gment 
 0131  BB 000F               C          MOV     BX,0FH 
 0134  8B 0E 00E0 R          C          MOV     CX,[ENDMEM] 
                             C   
                             C          ENDIF 
                             C   
                             C          IF      NOT HIGHMEM 
 0138  8C CD                 C          MOV     BP,CS 
                             C          ENDIF 
                             C   
                             C  ; BP has segment of DOS (whether to load high o
				r run in place) 
                             C  ; DX has program segment (whether after DOS or 
				overlaying DOS) 
                             C  ; CX has size of memory in paragraphs (reduced 
				by DOS size if HIGHMEM) 
 013A  89 0E 00E0 R          C          MOV     [ENDMEM],CX 
 013E  8E C5                 C          MOV     ES,BP 
                             C  ASSUME  ES:DOSGROUP 
                             C   
                             C          ENDIF 
                             C   
 0140  26: 8C 06 016A R      C          MOV     WORD PTR ES:[DSKCHRET+3],ES 
 0145  33 C0                 C          XOR     AX,AX 
 0147  8E D8                 C          MOV     DS,AX 
 0149  8E C0                 C          MOV     ES,AX 
                             C  ASSUME  DS:NOTHING,ES:NOTHING 
 014B  BF 0082               C          MOV     DI,INTBASE+2 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-85
Uninitialized data overlayed by initialization code         

 014E  8B C5                 C          MOV     AX,BP 
 0150  C6 06 00C0 EA         C          MOV     BYTE PTR DS:[ENTRYPOINT],mi_Lon
				g_JMP 
 0155  C7 06 00C1 0000 E     C          MOV     WORD PTR DS:[ENTRYPOINT+1],OFFS
				ET DOSGROUP:CALL_ENTRY 
 015B  A3 00C3               C          MOV     WORD PTR DS:[ENTRYPOINT+3],AX 
                             C          EXTRN   DIVOV:near 
 015E  C7 06 0000 0000 E     C          MOV     WORD PTR DS:[0],OFFSET DOSGROUP
				:DIVOV   ; Set default divide 
                             C  							; trap address 
 0164  A3 0002               C          MOV     DS:[2],AX 
 0167  B9 0011               C          MOV     CX,17 
 016A  F3/ AB                C          REP STOSW               ; Set 9 segment
				s (skip 2 between each) 
                             C   
                             C          ENDIF 
                             C   
 016C  C7 06 0080 0000 E     C          MOV     WORD PTR DS:[addr_int_abort],OF
				FSET DOSGROUP:QUIT 
 0172  C7 06 0084 0000 E     C          MOV     WORD PTR DS:[addr_int_command],
				OFFSET DOSGROUP:COMMAND 
 0178  C7 06 0088 0100       C          MOV     WORD PTR DS:[addr_int_terminate
				],100H 
 017E  89 16 008A            C          MOV     WORD PTR DS:[addr_int_terminate
				+2],DX 
 0182  C7 06 008C 0000 E     C          MOV     WORD PTR DS:[addr_int_ctrl_c],O
				FFSET DOSGROUP:IRET 
                             C  							; Ctrl-C exit 
 0188  C7 06 0090 0000 E     C          MOV     WORD PTR DS:[addr_int_fatal_abo
				rt],OFFSET DOSGROUP:IRET 
                             C  							; Fatal error exit 
 018E  C7 06 0094 0000 E     C          MOV     WORD PTR DS:[addr_int_disk_read
				],OFFSET DOSGROUP:ABSDRD 
                             C  							; INT 25 
 0194  C7 06 0098 0000 E     C          MOV     WORD PTR DS:[addr_int_disk_writ
				e],OFFSET DOSGROUP:ABSDWRT 
                             C  							; INT 26 
                             C          EXTRN   Stay_resident:NEAR 
 019A  C7 06 009C 0000 E     C          MOV     WORD PTR DS:[addr_int_keep_proc
				ess],OFFSET DOSGROUP:Stay_resident 
 01A0  C7 06 00A0 0000 E     C          MOV     WORD PTR DS:[addr_int_spooler],
				OFFSET DOSGROUP:IRET  ; Spooler 
                             C   
                             C          IF      NOT ALTVECT 
 01A6  B9 000C               C          MOV     CX,12 
 01A9  33 C0                 C          XOR     AX,AX 
 01AB  BF 00A8               C          MOV     DI,2AH*4 
 01AE  F3/ AB                C          REP     STOSW           ;Zero interrupt
				 locs for ints 2AH-2FH 
                             C          ENDIF 
                             C   
 01B0  0E                    C          PUSH    CS 
 01B1  1F                    C          POP     DS 
 01B2  0E                    C          PUSH    CS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-86
Uninitialized data overlayed by initialization code         

 01B3  07                    C          POP     ES 
                             C  ASSUME  DS:DOSGROUP,ES:DOSGROUP 
 01B4  B8 0000 R             C          MOV     AX,OFFSET DOSGROUP:INITBLOCK 
 01B7  05 000F               C          ADD     AX,0Fh                  ; round
				 to a paragraph 
 01BA  B1 04                 C          MOV     CL,4 
 01BC  D3 E8                 C          SHR     AX,CL 
 01BE  8C DF                 C          MOV     DI,DS 
 01C0  03 F8                 C          ADD     DI,AX 
 01C2  47                    C          INC     DI 
 01C3  89 3E 0188 R          C          MOV     [CurrentPDB],DI 
 01C7  55                    C          PUSH    BP 
 01C8  52                    C          PUSH    DX              ; Save COMMAND 
				address 
 01C9  A1 00E0 R             C          MOV     AX,[ENDMEM] 
 01CC  8B D7                 C          MOV     DX,DI 
                             C   
                             C          invoke    SETMEM          ; Basic Heade
				r 
 01CE  E8 0000 E             C1  CALL SETMEM
                             C  ASSUME  DS:NOTHING,ES:NOTHING 
 01D1  0E                    C          PUSH    CS 
 01D2  1F                    C          POP     DS 
                             C  ASSUME  DS:DOSGROUP 
 01D3  BF 0018               C          MOV     DI,PDB_JFN_Table 
 01D6  33 C0                 C          XOR     AX,AX 
 01D8  AB                    C          STOSW 
 01D9  AA                    C          STOSB                   ; 0,1 and 2 are
				 CON device 
 01DA  B0 FF                 C          MOV     AL,0FFH 
 01DC  B9 0011               C          MOV     CX,FilPerProc - 3 
 01DF  F3/ AA                C          REP     STOSB           ; Rest are unus
				ed 
 01E1  0E                    C          PUSH    CS 
 01E2  07                    C          POP     ES 
                             C  ASSUME  ES:DOSGROUP 
 01E3  8C 1E 00F3 R          C          MOV     WORD PTR [sft_addr+2],DS     ; 
				Must be set to print messages 
                             C   
                             C  ; After this points the char device functions f
				or CON will work for 
                             C  ; printing messages 
                             C   
                             C          IF      NOT IBM 
                             C          IF      NOT ALTVECT 
 01E7  BE 0000 E             C          MOV     SI,OFFSET DOSGROUP:HEADER 
                             C          invoke  OUTMES 
 01EA  E8 0000 E             C1  CALL OUTMES
 01ED  0E                    C          PUSH    CS                      ; Outme
				s stomps on segments 
 01EE  1F                    C          POP     DS 
 01EF  0E                    C          PUSH    CS 
 01F0  07                    C          POP     ES 
                             C          ENDIF 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-87
Uninitialized data overlayed by initialization code         

                             C          ENDIF 
                             C   
                             C  ; Move the FATs into position 
 01F1  5A                    C          POP     DX                      ; Resto
				re COMMAND address 
 01F2  5D                    C          POP     BP 
 01F3  59                    C          POP     CX                      ; True 
				address of free memory 
 01F4  BE 02B7 R             C          MOV     SI,OFFSET DOSGROUP:MEMSTRT     
				 ; Place to move DPBs from 
 01F7  8B 3E 00ED R          C          MOV     DI,WORD PTR [DPBHEAD]   ; Place
				 to move DPBs to 
 01FB  2B CF                 C          SUB     CX,DI                   ; Total
				 length of DPBs 
 01FD  3B FE                 C          CMP     DI,SI 
 01FF  76 07                 C          JBE     MOVJMP                  ; Are w
				e moving to higher or 
                             C  					; lower memory? 
 0201  49                    C          DEC     CX                      ; Move 
				backwards to higher memory 
 0202  03 F9                 C          ADD     DI,CX 
 0204  03 F1                 C          ADD     SI,CX 
 0206  41                    C          INC     CX 
 0207  FD                    C          STD 
 0208                        C  MOVJMP: 
 0208  8E C5                 C          MOV     ES,BP 
                             C  ASSUME  ES:DOSGROUP 
 020A  E9 0116 R             C          JMP     MOVDPB 
                             C   
 020D                        C  CHARINIT: 
                             C  ASSUME  DS:NOTHING,ES:NOTHING 
                             C  ; DS:SI Points to device header 
 020D  36: C6 06 012A R 1A   C          MOV     [DEVCALL.REQLEN],DINITHL 
 0213  36: C6 06 012B R 00   C          MOV     [DEVCALL.REQUNIT],0 
 0219  36: C6 06 012C R 00   C          MOV     [DEVCALL.REQFUNC],DEVINIT 
 021F  36: C7 06 012D R 0000 C          MOV     [DEVCALL.REQSTAT],0 
 0226  06                    C          PUSH    ES 
 0227  53                    C          PUSH    BX 
 0228  50                    C          PUSH    AX 
 0229  BB 012A R             C          MOV     BX,OFFSET DOSGROUP:DEVCALL 
 022C  0E                    C          PUSH    CS 
 022D  07                    C          POP     ES 
                             C          invoke  DEVIOCALL2 
 022E  E8 0000 E             C1  CALL DEVIOCALL2
 0231  58                    C          POP     AX 
 0232  5B                    C          POP     BX 
 0233  07                    C          POP     ES 
 0234  C3                    C          RET 
                             C   
 0235  0080[                 C          DB      80H DUP(?) 
            ??               C  
                         ]   C  
                             C  
 02B5                        C  INITSTACK LABEL BYTE 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Page     1-88
Uninitialized data overlayed by initialization code         

 02B5  ????                  C          DW      ? 
                             C   
 02B7                        C  MEMSTRT LABEL   WORD 
 = 02B7                      C  ADJFAC  EQU     MEMSTRT-SYSBUF 
                             C   
                             C          do_ext 
 02B7                        C  LAST    ENDS 
                             C   
                                 
                                 
                                        END 

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016

Segments and Groups:

                N a m e         	Size	Align	Combine Class

DOSGROUP . . . . . . . . . . . .  	GROUP
  CODE . . . . . . . . . . . . .  	0000	BYTE	PUBLIC	'CODE'
  CONSTANTS  . . . . . . . . . .  	018D	BYTE	PUBLIC	'CONST'
  DATA . . . . . . . . . . . . .  	038A	WORD	PUBLIC	'DATA'
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-5
                                                             

  LAST . . . . . . . . . . . . .  	02B7	BYTE	PUBLIC	'LAST'
START  . . . . . . . . . . . . .  	0003	BYTE	PUBLIC	'START'

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ABSDRD . . . . . . . . . . . . .  	L FAR 	0000	DATA	External
ABSDWRT  . . . . . . . . . . . .  	L FAR 	0000	DATA	External
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ADJFAC . . . . . . . . . . . . .  	Number	02B7	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCMETHOD  . . . . . . . . . .  	L BYTE 	00EA	CONSTANTS	Global
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALTVECT  . . . . . . . . . . . .  	Alias	 FALSE		
ARENA_HEAD . . . . . . . . . . .  	L WORD 	00EB	CONSTANTS	Global
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ATTRIB . . . . . . . . . . . . .  	L BYTE 	011B	DATA	Global
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	
AUXSTACK . . . . . . . . . . . .  	L BYTE 	0246	DATA	Global	Length = 00A0

BCLOCK . . . . . . . . . . . . .  	L DWORD	00F5	CONSTANTS	Global
BCON . . . . . . . . . . . . . .  	L DWORD	00F9	CONSTANTS	Global
BESTARENA  . . . . . . . . . . .  	L WORD 	00E6	CONSTANTS	Global
BUFFHEAD . . . . . . . . . . . .  	L DWORD	0100	CONSTANTS	Global
BUFFSTRT . . . . . . . . . . . .  	L WORD 	0114	DATA
BUFINSIZ . . . . . . . . . . . .  	Number	0010	
BYTCNT1  . . . . . . . . . . . .  	L WORD 	0179	DATA	Global
BYTCNT2  . . . . . . . . . . . .  	L WORD 	017B	DATA	Global
BYTPOS . . . . . . . . . . . . .  	L BYTE 	0175	DATA	Global	Length = 0004
BYTSECPOS  . . . . . . . . . . .  	L WORD 	0173	DATA	Global
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-6
                                                             


CALLBPB  . . . . . . . . . . . .  	L DWORD	013C	CONSTANTS	Global
CALLBR . . . . . . . . . . . . .  	L DWORD	0138	CONSTANTS
CALLDEVAD  . . . . . . . . . . .  	L DWORD	0140	CONSTANTS	Global
CALLFLSH . . . . . . . . . . . .  	L WORD 	0137	CONSTANTS
CALLMED  . . . . . . . . . . . .  	L BYTE 	0137	CONSTANTS	Global
CALLRBYT . . . . . . . . . . . .  	L BYTE 	0138	CONSTANTS	Global
CALLSCNT . . . . . . . . . . . .  	L WORD 	013C	CONSTANTS	Global
CALLSSEC . . . . . . . . . . . .  	L WORD 	013E	CONSTANTS
CALLUNIT . . . . . . . . . . . .  	L BYTE 	0137	CONSTANTS
CALLXAD  . . . . . . . . . . . .  	L DWORD	0138	CONSTANTS	Global
CALL_ENTRY . . . . . . . . . . .  	L NEAR	0000	DATA	External
CANCEL . . . . . . . . . . . . .  	Number	0018	
CARPOS . . . . . . . . . . . . .  	L BYTE 	00D5	CONSTANTS	Global
CHARCO . . . . . . . . . . . . .  	L BYTE 	00DB	CONSTANTS	Global
CHARINIT . . . . . . . . . . . .  	L NEAR	020D	LAST
CHAR_INIT_LOOP . . . . . . . . .  	L NEAR	005E	LAST
CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CINDSAV  . . . . . . . . . . . .  	L BYTE 	0196	DATA	Global
CINSAV . . . . . . . . . . . . .  	L DWORD	0192	DATA	Global
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
CLUSFAC  . . . . . . . . . . . .  	L BYTE 	014A	DATA	Global
CLUSNUM  . . . . . . . . . . . .  	L WORD 	0169	DATA	Global
CLUSSAVE . . . . . . . . . . . .  	L WORD 	014F	DATA	Global
CLUSSEC  . . . . . . . . . . . .  	L WORD 	0151	DATA	Global
CLUSSPLIT  . . . . . . . . . . .  	L BYTE 	014D	DATA	Global
CNTCFLAG . . . . . . . . . . . .  	L BYTE 	0125	CONSTANTS	Global
COMMAND  . . . . . . . . . . . .  	L NEAR	0000	DATA	External
CONBUF . . . . . . . . . . . . .  	L BYTE 	0080	DATA	Global	Length = 0083
CONC_SPSAVE  . . . . . . . . . .  	L WORD 	01A0	DATA	Global
CONSTRT  . . . . . . . . . . . .  	NEAR 	0000	CONSTANTS
CONSWAP  . . . . . . . . . . . .  	L BYTE 	0123	CONSTANTS	Global
CONTINIT . . . . . . . . . . . .  	L NEAR	00E5	LAST
CONTPOS  . . . . . . . . . . . .  	L WORD 	00D9	CONSTANTS	Global
CONTSTK  . . . . . . . . . . . .  	L WORD 	013F	DATA	Global
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
COUTDSAV . . . . . . . . . . . .  	L BYTE 	0197	DATA	Global
COUTSAV  . . . . . . . . . . . .  	L DWORD	0198	DATA	Global
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATEPDB  . . . . . . . . . . .  	L BYTE 	018A	CONSTANTS	Global
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREATING . . . . . . . . . . . .  	L BYTE 	0138	DATA	Global
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-7
                                                             

CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURBUF . . . . . . . . . . . . .  	L DWORD	0189	DATA	Global
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURDRV . . . . . . . . . . . . .  	L BYTE 	011D	CONSTANTS	Global
CURRENTPDB . . . . . . . . . . .  	L WORD 	0188	CONSTANTS	Global
CURRENT_COUNTRY  . . . . . . . .  	V WORD 	0000	CONSTANTS	External
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DAY  . . . . . . . . . . . . . .  	L BYTE 	0116	CONSTANTS	Global
DAYCNT . . . . . . . . . . . . .  	L WORD 	011A	CONSTANTS	Global
DBPBHL . . . . . . . . . . . . .  	Number	0016	
DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DELALL . . . . . . . . . . . . .  	L BYTE 	0139	DATA	Global
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVCALL  . . . . . . . . . . . .  	L 000D	012A	CONSTANTS	Global
DEVFCB . . . . . . . . . . . . .  	L BYTE 	010F	DATA	Global
DEVHEAD  . . . . . . . . . . . .  	L DWORD	0104	CONSTANTS
DEVICE_AVAILABILITY  . . . . . .  	L BYTE 	00E3	CONSTANTS	Global
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOBUF . . . . . . . . . . . .  	L BYTE 	0109	DATA	Global	Length = 0002
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
DEVOFL . . . . . . . . . . . . .  	Number	000B	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-8
                                                             

DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVPT  . . . . . . . . . . . . .  	L DWORD	0157	DATA	Global
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVSTRING  . . . . . . . . . . .  	L BYTE 	0001	CONSTANTS	Global
DEVSTRLEN  . . . . . . . . . . .  	L BYTE 	0000	CONSTANTS	Global
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DIDCTRLC . . . . . . . . . . . .  	L BYTE 	00D3	CONSTANTS	Global
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSEC . . . . . . . . . . . . .  	L WORD 	016B	DATA	Global
DIRSTART . . . . . . . . . . . .  	L WORD 	016D	DATA	Global
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DIVOV  . . . . . . . . . . . . .  	L NEAR	0000	LAST	External
DMAADD . . . . . . . . . . . . .  	L DWORD	00DC	CONSTANTS	Global
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DOSINIT  . . . . . . . . . . . .  	L NEAR	0000	LAST
DOSVER . . . . . . . . . . . . .  	Number	00D3	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBHEAD  . . . . . . . . . . . .  	L DWORD	00ED	CONSTANTS	Global
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DRIVESPEC  . . . . . . . . . . .  	L BYTE 	014B	DATA	Global
DSKCHRET . . . . . . . . . . . .  	L BYTE 	0167	CONSTANTS	Global
DSKERR . . . . . . . . . . . . .  	L BYTE 	0142	DATA	Global
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSKSTACK . . . . . . . . . . . .  	L BYTE 	02E6	DATA	Global	Length = 00A0
DSKSTCALL  . . . . . . . . . . .  	L BYTE 	015A	CONSTANTS	Global
DSKSTCNT . . . . . . . . . . . .  	L WORD 	016C	CONSTANTS	Global
DSKSTCOM . . . . . . . . . . . .  	L BYTE 	015C	CONSTANTS	Global
DSKSTST  . . . . . . . . . . . .  	L WORD 	015D	CONSTANTS	Global
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ENDMEM . . . . . . . . . . . . .  	L WORD 	00E0	CONSTANTS
ENTFREE  . . . . . . . . . . . .  	L WORD 	017F	DATA	Global
ENTLAST  . . . . . . . . . . . .  	L WORD 	0181	DATA	Global
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENTRYPOINTSEG  . . . . . . . . .  	Number	000C	
ERRORMODE  . . . . . . . . . . .  	L BYTE 	0121	CONSTANTS	Global
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-9
                                                             

ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
ESCCH  . . . . . . . . . . . . .  	Number	001B	
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXITHOLD . . . . . . . . . . . .  	L DWORD	010B	DATA	Global
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CODE  . . . . . . . . . . .  	L WORD 	01A2	DATA	Global
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXIT_TYPE  . . . . . . . . . . .  	L BYTE 	01A4	DATA	Global
EXTFCB . . . . . . . . . . . . .  	L BYTE 	0137	DATA	Global

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATBYT . . . . . . . . . . . . .  	L WORD 	0155	DATA	Global
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-10
                                                             

FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FIRSTARENA . . . . . . . . . . .  	L WORD 	00E4	CONSTANTS	Global
FOUNDDEL . . . . . . . . . . . .  	L BYTE 	013A	DATA	Global
FREEPRI  . . . . . . . . . . . .  	Number	0000	

GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
GROWCNT  . . . . . . . . . . . .  	L DWORD	0185	DATA	Global

HEADER . . . . . . . . . . . . .  	V BYTE 	0000	DATA	External
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		

IBM  . . . . . . . . . . . . . .  	Alias	 FALSE		
IDLEINT  . . . . . . . . . . . .  	L BYTE 	0124	CONSTANTS	Global
INBUF  . . . . . . . . . . . . .  	L BYTE 	0000	DATA	Global	Length = 0080
INDOS  . . . . . . . . . . . . .  	L BYTE 	0120	CONSTANTS	Global
INITBLOCK  . . . . . . . . . . .  	L BYTE 	0000	DATA	Length = 0110
INITSP . . . . . . . . . . . . .  	L WORD 	0110	DATA
INITSS . . . . . . . . . . . . .  	L WORD 	0112	DATA
INITSTACK  . . . . . . . . . . .  	L BYTE 	02B5	LAST
INSMODE  . . . . . . . . . . . .  	L BYTE 	014E	DATA	Global
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNATIONAL_TABLE  . . . . . .  	V BYTE 	0000	CONSTANTS	External
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-11
                                                             

INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCALL . . . . . . . . . . . . .  	L 000D	0144	CONSTANTS	Global
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IOFLSH . . . . . . . . . . . . .  	L WORD 	0151	CONSTANTS
IOMED  . . . . . . . . . . . . .  	L BYTE 	0151	CONSTANTS	Global
IORCHR . . . . . . . . . . . . .  	L BYTE 	0151	CONSTANTS	Global
IOSCNT . . . . . . . . . . . . .  	L WORD 	0156	CONSTANTS	Global
IOSSEC . . . . . . . . . . . . .  	L WORD 	0158	CONSTANTS	Global
IOSTACK  . . . . . . . . . . . .  	L BYTE 	0386	DATA	Global
IOXAD  . . . . . . . . . . . . .  	L DWORD	0152	CONSTANTS	Global
IRET . . . . . . . . . . . . . .  	L NEAR	0000	DATA	External
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Number	0000	
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LASTARENA  . . . . . . . . . . .  	L WORD 	00E8	CONSTANTS	Global
LASTBUFFER . . . . . . . . . . .  	L DWORD	0126	CONSTANTS	Global
LASTENT  . . . . . . . . . . . .  	L WORD 	011E	CONSTANTS	Global
LASTPOS  . . . . . . . . . . . .  	L WORD 	0167	DATA	Global
LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LEAVEADDR  . . . . . . . . . . .  	L WORD 	018B	CONSTANTS	Global
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

MAXDIF . . . . . . . . . . . . .  	Number	0FFF	
MAXSEC . . . . . . . . . . . . .  	L WORD 	00FE	CONSTANTS
MEMSTRT  . . . . . . . . . . . .  	L WORD 	02B7	LAST	Global
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MONTAB . . . . . . . . . . . . .  	L BYTE 	0178	CONSTANTS	Global	Length = 000C
MONTH  . . . . . . . . . . . . .  	L BYTE 	0117	CONSTANTS	Global
MOVDPB . . . . . . . . . . . . .  	L NEAR	0116	DATA
MOVJMP . . . . . . . . . . . . .  	L NEAR	0208	LAST
MSVER  . . . . . . . . . . . . .  	Alias	 TRUE		
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-12
                                                             


NAME1  . . . . . . . . . . . . .  	L BYTE 	010F	DATA	Global	Length = 000C
NAME2  . . . . . . . . . . . . .  	L BYTE 	011C	DATA	Global	Length = 000D
NAME3  . . . . . . . . . . . . .  	L BYTE 	0129	DATA	Global	Length = 000E
NEXTADD  . . . . . . . . . . . .  	L WORD 	015F	DATA	Global
NOSETDIR . . . . . . . . . . . .  	L BYTE 	00D2	CONSTANTS	Global
NOTMAX . . . . . . . . . . . . .  	L NEAR	00C5	LAST
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		
NSP  . . . . . . . . . . . . . .  	L WORD 	0388	DATA	Global
NSS  . . . . . . . . . . . . . .  	L WORD 	0386	DATA	Global
NULDEV . . . . . . . . . . . . .  	L DWORD	0104	CONSTANTS	Global
NULLDEVPT  . . . . . . . . . . .  	L DWORD	018E	DATA	Global
NUMIO  . . . . . . . . . . . . .  	L BYTE 	00FD	CONSTANTS	Global
NXTCLUSNUM . . . . . . . . . . .  	L WORD 	0183	DATA	Global

OEM  . . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OEM_HANDLER  . . . . . . . . . .  	L DWORD	0184	CONSTANTS	Global
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PERDRV . . . . . . . . . . . . .  	L NEAR	0076	LAST
PERUNIT  . . . . . . . . . . . .  	L NEAR	00A4	LAST
PFLAG  . . . . . . . . . . . . .  	L BYTE 	00D7	CONSTANTS	Global
PREREAD  . . . . . . . . . . . .  	L WORD 	0153	DATA	Global

QUIT . . . . . . . . . . . . . .  	L NEAR	0000	DATA	External

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
RAW_CON_IO . . . . . . . . . . .  	Number	0006	
READ . . . . . . . . . . . . . .  	Number	003F	
READOP . . . . . . . . . . . . .  	L BYTE 	0144	DATA	Global
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
RECCNT . . . . . . . . . . . . .  	L WORD 	0165	DATA	Global
RECPOS . . . . . . . . . . . . .  	L BYTE 	0161	DATA	Global	Length = 0004
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RMDIR  . . . . . . . . . . . . .  	Number	003A	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-13
                                                             

RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
ROOTSTART  . . . . . . . . . . .  	L BYTE 	014C	DATA	Global
RPRI . . . . . . . . . . . . . .  	Number	0006	

SAVEBX . . . . . . . . . . . . .  	L WORD 	019C	DATA	Global
SAVEDS . . . . . . . . . . . . .  	L WORD 	019E	DATA	Global
SAVEXIT  . . . . . . . . . . . .  	Number	000A	
SECCLUSPOS . . . . . . . . . . .  	L BYTE 	0141	DATA	Global
SECCNT . . . . . . . . . . . . .  	L WORD 	017D	DATA	Global
SECPOS . . . . . . . . . . . . .  	L WORD 	016F	DATA	Global
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETFINDPB  . . . . . . . . . . .  	L NEAR	013C	DATA
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SFTABL . . . . . . . . . . . . .  	L DWORD	0004	CONSTANTS
SFT_ADDR . . . . . . . . . . . .  	L DWORD	00F1	CONSTANTS	Global
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SPACEFLAG  . . . . . . . . . . .  	L BYTE 	00D4	CONSTANTS	Global
STARTPOS . . . . . . . . . . . .  	L BYTE 	00D6	CONSTANTS	Global
STAY_RESIDENT  . . . . . . . . .  	L NEAR	0000	LAST	External
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 15:44:09
Standard MSDOS                                              Symbols-14
                                                             

SWITCH_CHARACTER . . . . . . . .  	L BYTE 	00E2	CONSTANTS	Global
SYSBUF . . . . . . . . . . . . .  	L WORD 	0000	LAST	Global
SYSINITVAR . . . . . . . . . . .  	L WORD 	00ED	CONSTANTS	Global

THISDPB  . . . . . . . . . . . .  	L DWORD	0146	DATA	Global
THISDRV  . . . . . . . . . . . .  	L BYTE 	0145	DATA	Global
THISFCB  . . . . . . . . . . . .  	L DWORD	015B	DATA	Global
TIMEBUF  . . . . . . . . . . . .  	L BYTE 	0103	DATA	Global	Length = 0006
TOGLINS  . . . . . . . . . . . .  	Alias	 WANG		
TOGLPRN  . . . . . . . . . . . .  	Alias	 FALSE		
TRANS  . . . . . . . . . . . . .  	L BYTE 	0143	DATA	Global
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TRUEDPBAD  . . . . . . . . . . .  	L NEAR	0116	LAST

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USER_SP  . . . . . . . . . . . .  	L WORD 	013B	DATA	Global
USER_SS  . . . . . . . . . . . .  	L WORD 	013D	DATA	Global

VALSEC . . . . . . . . . . . . .  	L WORD 	0171	DATA	Global
VER  . . . . . . . . . . . . . .  	Text  		
VERFLG . . . . . . . . . . . . .  	L BYTE 	00D8	CONSTANTS	Global
VOLID  . . . . . . . . . . . . .  	L BYTE 	018D	DATA	Global

WAIT . . . . . . . . . . . . . .  	Number	004D	
WANG . . . . . . . . . . . . . .  	Alias	 FALSE		
WEEKDAY  . . . . . . . . . . . .  	L BYTE 	011C	CONSTANTS	Global
WPERR  . . . . . . . . . . . . .  	L BYTE 	0122	CONSTANTS	Global
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	
XXX  . . . . . . . . . . . . . .  	F PROC	01BA	DATA	Length = 0001

YEAR . . . . . . . . . . . . . .  	L WORD 	0118	CONSTANTS	Global
YRTAB  . . . . . . . . . . . . .  	L BYTE 	0170	CONSTANTS	Global	Length = 0008

ZEROEXT  . . . . . . . . . . . .  	Alias	 TRUE		


   2318 Source  Lines
   3997 Total   Lines
    732 Symbols

  13794 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
