Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-1
                                                            

                                ; 
                                ; This version of COMMAND is divided into three
				 distinct parts.  First is the 
                                ; resident portion, which includes handlers for
				 interrupts 22H (terminate), 
                                ; 23H (Cntrl-C), 24H (fatal error), and 27H (st
				ay resident); it also has code 
                                ; to test and, if necessary, reload the transie
				nt portion.  Following the 
                                ; resident is the init code, which is overwritt
				en after use.  Then comes the 
                                ; transient portion, which includes all command
				 processing (whether internal 
                                ; or external).  The transient portion loads at
				 the end of physical memory, 
                                ; and it may be overlayed by programs that need
				 as much memory as possible. 
                                ; When the resident portion of command regains 
				control from a user program, a 
                                ; checksum is performed on the transient portio
				n to see if it must be 
                                ; reloaded.  Thus programs which do not need ma
				ximum memory will save the time 
                                ; required to reload COMMAND when they terminat
				e. 
                                 
                                ; 
                                ; REV 1.17 
                                ;    05/19/82   Fixed bug in BADEXE error (relo
				cation error must return to 
                                ;               resident since the EXELOAD may 
				have overwritten the transient. 
                                ; REV 1.18 
                                ;    05/21/82   IBM version always looks on dri
				ve A 
                                ;               MSVER always looks on default d
				rive 
                                ; 
                                ; REV 1.19 
                                ;    06/03/82   Drive spec now entered in comma
				nd line 
                                ;    06/07/82   Added VER command (print DOS ve
				rsion number) and VOL command 
                                ;               (print volume label) 
                                ; REV 1.20 
                                ;    06/09/82   Prints "directory" after direct
				ories 
                                ;    06/13/82   MKDIR, CHDIR, PWD, RMDIR added 
                                ; REV 1.50 
                                ;               Some code for new 2.0 DOS, sort
				 of HACKey.  Not enough time to 
                                ;               do it right. 
                                ; REV 1.70 
                                ;               EXEC used to fork off new proce
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-2
                                                            

				sses 
                                ; REV 1.80 
                                ;               C switch for single command exe
				cution 
                                ; REV 1.90 
                                ;               Batch uses XENIX 
                                ; Rev 2.00 
                                ;               Lots of neato stuff 
                                ;               IBM 2.00 level 
                                ; Rev 2.01 
                                ;               'D' switch for date time suppre
				ssion 
                                ; Rev 2.02 
                                ;               Default userpath is NUL rather 
				than BIN 
                                ;                       same as IBM 
                                ;               COMMAND split into pieces 
                                ; Rev 2.10 
                                ;               INTERNATIONAL SUPPORT 
                                ; Rev 2.11      COMMAND split into more pieces 
                                 
                             C          INCLUDE DOSSYM.ASM 
                             C  include DOSMAC.ASM 
                             C  ; 
                             C  ; Macro file for MSDOS. 
                             C  ; 
                             C   
                             C  SUBTTL BREAK a listing into pages and give new 
				subtitles 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-3
BREAK a listing into pages and give new subtitles           

                             C  PAGE 
                             C  BREAK MACRO subtitle 
                             C   SUBTTL subtitle 
                             C   PAGE 
                             C  ENDM 
                             C   
                             C  BREAK <I_NEED: declare a variable external, if 
				necessary, and allocate a size> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-4
I_NEED: declare a variable external, if necessary, and alloc

                             C   
                             C  ; 
                             C  ; declare a variable external and allocate a si
				ze 
                             C  ; 
                             C  I_NEED MACRO sym,len 
                             C   DATA SEGMENT BYTE PUBLIC 'DATA' 
                             C   IFIDN <len>,<WORD> 
                             C   EXTRN &sym:WORD 
                             C   ELSE 
                             C   IFIDN <len>,<DWORD> 
                             C   EXTRN &sym:DWORD 
                             C   ELSE 
                             C   EXTRN &sym:BYTE 
                             C   ENDIF 
                             C   ENDIF 
                             C   DATA ENDS 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; call a procedure that may be external. The ca
				ll will be short. 
                             C  ; 
                             C  invoke MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   CALL name 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-5
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; jump to a label that may be external. The jum
				p will be near. 
                             C  ; 
                             C  transfer MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   JUMP name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a short address in a word 
                             C  ; 
                             C  short_addr MACRO name 
                             C   IFDIF <name>,<?> 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C   ENDIF 
                             C  .cref 
                             C   DW OFFSET DOSGROUP:name 
                             C   ELSE 
                             C   DW ? 
                             C   ENDIF 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; get a long address in a dword 
                             C  ; 
                             C  long_addr MACRO name 
                             C  .xcref 
                             C   IF2 
                             C   IFNDEF name 
                             C   EXTRN name:NEAR 
                             C   ENDIF 
                             C  .cref 
                             C   DD name 
                             C  ENDM 
                             C   
                             C  ; 
                             C  ; declare a PROC near or far but PUBLIC nonethe
				less 
                             C  ; 
                             C  procedure MACRO name,distance 
                             C   PUBLIC name 
                             C  name PROC distance 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-6
I_NEED: declare a variable external, if necessary, and alloc

                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-7
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; define a data item to be public and of an app
				ropriate size/type 
                             C  ; 
                             C  I_AM MACRO name,size 
                             C   PUBLIC name 
                             C   
                             C   IFIDN <size>,<WORD> 
                             C  name DW ? 
                             C   ELSE 
                             C   IFIDN <size>,<DWORD> 
                             C  name DD ? 
                             C   ELSE 
                             C   IFIDN <size>,<BYTE> 
                             C  name DB ? 
                             C   ELSE 
                             C  name DB size DUP (?) 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C  ENDM 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-8
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C  ; 
                             C  ; call the macro chain 
                             C  ; 
                             C  do_ext macro 
                             C  endm 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-9
I_NEED: declare a variable external, if necessary, and alloc

                             C  PAGE 
                             C   
                             C  ; 
                             C  ; define an entry in a procedure 
                             C  ; 
                             C  entry macro name 
                             C   PUBLIC name 
                             C  name: 
                             C  endm 
                             C   
                             C  BREAK <ERROR - print a message and then jump to
				 a label> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-10
ERROR - print a message and then jump to a label            

                             C   
                             C  error macro code 
                             C   local a 
                             C  .xcref 
                             C   MOV AL,code 
                             C   transfer SYS_RET_ERR 
                             C  .cref 
                             C  ENDM 
                             C   
                             C  BREAK <JUMP - real jump that links up shortwise
				> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-11
JUMP - real jump that links up shortwise                    

                             C  ; 
                             C  ; given a label <lbl> either 2 byte jump to ano
				ther label <lbl>_J 
                             C  ; if it is near enough or 3 byte jump to <lbl> 
                             C  ; 
                             C   
                             C  jump macro lbl 
                             C   local a 
                             C  .xcref 
                             C   a: 
                             C   ifndef lbl&_J ;; is this the first invocation 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF lbl&_J GE $ 
                             C   JMP lbl 
                             C   ELSE 
                             C   IF ($-lbl&_J) GT 126 ;; is the jump too far aw
				ay? 
                             C   JMP lbl 
                             C   ELSE ;; do the short one... 
                             C   JMP lbl&_J 
                             C   ENDIF 
                             C   ENDIF 
                             C   ENDIF 
                             C   lbl&_j = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <RETURN - return from a function> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-12
RETURN - return from a function                             

                             C   
                             C  return macro 
                             C   local a 
                             C  .xcref 
                             C  a: 
                             C   RET 
                             C  ret_l = a 
                             C  .cref 
                             C  endm 
                             C   
                             C  BREAK <CONDRET - conditional return> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-13
CONDRET - conditional return                                

                             C   
                             C  makelab macro l,cc,ncc 
                             C   local a 
                             C   j&ncc a ;; j<NCC> a: 
                             C   return ;; return 
                             C   a: ;; a: 
                             C   ret_&cc = ret_l ;; define ret_<CC> to be ret_l
				 
                             C  endm 
                             C   
                             C  condret macro cc,ncc 
                             C   local a,b 
                             C   ifdef ret_l ;; if ret_l is defined 
                             C   if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C   ;; if ret_l is near enough then 
                             C   a: j&cc ret_l ;; a: j<CC> to ret_l 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   ifdef ret_&cc ;; if ret_<CC> defined 
                             C   if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C   ;; if ret_<CC> is near enough 
                             C   a: j&cc ret_&cc ;; a: j<CC> to ret_<CC> 
                             C   ret_&cc = a ;; define ret_<CC> to be a: 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   else 
                             C   makelab a,cc,ncc 
                             C   endif 
                             C   endif 
                             C  endm 
                             C  ;condret macro cc,ncc 
                             C  ; local a,b 
                             C  ; ifdef ret_l ; if ret_l is defined 
                             C  ; if (($ - ret_l) le 126) and ($ gt ret_l) 
                             C  ; ; if ret_l is near enough then 
                             C  ; a: j&cc ret_l ; a: j<CC> to ret_l 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; ifdef ret_&cc ; if ret_<CC> defined 
                             C  ; if (($ - ret_&cc) le 126) and ($ gt ret_&cc) 
                             C  ; ; if ret_<CC> is near enough 
                             C  ; a: j&cc ret_&cc ; a: j<CC> to ret_<CC> 
                             C  ; ret_&cc = a ; define ret_<CC> to be a: 
                             C  ; exitm 
                             C  ; endif 
                             C  ; endif 
                             C  ; j&ncc a ; j<NCC> a: 
                             C  ; return ; return 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-14
CONDRET - conditional return                                

                             C  ; a: ; a: 
                             C  ; ret_&cc = ret_l ; define ret_<CC> to be ret_l
				 
                             C  ;endm 
                             C  ; 
                             C  BREAK <RETZ - return if zero, links up shortwis
				e if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-15
RETZ - return if zero, links up shortwise if necessary      

                             C   
                             C  retz macro 
                             C   condret z,nz 
                             C  endm 
                             C   
                             C  BREAK <RETNZ - return if not zero, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-16
RETNZ - return if not zero, links up shortwise if necessary 

                             C   
                             C  retnz macro 
                             C   condret nz,z 
                             C  endm 
                             C   
                             C  BREAK <RETC - return if carry set, links up sho
				rtwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-17
RETC - return if carry set, links up shortwise if necessary 

                             C   
                             C  retc macro 
                             C   condret c,nc 
                             C  endm 
                             C   
                             C  BREAK <RETNC - return if not carry, links up sh
				ortwise if necessary> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-18
RETNC - return if not carry, links up shortwise if necessary

                             C   
                             C  retnc macro 
                             C   condret nc,c 
                             C  endm 
                             C   
                             C  BREAK <CONTEXT - set the DOS context to a parti
				cular register> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-19
CONTEXT - set the DOS context to a particular register      

                             C   
                             C  context macro r 
                             C   PUSH SS 
                             C   POP r 
                             C   ASSUME r:DOSGROUP 
                             C  endm 
                             C   
                             C  IF2 
                             C  ;;    %OUT    DOSSYM in Pass 2 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C  ELSE 
                             C    ELSE 
                             C      ENDIF 
                             C    ENDIF 
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
 = 0002                      C  DOS_MAJOR_VERSION   EQU	    (DOSVER / 100) 
 = 000B                      C  DOS_MINOR_VERSION   EQU     (DOSVER MOD 100) 
                             C   
                             C  BREAK <Control character definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-20
Control character definitions                               

                             C   
 = 007F                      C  c_DEL       EQU     7Fh         ;    ASCII rubo
				ut or delete previous char 
 = 0008                      C  c_BS        EQU     08h         ; ^H ASCII back
				space 
 = 000D                      C  c_CR        EQU     0Dh         ; ^M ASCII carr
				iage return 
 = 000A                      C  c_LF        EQU     0Ah         ; ^J ASCII line
				feed 
 = 0017                      C  c_ETB       EQU     17h         ; ^W ASCII end 
				of transmission 
 = 0015                      C  c_NAK       EQU     15h         ; ^U ASCII nega
				tive acknowledge 
 = 0003                      C  c_ETX       EQU     03h         ; ^C ASCII end 
				of text 
 = 0009                      C  c_HT        EQU     09h         ; ^I ASCII tab 
                             C   
                             C  BREAK <BPB Definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-21
BPB Definition                                              

                             C   
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; Certain structures, constants and system  cal
				ls  below  are  private  to ; 
                             C  ; the DOS  and  are  extremely  version-depende
				nt.  They may change at any ; 
                             C  ; time at  the  implementors'  whim.   As  a  r
				esult,  they  must  not  be ; 
                             C  ; documented to  the  general  public.   If  an
				  extreme case arises, they ; 
                             C  ; must be documented with this warning.        
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ; Those structures and constants that are subje
				ct to  the  above  will  be ; 
                             C  ; marked and bracketed with the flag:          
				                            ; 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK  <Bios Parameter Block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-22
Bios Parameter Block                                        

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Bios Parameter Block definition 
                             C  ; This structure is used to build a full DPB 
                             C   
                             C  BPBLOCK STRUC 
 0000  ????                  C  BPSECSZ DW      ?       ; Size in bytes of phys
				ical sector 
 0002  ??                    C  BPCLUS  DB      ?       ; Sectors/Alloc unit 
 0003  ????                  C  BPRES   DW      ?       ; Number of reserved se
				ctors 
 0005  ??                    C  BPFTCNT DB      ?       ; Number of FATs 
 0006  ????                  C  BPDRCNT DW      ?       ; Number of directory e
				ntries 
 0008  ????                  C  BPSCCNT DW      ?       ; Total number of secto
				rs 
 000A  ??                    C  BPMEDIA DB      ?       ; Media descriptor byte
				 
 000B  ????                  C  BPFTSEC DW      ?       ; Number of sectors tak
				en up by one FAT 
 000D                        C  BPBLOCK ENDS 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk I/O Buffer Header> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-23
Disk I/O Buffer Header                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
                             C  ; Field definition for I/O buffer information 
                             C   
                             C  BUFFINFO        STRUC 
 0000  ????????              C  NEXTBUF         DD      ?       ; Pointer to ne
				xt buffer in list 
                             C  ; The next two items are often refed as a word 
 0004  ??                    C  BUFDRV          DB      ?       ; Logical drive
				 # assoc with buffer FF = free 
 0005  ??                    C  BUFDIRTY        DB      ?       ; Dirty flag 
 0006  ??                    C  BUFPRI          DB      ?       ; Buffer select
				ion priority (see EQUs below) 
 0007  ??                    C  VISIT           DB      ?       ; Visit flag fo
				r buffer pool scans 
 0008  ????                  C  BUFSECNO        DW      ?       ; Sector number
				 of buffer 
                             C  ; The next two items are often refed as a word 
 000A  ??                    C  BUFWRTCNT       DB      ?       ; For FAT secto
				rs, # times sector written out 
 000B  ??                    C  BUFWRTINC       DB      ?       ; "   "     "  
				 , # sectors between each write 
 000C  ????????              C  BUFDRVDP        DD      ?       ; Pointer to dr
				ive parameters 
 0010                        C  BUFFINFO        ENDS 
                             C   
 = 0010                      C  BUFINSIZ        EQU     SIZE BUFFINFO 
                             C                                  ; Size of struc
				ture in bytes 
                             C   
 = 0000                      C  FREEPRI EQU     0 
 = 0002                      C  LBRPRI  EQU     2               ; Last byte of 
				buffer read 
 = 0004                      C  LBWPRI  EQU     4               ; Last byte wri
				tten 
 = 0006                      C  RPRI    EQU     6               ; Read but not 
				last byte 
 = 0008                      C  WPRI    EQU     8               ; Written but n
				ot last byte 
 = 000F                      C  DIRPRI  EQU     15              ; Directory Sec
				tor 
 = 001E                      C  FATPRI  EQU     30              ; FAT sector 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-24
Disk I/O Buffer Header                                      

                             C  BREAK <User stack inside of system call> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-25
User stack inside of system call                            

                             C  ; Location of user registers relative user stac
				k pointer 
                             C   
                             C  user_environ    STRUC 
 0000  ????                  C  user_AX     DW      ? 
 0002  ????                  C  user_BX     DW      ? 
 0004  ????                  C  user_CX     DW      ? 
 0006  ????                  C  user_DX     DW      ? 
 0008  ????                  C  user_SI     DW      ? 
 000A  ????                  C  user_DI     DW      ? 
 000C  ????                  C  user_BP     DW      ? 
 000E  ????                  C  user_DS     DW      ? 
 0010  ????                  C  user_ES     DW      ? 
 0012  ????                  C  user_IP     DW      ? 
 0014  ????                  C  user_CS     DW      ? 
 0016  ????                  C  user_F      DW      ? 
 0018                        C  user_environ    ENDS 
                             C   
                             C  BREAK <interrupt definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-26
interrupt definitions                                       

                             C   
 = 0020                      C  INTTAB          EQU     20H 
 = 0080                      C  INTBASE         EQU     4 * inttab 
 = 00C0                      C  ENTRYPOINT      EQU     INTBASE+40H 
                             C   
                             C          ENDIF 
                             C   
                             C  ; 
                             C  ; interrupt assignments 
                             C  ; 
                             C          IF      NOT ALTVECT 
 =                           C  int_abort           EQU     INTTAB          ; a
				bort process 
 = 0021                      C  int_command         EQU     int_abort+1     ; c
				all MSDOS 
 = 0022                      C  int_terminate       EQU     int_abort+2     ; i
				nt to terminate address 
 = 0023                      C  int_ctrl_c          EQU     int_abort+3     ; ^
				c trapper 
 = 0024                      C  int_fatal_abort     EQU     int_abort+4     ; h
				ard disk error 
 = 0025                      C  int_disk_read       EQU     int_abort+5     ; l
				ogical sector disk read 
 = 0026                      C  int_disk_write      EQU     int_abort+6     ; l
				ogical sector disk write 
 = 0027                      C  int_keep_process    EQU     int_abort+7     ; t
				erminate program and stay 
                             C                                              ; r
				esident 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0028                      C  int_spooler         EQU     int_abort+8     ; s
				pooler call 
 = 0029                      C  int_fastcon         EQU     int_abort+9     ; f
				ast CON interrupt 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C          ENDIF 
                             C   
 = 0080                      C  addr_int_abort          EQU    4 * int_abort 
 = 0084                      C  addr_int_command        EQU    4 * int_command 
 = 0088                      C  addr_int_terminate      EQU    4 * int_terminat
				e 
 = 008C                      C  addr_int_ctrl_c         EQU    4 * int_ctrl_c 
 = 0090                      C  addr_int_fatal_abort    EQU    4 * int_fatal_ab
				ort 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-27
interrupt definitions                                       

 = 0094                      C  addr_int_disk_read      EQU    4 * int_disk_rea
				d 
 = 0098                      C  addr_int_disk_write     EQU    4 * int_disk_wri
				te 
 = 009C                      C  addr_int_keep_process   EQU    4 * int_keep_pro
				cess 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 00A0                      C  addr_int_spooler        EQU    4 * int_spooler 
 = 00A4                      C  addr_int_fastcon        EQU    4 * int_fastcon 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Disk map> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-28
Disk map                                                    

                             C  ;  MSDOS partitions the disk into 4 sections: 
                             C  ; 
                             C  ;  phys sector 0:   +-------------------+ 
                             C  ;       |           | boot/reserved     | 
                             C  ;       |           +-------------------+ 
                             C  ;       |           |  File allocation  | 
                             C  ;       v           |      table(s)     | 
                             C  ;                   |  (multiple copies | 
                             C  ;                   |     are kept)     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     Directory     | 
                             C  ;                   +-------------------+ 
                             C  ;                   |     File space    | 
                             C  ;                   +-------------------+ 
                             C  ;                   |   Unaddressable   | 
                             C  ;                   |  (to end of disk) | 
                             C  ;                   +-------------------+ 
                             C  ; 
                             C  ; All partition boundaries are sector boundarie
				s.  The size of the FAT is 
                             C  ; adjusted to maximize the file space addressab
				le. 
                             C   
                             C  BREAK <Directory entry> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-29
Directory entry                                             

                             C   
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |  (12 BYTE) filename/ext   |       0  
				     0 
                             C  ;       +---------------------------+ 
                             C  ;       |     (BYTE) attributes     |       11 
				     B 
                             C  ;       +---------------------------+ 
                             C  ;       |    (10 BYTE) reserved     |       12 
				     C 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) time of last write |       22 
				     16 
                             C  ;       +---------------------------+ 
                             C  ;       | (WORD) date of last write |       24 
				     18 
                             C  ;       +---------------------------+ 
                             C  ;       |   (WORD) First cluster    |       26 
				     1A 
                             C  ;       +---------------------------+ 
                             C  ;       |     (DWORD) file size     |       28 
				     1C 
                             C  ;       +---------------------------+ 
                             C  ; 
                             C  ;   First byte of filename  = E5 -> free direct
				ory entry 
                             C  ;                           = 00 -> end of allo
				cated directory 
                             C  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minut
				e, 11-15=hour 
                             C  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 
				9-15=year-1980 
                             C  ; 
                             C  dir_entry   STRUC 
 0000  000B[                 C  dir_name    DB      11 DUP (?)          ; file 
				name 
            ??               C  
                         ]   C  
                             C  
 000B  ??                    C  dir_attr    DB      ?                   ; attri
				bute bits 
 000C  000A[                 C  dir_pad     DB      10 DUP (?)          ; reser
				ved for expansion 
            ??               C  
                         ]   C  
                             C  
 0016  ????                  C  dir_time    DW      ?                   ; time 
				of last write 
 0018  ????                  C  dir_date    DW      ?                   ; date 
				of last write 
 001A  ????                  C  dir_first   DW      ?                   ; first
				 allocation unit of file 
 001C  ????                  C  dir_size_l  DW      ?                   ; low 1
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-30
Directory entry                                             

				6 bits of file size 
 001E  ????                  C  dir_size_h  DW      ?                   ; high 
				16 bits of file size 
 0020                        C  dir_entry   ENDS 
                             C   
 = 0001                      C  attr_read_only      EQU      1h 
 = 0002                      C  attr_hidden         EQU      2h 
 = 0004                      C  attr_system         EQU      4h 
 = 0008                      C  attr_volume_id      EQU      8h 
 = 0010                      C  attr_directory      EQU     10h 
 = 0020                      C  attr_archive        EQU     20h 
                             C   
 = 0016                      C  attr_all            EQU     attr_hidden+attr_sy
				stem+attr_directory 
                             C                                          ; OR of
				 hard attributes for FINDENTRY 
                             C   
 = 0021                      C  attr_ignore         EQU     attr_read_only+attr
				_archive 
                             C                                          ; ignor
				e this(ese) attribute(s) during 
                             C                                          ; searc
				h first/next 
                             C   
 = 0027                      C  attr_changeable     EQU     attr_read_only+attr
				_hidden+attr_system+attr_archive 
                             C                                          ; chang
				eable via CHMOD 
                             C   
                             C  BREAK <File allocation Table information> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-31
File allocation Table information                           

                             C  ; 
                             C  ; The File Allocation Table uses a 12-bit entry
				 for each allocation unit on 
                             C  ; the disk.  These entries are packed, two for 
				every three bytes.  The contents 
                             C  ; of entry number N is found by 1) multiplying 
				N by 1.5; 2) adding the result 
                             C  ; to the base address of the Allocation Table; 
				3) fetching the 16-bit word 
                             C  ; at this address; 4) If N was odd (so that N*1
				.5 was not an integer), shift 
                             C  ; the word right four bits; 5) mask to 12 bits 
				(AND with 0FFF hex).  Entry 
                             C  ; number zero is used as an end-of-file trap in
				 the OS and is passed to the 
                             C  ; BIOS to help determine disk format.  Entry 1 
				is reserved for future use. 
                             C  ; The first available allocation unit is assign
				ed entry number two, and even 
                             C  ; though it is the first, is called cluster 2. 
				 Entries greater than 0FF8H 
                             C  ; are end of file marks; entries of zero are un
				allocated.  Otherwise, the 
                             C  ; contents of a FAT entry is the number of the 
				next cluster in the file. 
                             C  ; 
                             C  ; Clusters with bad sectors are tagged with FF7
				H.  Any non-zero number would 
                             C  ; do because these clusters show as allocated, 
				but are not part of any 
                             C  ; allocation chain and thus will never be alloc
				ated to a file.  A particular 
                             C  ; number is selected so that disk checking prog
				rams know what to do (ie.  a 
                             C  ; cluster with entry FF7H which is not in a cha
				in is not an error). 
                             C   
                             C  BREAK <DPB structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-32
DPB structure                                               

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C   
 = 0040                      C  DIRSTRLEN       EQU     64      ; Max length in
				 bytes of directory strings 
                             C   
                             C  dpb     STRUC 
 0000  ??                    C  dpb_drive           DB      ?   ; Logical drive
				 # assoc with DPB (A=0,B=1,...) 
 0001  ??                    C  dpb_UNIT            DB      ?   ; Driver unit n
				umber of DPB 
 0002  ????                  C  dpb_sector_size     DW      ?   ; Size of physi
				cal sector in bytes 
 0004  ??                    C  dpb_cluster_mask    DB      ?   ; Sectors/clust
				er - 1 
 0005  ??                    C  dpb_cluster_shift   DB      ?   ; Log2 of secto
				rs/cluster 
 0006  ????                  C  dpb_first_FAT       DW      ?   ; Starting reco
				rd of FATs 
 0008  ??                    C  dpb_FAT_count       DB      ?   ; Number of FAT
				s for this drive 
 0009  ????                  C  dpb_root_entries    DW      ?   ; Number of dir
				ectory entries 
 000B  ????                  C  dpb_first_sector    DW      ?   ; First sector 
				of first cluster 
 000D  ????                  C  dpb_max_cluster     DW      ?   ; Number of clu
				sters on drive + 1 
 000F  ??                    C  dpb_FAT_size        DB      ?   ; Number of rec
				ords occupied by FAT 
 0010  ????                  C  dpb_dir_sector      DW      ?   ; Starting reco
				rd of directory 
 0012  ????????              C  dpb_driver_addr     DD      ?   ; Pointer to dr
				iver 
 0016  ??                    C  dpb_media           DB      ?   ; Media byte 
 0017  ??                    C  dpb_first_access    DB      ?   ; This is initi
				alized to -1 to force a media 
                             C                                  ; check the fir
				st time this DPB is used 
 0018  ????????              C  dpb_next_dpb        DD      ?   ; Pointer to ne
				xt Drive parameter block 
 001C  ????                  C  dpb_current_dir     DW      ?   ; Cluster numbe
				r of start of current directory 
                             C                                  ; 0 indicates r
				oot, -1 indicates invalid (disk 
                             C                                  ; ?  changed) 
 001E  0040[                 C  dpb_dir_text        DB      DIRSTRLEN DUP(?) 
            ??               C  
                         ]   C  
                             C  
                             C                                  ; ASCIZ string 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-33
DPB structure                                               

				of current directory 
 005E                        C  dpb     ENDS 
                             C   
 = 005E                      C  DPBSIZ  EQU     SIZE dpb        ; Size of the s
				tructure in bytes 
                             C   
 = 000D                      C  DSKSIZ  =       dpb_max_cluster ; Size of disk 
				(temp used during init only) 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <File Control Block definition> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-34
File Control Block definition                               

                             C  ; 
                             C  ; Field definition for FCBs 
                             C  ; The FCB has the following structure: 
                             C  ; 
                             C  ;       +---------------------------+ 
                             C  ;       |   Drive indicator(byte)   | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Filename (8 chars)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Extension (3 chars)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |   Current Extent(word)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |    Record size (word)     | 
                             C  ;       +---------------------------+ 
                             C  ;       |    File Size (2 words)    | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Date of write       | 
                             C  ;       +---------------------------+ 
                             C  ;       |       Time of write       | 
                             C  ;       +---------------------------+ 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ;       | Flags:                    | 
                             C  ;       |  bit 7=0 file/1 device    | 
                             C  ;       |  bit 6=0 if dirty         | 
                             C  ;       |  bits 0-5 deviceid        | 
                             C  ;       +---------------------------+ 
                             C  ;       |   first cluster in file   | 
                             C  ;       +---------------------------+ 
                             C  ;       | position of last cluster  | 
                             C  ;       +---------------------------+ 
                             C  ;       |   last cluster accessed   |   12 bit-
				+--- packed in 3 bytes 
                             C  ;       +---------------------------+          
				| 
                             C  ;       |     parent directory      |   <------
				+ 
                             C  ;       +---------------------------+ 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;       |    next record number     | 
                             C  ;       +---------------------------+ 
                             C  ;       |   random record number    | 
                             C  ;       +---------------------------+ 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-35
File Control Block definition                               

                             C   
                             C  sys_fcb     STRUC 
 0000  ??                    C  fcb_drive   DB      ? 
 0001  0008[                 C  fcb_name    DB      8 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0009  0003[                 C  fcb_ext     DB      3 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 000C  ????                  C  fcb_EXTENT  DW      ? 
 000E  ????                  C  fcb_RECSIZ  DW      ?       ; Size of record (u
				ser settable) 
 0010  ????                  C  fcb_FILSIZ  DW      ?       ; Size of file in b
				ytes; used with the following 
                             C                              ; word 
 0012  ????                  C  fcb_DRVBP   DW      ?       ; BP for SEARCH FIR
				ST and SEARCH NEXT 
 0014  ????                  C  fcb_FDATE   DW      ?       ; Date of last writ
				ing 
 0016  ????                  C  fcb_FTIME   DW      ?       ; Time of last writ
				ing 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0018  ??                    C  fcb_DEVID   DB      ?       ; Device ID number,
				 bits 0-5 if file. 
                             C                              ; bit 7=0 for file,
				 bit 7=1 for I/O device 
                             C                              ; If file, bit 6=0 
				if dirty 
                             C                              ; If I/O device, bi
				t 6=0 if EOF (input) 
                             C                              ;               Bit
				 5=1 if Raw mode 
                             C                              ;               Bit
				 0=1 if console input device 
                             C                              ;               Bit
				 1=1 if console output device 
                             C                              ;               Bit
				 2=1 if null device 
                             C                              ;               Bit
				 3=1 if clock device 
 0019  ????                  C  fcb_FIRCLUS DW      ?       ; First cluster of 
				file 
 001B  ????                  C  fcb_CLUSPOS DW      ?       ; Position of last 
				cluster accessed 
 001D  ????                  C  fcb_LSTCLUS DW      ?       ; Last cluster acce
				ssed and directory pack 2 12 
 001F  ??                    C              DB      ?       ; bit numbers into 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-36
File Control Block definition                               

				24 bits... 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0020  ??                    C  fcb_NR      DB      ?       ; Next record 
 0021  0004[                 C  fcb_RR      DB      4 DUP (?)               ; R
				andom record 
            ??               C  
                         ]   C  
                             C  
 0025                        C  sys_fcb     ENDS 
                             C   
 = 0010                      C  FILDIRENT       = fcb_FILSIZ            ; Used 
				only by SEARCH FIRST and SEARCH 
                             C                                          ; NEXT 
                             C   
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0040                      C  devid_file_clean        EQU     40h     ; true 
				if file and not written 
 = 003F                      C  devid_file_mask_drive   EQU     3Fh     ; mask 
				for drive number 
                             C   
 = 0080                      C  devid_device            EQU     80h     ; true 
				if a device 
 = 0040                      C  devid_device_EOF        EQU     40h     ; true 
				if end of file reached 
 = 0020                      C  devid_device_raw        EQU     20h     ; true 
				if in raw mode 
 = 0010                      C  devid_device_special    EQU     10h     ; true 
				if special device 
 = 0008                      C  devid_device_clock      EQU     08h     ; true 
				if clock device 
 = 0004                      C  devid_device_null       EQU     04h     ; true 
				if null device 
 = 0002                      C  devid_device_con_out    EQU     02h     ; true 
				if console output 
 = 0001                      C  devid_device_con_in     EQU     01h     ; true 
				if consle input 
                             C   
                             C  ; 
                             C  ; structure of devid field as returned by IOCTL
				 is: 
                             C  ; 
                             C  ;       BIT     7   6   5   4   3   2   1   0 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-37
File Control Block definition                               

                             C  ;             | I | E | R | S | I | I | I | I |
				 
                             C  ;             | S | O | A | P | S | S | S | S |
				 
                             C  ;             | D | F | W | E | C | N | C | C |
				 
                             C  ;             | E |   |   | C | L | U | O | I |
				 
                             C  ;             | V |   |   | L | K | L | T | N |
				 
                             C  ;             |---|---|---|---|---|---|---|---|
				 
                             C  ;       ISDEV = 1 if this channel is a device 
                             C  ;             = 0 if this channel is a disk fil
				e 
                             C  ; 
                             C  ;       If ISDEV = 1 
                             C  ; 
                             C  ;             EOF = 0 if End Of File on input 
                             C  ;             RAW = 1 if this device is in Raw 
				mode 
                             C  ;                 = 0 if this device is cooked 
                             C  ;             ISCLK = 1 if this device is the c
				lock device 
                             C  ;             ISNUL = 1 if this device is the n
				ull device 
                             C  ;             ISCOT = 1 if this device is the c
				onsole output 
                             C  ;             ISCIN = 1 if this device is the c
				onsole input 
                             C  ; 
                             C  ;       If ISDEV = 0 
                             C  ;             EOF = 0 if channel has been writt
				en 
                             C  ;             Bits 0-5  are  the  block  device
				  number  for 
                             C  ;                 the channel (0 = A, 1 = B, ..
				.) 
                             C  ; 
 = 0080                      C  devid_ISDEV     EQU     80h 
 = 0040                      C  devid_EOF       EQU     40h 
 = 0020                      C  devid_RAW       EQU     20h 
 = 0010                      C  devid_SPECIAL   EQU     10H 
 = 0008                      C  devid_ISCLK     EQU     08h 
 = 0004                      C  devid_ISNUL     EQU     04h 
 = 0002                      C  devid_ISCOT     EQU     02h 
 = 0001                      C  devid_ISCIN     EQU     01h 
                             C   
 = 001F                      C  devid_block_dev EQU     1Fh             ; mask 
				for block device number 
                             C   
                             C  ; 
                             C  ; find first/next buffer 
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-38
File Control Block definition                               

                             C  find_buf    STRUC 
 0000  ??                    C  find_buf_sattr      DB  ?           ; attribute
				 of search 
 0001  ??                    C  find_buf_drive      DB  ?           ; drive of 
				search 
 0002  000B[                 C  find_buf_name       DB  11 DUP (?)  ; formatted
				 name 
            ??               C  
                         ]   C  
                             C  
 000D  ????                  C  find_buf_LastEnt    DW  ?           ; LastEnt 
 000F  ????????              C  find_buf_ThisDPB    DD  ?           ; This DPB 
 0013  ????                  C  find_buf_DirStart   DW  ?           ; DirStart 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
 0015  ??                    C  find_buf_attr       DB  ?           ; attribute
				 found 
 0016  ????                  C  find_buf_time       DW  ?           ; time 
 0018  ????                  C  find_buf_date       DW  ?           ; date 
 001A  ????                  C  find_buf_size_l     DW  ?           ; low(size)
				 
 001C  ????                  C  find_buf_size_h     DW  ?           ; high(size
				) 
 001E  000D[                 C  find_buf_pname      DB  13 DUP (?)  ; packed na
				me 
            ??               C  
                         ]   C  
                             C  
 002B                        C  find_buf    ENDS 
                             C   
                             C  BREAK <Process data block> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-39
Process data block                                          

                             C  ; 
                             C  ; Process data block (otherwise known as progra
				m header) 
                             C  ; 
                             C   
 = 0014                      C  FilPerProc          EQU     20 
                             C   
                             C  Process_data_block  STRUC 
 0000  ????                  C  PDB_Exit_Call       DW      ?           ; INT i
				nt_abort system terminate 
 0002  ????                  C  PDB_block_len       DW      ?           ; size 
				of execution block 
 0004  ??                    C                      DB      ? 
 0005  0005[                 C  PDB_CPM_Call        DB  5 DUP (?)       ; ancie
				nt call to system 
            ??               C  
                         ]   C  
                             C  
 000A  ????????              C  PDB_Exit            DD      ?           ; point
				er to exit routine 
 000E  ????????              C  PDB_Ctrl_C          DD      ?           ; point
				er to ^C routine 
 0012  ????????              C  PDB_Fatal_abort     DD      ?           ; point
				er to fatal error 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0016  ????                  C  PDB_Parent_PID      DW      ?           ; PID o
				f parent (terminate PID) 
 0018  0014[                 C  PDB_JFN_Table       DB  FilPerProc DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; indic
				es into system table 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 002C  ????                  C  PDB_environ         DW      ?           ; seg a
				ddr of environment 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 002E  ????????              C  PDB_User_stack      DD      ?           ; stack
				 of self during system calls 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-40
Process data block                                          

 0032  001E[                 C  PDB_PAD1            DB      1Eh DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 0050  0005[                 C  PDB_Call_system     DB      5 DUP (?)   ; porta
				ble method of system call 
            ??               C  
                         ]   C  
                             C  
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 0055  0006[                 C  PDB_PAD2            DB      6h DUP (?)  ; 
            ??               C  
                         ]   C  
                             C  
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 005B                        C  Process_data_block  ENDS 
                             C   
                             C  BREAK <EXEC and EXE file structures> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-41
EXEC and EXE file structures                                

                             C  ; 
                             C  ; EXEC arg block - load/go program 
                             C  ; 
                             C   
                             C  ; 
                             C  ; The following get used as arguments to the EX
				EC system call.  They indicate 
                             C  ; whether or not the program is executed or whe
				ther or not a program header 
                             C  ; gets created. 
                             C  ; 
 = 0001                      C  exec_func_no_execute    EQU 1           ; no ex
				ecute bit 
 = 0002                      C  exec_func_overlay       EQU 2           ; overl
				ay bit 
                             C   
                             C  Exec0           STRUC 
 0000  ????                  C  Exec0_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec0_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec0_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec0_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E                        C  Exec0           ENDS 
                             C   
                             C  Exec1           STRUC 
 0000  ????                  C  Exec1_environ   DW      ?               ; seg a
				ddr of environment 
 0002  ????????              C  Exec1_com_line  DD      ?               ; point
				er to asciz command line 
 0006  ????????              C  Exec1_5C_FCB    DD      ?               ; defau
				lt fcb at 5C 
 000A  ????????              C  Exec1_6C_FCB    DD      ?               ; defau
				lt fcb at 6C 
 000E  ????                  C  Exec1_SP        DW      ?               ; stack
				 pointer of program 
 0010  ????                  C  Exec1_SS        DW      ?               ; stack
				 seg register of program 
 0012  ????                  C  Exec1_IP        DW      ?               ; entry
				 point IP 
 0014  ????                  C  Exec1_CS        DW      ?               ; entry
				 point CS 
 0016                        C  Exec1           ENDS 
                             C   
                             C  Exec3           STRUC 
 0000  ????                  C  Exec3_load_addr DW      ?               ; seg a
				ddress of load point 
 0002  ????                  C  Exec3_reloc_fac DW      ?               ; reloc
				ation factor 
 0004                        C  Exec3           ENDS 
                             C   
                             C  ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-42
EXEC and EXE file structures                                

                             C  ; Exit codes in upper byte 
                             C  ; 
 = 0000                      C  Exit_terminate      EQU     0 
 = 0000                      C  Exit_abort          EQU     0 
 = 0001                      C  Exit_Ctrl_C         EQU     1 
 = 0002                      C  Exit_Hard_Error     EQU     2 
 = 0003                      C  Exit_Keep_process   EQU     3 
                             C   
                             C  ; 
                             C  ; EXE file header 
                             C  ; 
                             C   
                             C  EXE_file    STRUC 
 0000  ????                  C  exe_signature   DW  ?                   ; must 
				contain 4D5A  (yay zibo!) 
 0002  ????                  C  exe_len_mod_512 DW  ?                   ; low 9
				 bits of length 
 0004  ????                  C  exe_pages       DW  ?                   ; numbe
				r of 512b pages in file 
 0006  ????                  C  exe_rle_count   DW  ?                   ; count
				 of reloc entries 
 0008  ????                  C  exe_par_dir     DW  ?                   ; numbe
				r of paragraphs before image 
 000A  ????                  C  exe_min_BSS     DW  ?                   ; minim
				um number of para of BSS 
 000C  ????                  C  exe_max_BSS     DW  ?                   ; max n
				umber of para of BSS 
 000E  ????                  C  exe_SS          DW  ?                   ; stack
				 of image 
 0010  ????                  C  exe_SP          DW  ?                   ; SP of
				 image 
 0012  ????                  C  exe_chksum      DW  ?                   ; check
				sum  of file (ignored) 
 0014  ????                  C  exe_IP          DW  ?                   ; IP of
				 entry 
 0016  ????                  C  exe_CS          DW  ?                   ; CS of
				 entry 
 0018  ????                  C  exe_rle_table   DW  ?                   ; byte 
				offset of reloc table 
 001A  ????                  C  exe_iov         DW  ?                   ; overl
				ay number (0 for root) 
 001C  ????????              C  exe_sym_tab     DD  ?                   ; offse
				t of symbol table in file 
 0020                        C  EXE_file    ENDS 
                             C   
 = 5A4D                      C  exe_valid_signature     EQU 5A4Dh 
 = 4D5A                      C  exe_valid_old_signature EQU 4D5Ah 
                             C   
                             C  symbol_entry    STRUC 
 0000  ????????              C  sym_value       DD  ? 
 0004  ????                  C  sym_type        DW  ? 
 0006  ??                    C  sym_len         DB  ? 
 0007  00FF[                 C  sym_name        DB  255 dup (?) 
            ??               C  
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-43
EXEC and EXE file structures                                

                         ]   C  
                             C  
 0106                        C  symbol_entry    ENDS 
                             C   
                             C  BREAK <Internal system file table format> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-44
Internal system file table format                           

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; system file table 
                             C  ; 
                             C   
                             C  sft             STRUC 
 0000  ????????              C  sft_link        DD      ? 
 0004  ????                  C  sft_count       DW      ?               ; numbe
				r of entries 
 0006  ????                  C  sft_table       DW      ?               ; begin
				ning of array of the following 
 0008                        C  sft             ENDS 
                             C   
                             C  ; 
                             C  ; system file table entry 
                             C  ; 
                             C   
                             C  sf_entry        STRUC 
 0000  ??                    C  sf_ref_count    DB      ?               ; numbe
				r of processes sharing fcb 
 0001  ??                    C  sf_mode         DB      ?               ; mode 
				of access 
 0002  ??                    C  sf_attr         DB      ?               ; attri
				bute of file 
 0003  0025[                 C  sf_fcb          DB      (SIZE sys_fcb) DUP (?) 
            ??               C  
                         ]   C  
                             C  
                             C                                          ; actua
				l FCB 
 0028                        C  sf_entry        ENDS 
                             C   
 = 0005                      C  sf_default_number   EQU     5h 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Memory arena structure> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-45
Memory arena structure                                      

                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
                             C  ; 
                             C  ; arena item 
                             C  ; 
                             C  arena   STRUC 
 0000  ??                    C  arena_signature     DB  ?               ; 4D fo
				r valid item, 5A for last item 
 0001  ????                  C  arena_owner         DW  ?               ; owner
				 of arena item 
 0003  ????                  C  arena_size          DW  ?               ; size 
				in paragraphs of item 
 0005                        C  arena   ENDS 
                             C   
                             C  ; 
                             C  ; Current structure of the data returned by the
				 international call 
                             C  ; 
                             C   
                             C  internat_block STRUC 
 0000  ????                  C  Date_tim_format DW      ?           ; 0-USA, 1-
				EUR, 2-JAP 
 0002  ??                    C  Currency_sym    DB      ?           ; Currency 
				Symbol 5 bytes 
 0003  ??                    C                  DB      ? 
 0004  ??                    C                  DB      ? 
 0005  ??                    C                  DB      ? 
 0006  ??                    C                  DB      ? 
 0007  ??                    C  Thous_sep       DB      ?           ; Thousands
				 separator 2 bytes 
 0008  ??                    C                  DB      ? 
 0009  ??                    C  Decimal_sep     DB      ?           ; Decimal s
				eparator 2 bytes 
 000A  ??                    C                  DB      ? 
 000B  ??                    C  Date_sep        DB      ?           ; Date sepa
				rator 2 bytes 
 000C  ??                    C                  DB      ? 
 000D  ??                    C  Time_sep        DB      ?           ; Decimal s
				eparator 2 bytes 
 000E  ??                    C                  DB      ? 
 000F  ??                    C  Bit_feild       DB      ?           ; Bit value
				s 
                             C                                      ;   Bit 0 =
				 0 if currency symbol first 
                             C                                      ;         =
				 1 if currency symbol last 
                             C                                      ;   Bit 1 =
				 0 if No space after currency symbol 
                             C                                      ;         =
				 1 if space after currency symbol 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-46
Memory arena structure                                      

 0010  ??                    C  Currency_cents  DB      ?           ; Number of
				 places after currency dec point 
 0011  ??                    C  Time_24         DB      ?           ; 1 if 24 h
				our time, 0 if 12 hour time 
 0012  ????                  C  Map_call        DW      ?           ; Address o
				f case mapping call (DWORD) 
 0014  ????                  C                  DW      ?           ; THIS IS T
				WO WORDS SO IT CAN BE INITIALIZED 
                             C                                      ;  in piece
				s. 
 0016  ??                    C  Data_sep        DB      ?           ; Data list
				 separator character 
 0017  ??                    C                  DB      ? 
 0018                        C  internat_block ENDS 
                             C   
                             C  ; 
                             C  ; Max size of the block returned by the INTERNA
				TIONAL call 
                             C  ; 
 = 0020                      C  internat_block_max      EQU     32 
                             C   
                             C  ; 
                             C  ; CAUTION: The routines in ALLOC.ASM rely on th
				e fact that arena_signature 
                             C  ; and arena_owner_system are all equal to zero 
				and are contained in DI.  Change 
                             C  ; them and change ALLOC.ASM. 
                             C   
 = 0000                      C  arena_owner_system  EQU 0               ; free 
				block indication 
                             C   
 = 004D                      C  arena_signature_normal  EQU 4Dh         ; valid
				 signature, not end of arena 
 = 005A                      C  arena_signature_end     EQU 5Ah         ; valid
				 signature, last block in arena 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C   
                             C  BREAK <Machine instruction definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-47
Machine instruction definitions                             

                             C   
 = 00CD                      C  mi_INT          EQU     0CDh 
 = 00EA                      C  mi_Long_JMP     EQU     0EAh 
 = 009A                      C  mi_Long_CALL    EQU     09Ah 
 = 00CB                      C  mi_Long_RET     EQU     0CBh 
                             C   
                             C  BREAK <Standard I/O assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-48
Standard I/O assignments                                    

                             C   
 = 0000                      C  stdin       EQU     0 
 = 0001                      C  stdout      EQU     1 
 = 0002                      C  stderr      EQU     2 
 = 0003                      C  stdaux      EQU     3 
 = 0004                      C  stdprn      EQU     4 
                             C   
                             C  BREAK <Xenix subfunction assignments> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-49
Xenix subfunction assignments                               

                             C   
 = 0000                      C  open_for_read   EQU 0 
 = 0001                      C  open_for_write  EQU 1 
 = 0002                      C  open_for_both   EQU 2 
                             C   
                             C  BREAK <Xenix error codes> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-50
Xenix error codes                                           

                             C   
                             C  ; 
                             C  ; XENIX calls all return error codes through AX
				.  If an error occurred then 
                             C  ; the carry bit will be set and the error code 
				is in AX.  If no error occurred 
                             C  ; then the carry bit is reset and AX contains r
				eturned info. 
                             C  ; 
                             C   
 =                           C  no_error_occurred               EQU     0      
				                                               
				         ? 
                             C   
 = 0001                      C  error_invalid_function          EQU     1 
 = 0002                      C  error_file_not_found            EQU     2 
 = 0003                      C  error_path_not_found            EQU     3 
 = 0004                      C  error_too_many_open_files       EQU     4 
 = 0005                      C  error_access_denied             EQU     5 
 = 0006                      C  error_invalid_handle            EQU     6 
 = 0007                      C  error_arena_trashed             EQU     7 
 = 0008                      C  error_not_enough_memory         EQU     8 
 = 0009                      C  error_invalid_block             EQU     9 
 = 000A                      C  error_bad_environment           EQU     10 
 = 000B                      C  error_bad_format                EQU     11 
 = 000C                      C  error_invalid_access            EQU     12 
 = 000D                      C  error_invalid_data              EQU     13 
                             C  ;**** unused                    EQU     14 
 = 000F                      C  error_invalid_drive             EQU     15 
 = 0010                      C  error_current_directory         EQU     16 
 = 0011                      C  error_not_same_device           EQU     17 
 = 0012                      C  error_no_more_files             EQU     18 
                             C   
 =                           C  country_not_found               EQU     error_f
				ile_not_found 
 =                           C  alloc_not_enough_memory         EQU     error_n
				ot_enough_memory 
 =                           C  alloc_arena_trashed             EQU     error_a
				rena_trashed 
                             C   
 =                           C  close_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  close_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  chdir_path_not_found            EQU     error_p
				ath_not_found 
                             C   
 =                           C  chmod_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  chmod_access_denied             EQU     error_a
				ccess_denied 
 =                           C  chmod_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-51
Xenix error codes                                           

                             C   
 =                           C  creat_access_denied             EQU     error_a
				ccess_denied 
 =                           C  creat_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  creat_too_many_open_files       EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  curdir_invalid_drive            EQU     error_i
				nvalid_drive 
                             C   
 =                           C  dealloc_invalid_block           EQU     error_i
				nvalid_block 
 =                           C  dealloc_arena_trashed           EQU     error_a
				rena_trashed 
                             C   
 =                           C  dup_invalid_handle              EQU     error_i
				nvalid_handle 
 =                           C  dup_too_many_open_files         EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  dup2_invalid_handle             EQU     error_i
				nvalid_handle 
                             C   
 =                           C  exec_invalid_function           EQU     error_i
				nvalid_function 
 =                           C  exec_bad_environment            EQU     error_b
				ad_environment 
 =                           C  exec_bad_format                 EQU     error_b
				ad_format 
 =                           C  exec_not_enough_memory          EQU     error_n
				ot_enough_memory 
 =                           C  exec_file_not_found             EQU     error_f
				ile_not_found 
                             C   
 =                           C  filetimes_invalid_function      EQU     error_i
				nvalid_function 
 =                           C  filetimes_invalid_handle        EQU     error_i
				nvalid_handle 
                             C   
 =                           C  findfirst_file_not_found        EQU     error_f
				ile_not_found 
 =                           C  findfirst_no_more_files         EQU     error_n
				o_more_files 
 =                           C  findnext_no_more_files          EQU     error_n
				o_more_files 
                             C   
 =                           C  international_invalid_function  EQU     error_i
				nvalid_function 
                             C   
 =                           C  ioctl_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  ioctl_invalid_function          EQU     error_i
				nvalid_function 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-52
Xenix error codes                                           

 =                           C  ioctl_invalid_data              EQU     error_i
				nvalid_data 
                             C   
 =                           C  lseek_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  lseek_invalid_function          EQU     error_i
				nvalid_function 
                             C   
 =                           C  mkdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  mkdir_access_denied             EQU     error_a
				ccess_denied 
                             C   
 =                           C  open_invalid_access             EQU     error_i
				nvalid_access 
 =                           C  open_file_not_found             EQU     error_f
				ile_not_found 
 =                           C  open_access_denied              EQU     error_a
				ccess_denied 
 =                           C  open_too_many_open_files        EQU     error_t
				oo_many_open_files 
                             C   
 =                           C  read_invalid_handle             EQU     error_i
				nvalid_handle 
 =                           C  read_access_denied              EQU     error_a
				ccess_denied 
                             C   
 =                           C  rename_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  rename_not_same_device          EQU     error_n
				ot_same_device 
 =                           C  rename_access_denied            EQU     error_a
				ccess_denied 
                             C   
 =                           C  rmdir_path_not_found            EQU     error_p
				ath_not_found 
 =                           C  rmdir_access_denied             EQU     error_a
				ccess_denied 
 =                           C  rmdir_current_directory         EQU     error_c
				urrent_directory 
                             C   
 =                           C  setblock_invalid_block          EQU     error_i
				nvalid_block 
 =                           C  setblock_arena_trashed          EQU     error_a
				rena_trashed 
 =                           C  setblock_not_enough_memory      EQU     error_n
				ot_enough_memory 
 =                           C  setblock_invalid_function       EQU     error_i
				nvalid_function 
                             C   
 =                           C  unlink_file_not_found           EQU     error_f
				ile_not_found 
 =                           C  unlink_access_denied            EQU     error_a
				ccess_denied 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-53
Xenix error codes                                           

                             C   
 =                           C  write_invalid_handle            EQU     error_i
				nvalid_handle 
 =                           C  write_access_denied             EQU     error_a
				ccess_denied 
                             C   
                             C  BREAK <system call definitions> 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-54
system call definitions                                     

                             C   
 = 0000                      C  Abort                           EQU 0   ;  0   
				   0 
 = 0001                      C  Std_Con_Input                   EQU 1   ;  1   
				   1 
 = 0002                      C  Std_Con_Output                  EQU 2   ;  2   
				   2 
 = 0003                      C  Std_Aux_Input                   EQU 3   ;  3   
				   3 
 = 0004                      C  Std_Aux_Output                  EQU 4   ;  4   
				   4 
 = 0005                      C  Std_Printer_Output              EQU 5   ;  5   
				   5 
 = 0006                      C  Raw_Con_IO                      EQU 6   ;  6   
				   6 
 = 0007                      C  Raw_Con_Input                   EQU 7   ;  7   
				   7 
 = 0008                      C  Std_Con_Input_No_Echo           EQU 8   ;  8   
				   8 
 = 0009                      C  Std_Con_String_Output           EQU 9   ;  9   
				   9 
 = 000A                      C  Std_Con_String_Input            EQU 10  ; 10   
				   A 
 = 000B                      C  Std_Con_Input_Status            EQU 11  ; 11   
				   B 
 = 000C                      C  Std_Con_Input_Flush             EQU 12  ; 12   
				   C 
 = 000D                      C  Disk_Reset                      EQU 13  ; 13   
				   D 
 = 000E                      C  Set_Default_Drive               EQU 14  ; 14   
				   E 
 = 000F                      C  FCB_Open                        EQU 15  ; 15   
				   F 
 = 0010                      C  FCB_Close                       EQU 16  ; 16   
				  10 
 = 0011                      C  Dir_Search_First                EQU 17  ; 17   
				  11 
 = 0012                      C  Dir_Search_Next                 EQU 18  ; 18   
				  12 
 = 0013                      C  FCB_Delete                      EQU 19  ; 19   
				  13 
 = 0014                      C  FCB_Seq_Read                    EQU 20  ; 20   
				  14 
 = 0015                      C  FCB_Seq_Write                   EQU 21  ; 21   
				  15 
 = 0016                      C  FCB_Create                      EQU 22  ; 22   
				  16 
 = 0017                      C  FCB_Rename                      EQU 23  ; 23   
				  17 
 = 0019                      C  Get_Default_Drive               EQU 25  ; 25   
				  19 
 = 001A                      C  Set_DMA                         EQU 26  ; 26   
				  1A 
                             C  ;----+----+----+----+----+----+----+----+----+-
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-55
system call definitions                                     

				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 001F                      C  Get_Default_DPB                 EQU 31  ; 31   
				  1F 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0021                      C  FCB_Random_Read                 EQU 33  ; 33   
				  21 
 = 0022                      C  FCB_Random_Write                EQU 34  ; 34   
				  22 
 = 0023                      C  Get_FCB_File_Length             EQU 35  ; 35   
				  23 
 = 0024                      C  Get_FCB_Position                EQU 36  ; 36   
				  24 
 = 0025                      C  Set_Interrupt_Vector            EQU 37  ; 37   
				  25 
 = 0026                      C  Create_Process_Data_Block       EQU 38  ; 38   
				  26 
 = 0027                      C  FCB_Random_Read_Block           EQU 39  ; 39   
				  27 
 = 0028                      C  FCB_Random_Write_Block          EQU 40  ; 40   
				  28 
 = 0029                      C  Parse_File_Descriptor           EQU 41  ; 41   
				  29 
 = 002A                      C  Get_Date                        EQU 42  ; 42   
				  2A 
 = 002B                      C  Set_Date                        EQU 43  ; 43   
				  2B 
 = 002C                      C  Get_Time                        EQU 44  ; 44   
				  2C 
 = 002D                      C  Set_Time                        EQU 45  ; 45   
				  2D 
 = 002E                      C  Set_Verify_On_Write             EQU 46  ; 46   
				  2E 
                             C  ; Extended functionality group 
 = 002F                      C  Get_DMA                         EQU 47  ; 47   
				  2F 
 = 0030                      C  Get_Version                     EQU 48  ; 48   
				  30 
 = 0031                      C  Keep_Process                    EQU 49  ; 49   
				  31 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-56
system call definitions                                     

 = 0032                      C  Get_DPB                         EQU 50  ; 50   
				  32 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0033                      C  Set_CTRL_C_Trapping             EQU 51  ; 51   
				  33 
 = 0034                      C  Get_InDOS_Flag                  EQU 52  ; 52   
				  34 
 = 0035                      C  Get_Interrupt_Vector            EQU 53  ; 53   
				  35 
 = 0036                      C  Get_Drive_Freespace             EQU 54  ; 54   
				  36 
 = 0037                      C  Char_Oper                       EQU 55  ; 55   
				  37 
 = 0038                      C  International                   EQU 56  ; 56   
				  38 
                             C  ;   Directory Group 
 = 0039                      C  MKDir                           EQU 57  ; 57   
				  39 
 = 003A                      C  RMDir                           EQU 58  ; 58   
				  3A 
 = 003B                      C  CHDir                           EQU 59  ; 59   
				  3B 
                             C  ;   File Group 
 = 003C                      C  Creat                           EQU 60  ; 60   
				  3C 
 = 003D                      C  Open                            EQU 61  ; 61   
				  3D 
 = 003E                      C  Close                           EQU 62  ; 62   
				  3E 
 = 003F                      C  Read                            EQU 63  ; 63   
				  3F 
 = 0040                      C  Write                           EQU 64  ; 64   
				  40 
 = 0041                      C  Unlink                          EQU 65  ; 65   
				  41 
 = 0042                      C  LSeek                           EQU 66  ; 66   
				  42 
 = 0043                      C  CHMod                           EQU 67  ; 67   
				  43 
 = 0044                      C  IOCtl                           EQU 68  ; 68   
				  44 
 = 0045                      C  XDup                            EQU 69  ; 69   
				  45 
 = 0046                      C  XDup2                           EQU 70  ; 70   
				  46 
 = 0047                      C  Current_Dir                     EQU 71  ; 71   
				  47 
                             C  ;    Memory Group 
 = 0048                      C  Alloc                           EQU 72  ; 72   
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-57
system call definitions                                     

				  48 
 = 0049                      C  Dealloc                         EQU 73  ; 73   
				  49 
 = 004A                      C  Setblock                        EQU 74  ; 74   
				  4A 
                             C  ;    Process Group 
 = 004B                      C  Exec                            EQU 75  ; 75   
				  4B 
 = 004C                      C  Exit                            EQU 76  ; 76   
				  4C 
 = 004D                      C  Wait                            EQU 77  ; 77   
				  4D 
 = 004E                      C  Find_First                      EQU 78  ; 78   
				  4E 
                             C  ;   Special Group 
 = 004F                      C  Find_Next                       EQU 79  ; 79   
				  4F 
                             C  ; SPECIAL SYSTEM GROUP 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0050                      C  Set_Current_PDB                 EQU 80  ; 80   
				  50 
 = 0051                      C  Get_Current_PDB                 EQU 81  ; 81   
				  51 
 = 0052                      C  Get_In_Vars                     EQU 82  ; 82   
				  52 
 = 0053                      C  SetDPB                          EQU 83  ; 83   
				  53 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
 = 0054                      C  Get_Verify_On_Write             EQU 84  ; 84   
				  54 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;                                              
				                            ; 
 = 0055                      C  Dup_PDB                         EQU 85  ; 85   
				  55 
                             C  ;                                              
				                            ; 
                             C  ;            C  A  V  E  A  T     P  R  O  G  R
				  A  M  M  E  R             ; 
                             C  ;----+----+----+----+----+----+----+----+----+-
				---+----+----+----+----+----; 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-58
system call definitions                                     

 = 0056                      C  Rename                          EQU 86  ; 86   
				  56 
 = 0057                      C  File_Times                      EQU 87  ; 87   
				  57 
 = 0058                      C  AllocOper                       EQU 88  ; 88   
				  58 
                             C  ; Network extention system calls 
 = 0059                      C  GetExtendedError                EQU 89  ; 89   
				  59 
 = 005A                      C  CreateTempFile                  EQU 90  ; 90   
				  5A 
 = 005B                      C  CreateNewFile                   EQU 91  ; 91   
				  5B 
 = 005C                      C  LockOper                        EQU 92  ; 92   
				  5C Lock and Unlock 
 = 005D                      C  ServerCall                      EQU 93  ; 93   
				  5D CommitAll, ServerDOSCall, 
                             C                                          ;      
				     CloseByName, CloseUser, 
                             C                                          ;      
				     CloseUserProcess, 
                             C                                          ;      
				     GetOpenFileList 
 = 005E                      C  UserIDOper                      EQU 94  ; 94   
				  5E Get and Set 
 = 005F                      C  AssignOper                      EQU 95  ; 95   
				  5F On, Off, Get, Set, Cancel 
                             C   
 = 00F8                      C  Set_Oem_Handler                 EQU 248 ; 248  
				  F8 
 = 00F9                      C  OEM_C1                          EQU 249 ; 249  
				  F9 
 = 00FA                      C  OEM_C2                          EQU 250 ; 250  
				  FA 
 = 00FB                      C  OEM_C3                          EQU 251 ; 251  
				  FB 
 = 00FC                      C  OEM_C4                          EQU 252 ; 252  
				  FC 
 = 00FD                      C  OEM_C5                          EQU 253 ; 253  
				  FD 
 = 00FE                      C  OEM_C6                          EQU 254 ; 254  
				  FE 
 = 00FF                      C  OEM_C7                          EQU 255 ; 255  
				  FF 
                             C  SUBTTL 
                                 
                             C          INCLUDE DEVSYM.ASM 
                             C  SUBTTL DEVICE TABLE AND SRH DEFINITION 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-59
DEVICE TABLE AND SRH DEFINITION                             

                             C  PAGE 
                             C  ; The device table list has the form: 
                             C  SYSDEV  STRUC 
 0000  ????????              C  SDEVNEXT        DD      ?       ;Pointer to nex
				t device header 
 0004  ????                  C  SDEVATT         DW      ?       ;Attributes of 
				the device 
 0006  ????                  C  SDEVSTRAT       DW      ?       ;Strategy entry
				 point 
 0008  ????                  C  SDEVINT         DW      ?       ;Interrupt entr
				y point 
 000A  0008[                 C  SDEVNAME        DB      8 DUP (?) ;Name of devi
				ce (only first byte used for block) 
            ??               C  
                         ]   C  
                             C  
 0012                        C  SYSDEV  ENDS 
                             C   
                             C  ;Attribute bit masks 
 = 8000                      C  DEVTYP  EQU     8000H           ;Bit 15 - 1  if
				 Char, 0 if block 
 = 4000                      C  DEVIOCTL EQU    4000H           ;Bit 14 - CONTR
				OL mode bit 
 = 2000                      C  ISFATBYDEV EQU  2000H           ;Bit 13 - Devic
				e uses FAT ID bytes, comp media. 
 = 0001                      C  ISCIN   EQU     0001H           ;Bit 0 - This d
				evice is the console input. 
 = 0002                      C  ISCOUT  EQU     0002H           ;Bit 1 - This d
				evice is the console output. 
 = 0004                      C  ISNULL  EQU     0004H           ;Bit 2 - This d
				evice is the null device. 
 = 0008                      C  ISCLOCK EQU     0008H           ;Bit 3 - This d
				evice is the clock device. 
 = 0010                      C  ISIBM   EQU     0010H           ;Bit 4 - This d
				evice is special 
                             C   
                             C  ;Static Reguest Header 
                             C  SRHEAD  STRUC 
 0000  ??                    C  REQLEN  DB      ?               ;Length in byte
				s of request block 
 0001  ??                    C  REQUNIT DB      ?               ;Device unit nu
				mber 
 0002  ??                    C  REQFUNC DB      ?               ;Type of reques
				t 
 0003  ????                  C  REQSTAT DW      ?               ;Status Word 
 0005  0008[                 C          DB      8 DUP(?)        ;Reserved for q
				ueue links 
            ??               C  
                         ]   C  
                             C  
 000D                        C  SRHEAD  ENDS 
                             C   
                             C  ;Status word masks 
 = 8000                      C  STERR   EQU     8000H           ;Bit 15 - Error
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-60
DEVICE TABLE AND SRH DEFINITION                             

				 
 = 0200                      C  STBUI   EQU     0200H           ;Bit 9 - Buisy 
 = 0100                      C  STDON   EQU     0100H           ;Bit 8 - Done 
 = 00FF                      C  STECODE EQU     00FFH           ;Error code 
 = 0000                      C  WRECODE EQU     0 
                             C   
                             C  ;Function codes 
 = 0000                      C  DEVINIT EQU     0               ;Initialization
				 
 = 001A                      C  DINITHL EQU     26              ;Size of init h
				eader 
 = 0001                      C  DEVMDCH EQU     1               ;Media check 
 = 000F                      C  DMEDHL  EQU     15              ;Size of media 
				check header 
 = 0002                      C  DEVBPB  EQU     2               ;Get BPB 
 = 0003                      C  DEVRDIOCTL EQU  3               ;IOCTL read 
 = 0016                      C  DBPBHL  EQU     22              ;Size of Get BP
				B header 
 = 0004                      C  DEVRD   EQU     4               ;Read 
 = 0016                      C  DRDWRHL EQU     22              ;Size of RD/WR 
				header 
 = 0005                      C  DEVRDND EQU     5               ;Non destructiv
				e read no wait (character devs) 
 = 000E                      C  DRDNDHL EQU     14              ;Size of non de
				structive read header 
 = 0006                      C  DEVIST  EQU     6               ;Input status 
 = 000D                      C  DSTATHL EQU     13              ;Size of status
				 header 
 = 0007                      C  DEVIFL  EQU     7               ;Input flush 
 = 000F                      C  DFLSHL  EQU     15              ;Size of flush 
				header 
 = 0008                      C  DEVWRT  EQU     8               ;Write 
 = 0009                      C  DEVWRTV EQU     9               ;Write with ver
				ify 
 = 000A                      C  DEVOST  EQU     10              ;Output status 
 = 000B                      C  DEVOFL  EQU     11              ;Output flush 
 = 000C                      C  DEVWRIOCTL EQU  12              ;IOCTL write 
                                 
                             C          INCLUDE COMSW.ASM 
                             C  ; Use the following booleans to set assembly fl
				ags 
 = 0000                      C  FALSE   EQU     0 
 = FFFF                      C  TRUE    EQU     NOT FALSE 
                             C   
                             C  ENDIF 
                             C   
 =                           C  IBMVER  EQU     IBM  	; Switch to build IBM ver
				sion of Command 
 = FFFF                      C  MSVER   EQU     NOT IBM ; Switch to build MS-DO
				S version of Command 
                             C   
 =                           C  HIGHMEM EQU     FALSE   ; Run resident part abo
				ve transient (high memory) 
 =                           C  KANJI   EQU     FALSE   ; Support for dual byte
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-61
DEVICE TABLE AND SRH DEFINITION                             

				 Microsoft KANJI standard 
 =                           C  IBMJAPAN        EQU     FALSE   ;MUST BE TRUE (
				along with IBM and KANJI) 
                                 
                             C          INCLUDE COMEQU.ASM 
                             C  ;************************************* 
                             C  ; COMMAND EQUs which are not switch dependant 
                             C   
                             C  IFDEF   IBM 
                             C          INCLUDE IFEQU.ASM 
                             C  ;************************************* 
                             C  ; COMMAND EQUs which are switch dependant 
                             C   
                             C  ENDIF 
                             C   
                             C  ENDIF 
                             C   
                             C   
 = 003E                      C  SYM     EQU     ">" 
                             C   
 = 0017                      C  LINPERPAG       EQU     23 
 = 0001                      C  NORMPERLIN      EQU     1 
 = 0005                      C  WIDEPERLIN      EQU     5 
 = 0080                      C  COMBUFLEN       EQU     128     ; Length of com
				mmand buffer 
                             C   
 = 003A                      C  DRVCHAR         EQU     ":" 
                             C   
 = 005C                      C  FCB     EQU     5CH 
                             C   
                             C  VARSTRUC        STRUC 
 0000  ??                    C  ISDIR   DB      ? 
 0001  ??                    C  SIZ     DB      ? 
 0002  ????                  C  TTAIL   DW      ? 
 0004  ??                    C  INFO    DB      ? 
 0005  0054[                 C  BUF     DB      DIRSTRLEN + 20 DUP (?) 
            ??               C  
                         ]   C  
                             C  
 0059                        C  VARSTRUC        ENDS 
                             C   
 = 0001                      C  WSWITCH EQU     1               ; Wide display 
				during DIR 
 = 0002                      C  PSWITCH EQU     2               ; Pause (or Pag
				e) mode during DIR 
 = 0004                      C  ASWITCH EQU     4               ; ASCII mode du
				ring COPY 
 = 0008                      C  BSWITCH EQU     8               ; Binary mode d
				uring COPY 
 = 0010                      C  VSWITCH EQU     10H             ; Verify switch
				 
 = 8000                      C  GOTSWITCH EQU   8000H           ; Meta switch s
				et if switch character encountered 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-62
DEVICE TABLE AND SRH DEFINITION                             

                                 
 0000                           CODERES SEGMENT PUBLIC 
 0000                           CODERES ENDS 
                                 
 0000                           DATARES SEGMENT PUBLIC BYTE 
                                        EXTRN   COMBAD:BYTE,NEEDCOM:BYTE,DRVMSG
				:BYTE 
                                        EXTRN   DEFMSG:BYTE,PROMPT:BYTE,EXECEME
				S:BYTE,EXEBAD:BYTE 
                                        EXTRN   TOOBIG:BYTE,NOCOM:BYTE,RBADNAM:
				BYTE,INT_2E_RET:DWORD 
                                        EXTRN   NOHANDMES:BYTE,BMEMMES:BYTE,HAL
				TMES:BYTE,FRETMES:BYTE 
                                        EXTRN   PARENT:WORD,HANDLE01:WORD,LOADI
				NG:BYTE,BATCH:WORD 
                                        EXTRN   TRNSEG:WORD,COMDRV:BYTE,MEMSIZ:
				WORD,SUM:WORD,EXTCOM:BYTE 
                                        EXTRN   IO_SAVE:WORD,PERMCOM:BYTE,SINGL
				ECOM:WORD,VERVAL:WORD 
                                        EXTRN   PIPEFLAG:BYTE,SAVE_PDB:WORD,COM
				SPEC:BYTE,TRANS:WORD 
                                        EXTRN   TRANVARS:BYTE,LTPA:WORD,RSWITCH
				AR:BYTE,RDIRCHAR:BYTE 
                                        EXTRN   RETCODE:WORD,FORFLAG:BYTE 
                                 
                                        ENDIF 
                                 
 0000                           DATARES ENDS 
                                 
 0000                           ENVIRONMENT SEGMENT PUBLIC PARA        ; Defaul
				t COMMAND environment 
 0000                           ENVIRONMENT ENDS 
                                 
 0000                           INIT    SEGMENT PUBLIC PARA 
                                        EXTRN   CONPROC:NEAR 
 0000                           INIT    ENDS 
                                 
 0000                           TAIL    SEGMENT PUBLIC PARA 
 0000                           TAIL    ENDS 
                                 
 0000                           TRANCODE        SEGMENT PUBLIC PARA 
 0000                           TRANCODE        ENDS 
                                 
 0000                           TRANDATA        SEGMENT PUBLIC BYTE 
                                        EXTRN   TRANDATAEND:BYTE 
 0000                           TRANDATA        ENDS 
                                 
 0000                           TRANSPACE       SEGMENT PUBLIC BYTE 
                                        EXTRN   TRANSPACEEND:BYTE,HEADCALL:DWOR
				D 
 0000                           TRANSPACE       ENDS 
                                 
 0000                           TRANTAIL        SEGMENT PUBLIC PARA 
 0000                           TRANTAIL        ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-63
DEVICE TABLE AND SRH DEFINITION                             

                                 
 0000                           ZEXEC_CODE      SEGMENT PUBLIC PARA 
 0000                           ZEXEC_CODE      ENDS 
                                 
 0000                           ZEXEC_DATA      SEGMENT PUBLIC BYTE 
 0000                           ZEXEC_DATA      ENDS 
                                 
                                RESGROUP        GROUP   CODERES,DATARES,ENVIRON
				MENT,INIT,TAIL 
                                TRANGROUP       GROUP   TRANCODE,TRANDATA,TRANS
				PACE,TRANTAIL 
                                EGROUP          GROUP   ZEXEC_CODE,ZEXEC_DATA 
                                 
 0000                           ENVIRONMENT SEGMENT PUBLIC PARA        ; Defaul
				t COMMAND environment 
                                 
                                        PUBLIC  ECOMSPEC,ENVIREND,PATHSTRING 
                                 
 0000                                   ORG     0 
 0000  0010[                    ENVARENA DB     10H DUP (?)     ; Pad for mem a
				rena 
            ??                  
                         ]      
                                
 0010  50 41 54 48 3D           PATHSTRING DB   "PATH=" 
 0015                           USERPATH LABEL  BYTE 
                                 
 0015  00                               DB      0               ; Null path 
 0016  43 4F 4D 53 50 45 43             DB      "COMSPEC=" 
       3D                       
 001E  2F 43 4F 4D 4D 41 4E     ECOMSPEC DB     "/COMMAND.COM" 
       44 2E 43 4F 4D           
 002A  0086[                            DB      134 DUP (0) 
            00                  
                         ]      
                                
                                 
 00B0                           ENVIREND        LABEL   BYTE 
                                 
 = 00A0                         ENVIRONSIZ EQU  $-PATHSTRING 
 = 0092                         ENVIRONSIZ2 EQU $-ECOMSPEC 
 00B0                           ENVIRONMENT ENDS 
                                 
                                 
                                ; START OF RESIDENT PORTION 
                                 
 0000                           CODERES SEGMENT PUBLIC 
                                 
                                        PUBLIC  GETCOMDSK2,LODCOM,THEADFIX,CONT
				CTERM,LOADCOM,INT_2E,LODCOM1 
                                        PUBLIC  CHKSUM,SETVECT,EXT_EXEC,TREMCHE
				CK,RESTHAND,CONTC,RSTACK 
                                        PUBLIC  SAVHAND 
                                 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-64
DEVICE TABLE AND SRH DEFINITION                             

                                        ENDIF 
                                 
                                ASSUME  CS:RESGROUP,DS:NOTHING,ES:NOTHING,SS:NO
				THING 
                                 
                                        EXTRN   RPRINT:NEAR,ASKEND:NEAR,DSKERR:
				NEAR 
                                 
                                 
 0000                                   ORG     0 
 = 0000                         ZERO    =       $ 
                                 
 0100                                   ORG     100H 
                                 
 0100                           PROGSTART: 
 0100  E9 0000 E                        JMP     RESGROUP:CONPROC 
                                 
 0103  007D[                            DB      (80H - 3) DUP (?) 
            ??                  
                         ]      
                                
 0180                           RSTACK  LABEL   WORD 
                                 
                                ENDIF 
                                 
 0180                           EXEC_ERR:                       ; Select the co
				rrect error message 
 0180  BA 0000 E                        MOV     DX,OFFSET RESGROUP:RBADNAM 
 0183  3D 0002                          CMP     AX,exec_file_not_found 
 0186  74 18                            JZ      GOTEXECEMES 
 0188  3D 0005                          CMP     AX,error_access_denied 
 018B  74 13                            JZ      GOTEXECEMES 
 018D  BA 0000 E                        MOV     DX,OFFSET RESGROUP:TOOBIG 
 0190  3D 0008                          CMP     AX,exec_not_enough_memory 
 0193  74 0B                            JZ      GOTEXECEMES 
 0195  BA 0000 E                        MOV     DX,OFFSET RESGROUP:EXEBAD 
 0198  3D 000B                          CMP     AX,exec_bad_format 
 019B  74 03                            JZ      GOTEXECEMES 
 019D  BA 0000 E                        MOV     DX,OFFSET RESGROUP:EXECEMES 
 01A0                           GOTEXECEMES: 
 01A0  0E                               PUSH    CS 
 01A1  1F                               POP     DS 
 01A2  E8 0000 E                        CALL    RPRINT 
 01A5  EB 13                            JMP     SHORT NOEXEC 
                                 
 01A7                           EXT_EXEC: 
                                ; 
                                ; we are now running in free space.  anything w
				e do from here 
                                ; on may get trashed.  Move the stack (also in 
				free space) to 
                                ; allocated space because since EXEC restores t
				he stack, 
                                ; somebody may trash what is on the stack. 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-65
DEVICE TABLE AND SRH DEFINITION                             

                                ; 
 01A7  8C C9                            MOV     CX,CS 
 01A9  8E D1                            MOV     SS,CX 
 01AB  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTACK 
                                ; 
                                ; Oops!! We have to make sure that the EXEC cod
				e doesn't blop a newstack! 
                                ; 
                                ; 
 01AE  CD 21                            INT     int_command     ; Do the EXEC 
 01B0  72 CE                            JC      EXEC_ERR        ; EXEC failed 
 01B2                           EXEC_WAIT: 
 01B2  B4 4D                            MOV     AH,WAIT 
 01B4  CD 21                            INT     int_command     ; Get the retur
				n code 
 01B6  2E: A3 0000 E                    MOV     [RETCODE],AX 
 01BA                           NOEXEC: 
 01BA  E9 028B R                        JMP     LODCOM 
                                 
 01BD                           CONTC: 
 01BD  FB                               STI 
 01BE  8C C8                            MOV     AX,CS 
 01C0  8E D8                            MOV     DS,AX 
                                ASSUME  DS:RESGROUP 
 01C2  B4 0D                            MOV     AH,DISK_RESET 
 01C4  CD 21                            INT     int_command     ; Reset disks i
				n case files were open 
 01C6  F7 06 0000 E FFFF                TEST    [BATCH],-1 
 01CC  74 03                            JZ      CONTCTERM 
 01CE  E9 0000 E                        JMP     ASKEND          ; See if user w
				ants to terminate batch 
 01D1                           CONTCTERM: 
 01D1  33 ED                            XOR     BP,BP           ; Indicate no r
				ead 
 01D3  C6 06 0000 E 00                  MOV     [FORFLAG],0     ; Turn off for 
				processing 
 01D8  C6 06 0000 E 00                  MOV     [PIPEFLAG],0    ; Turn off any 
				pipe 
 01DD  83 3E 0000 E 00                  CMP     [SINGLECOM],0   ; See if we nee
				d to set SINGLECOM 
 01E2  74 06                            JZ      NOSETSING 
 01E4  C7 06 0000 E FFFF                MOV     [SINGLECOM],-1  ; Cause termina
				tion on pipe, batch, for 
 01EA                           NOSETSING: 
 01EA  80 3E 0000 E 00                  CMP     [EXTCOM],0 
 01EF  75 03                            JNZ     DODAB           ; Internal ^C 
 01F1  E9 02D0 R                        JMP     LODCOM1 
 01F4                           DODAB: 
 01F4  F9                               STC                     ; Tell DOS to a
				bort 
 01F5                           ZZY     PROC    FAR 
 01F5  CB                               RET                     ; Leave flags o
				n stack 
                                ZZY     ENDP 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-66
DEVICE TABLE AND SRH DEFINITION                             

                                 
 01F6                           BADMEMERR:                              ; Alloc
				ation error loading transient 
 01F6  BA 0000 E                        MOV     DX,OFFSET RESGROUP:BMEMMES 
 01F9                           FATALC: 
 01F9  0E                               PUSH    CS 
 01FA  1F                               POP     DS 
 01FB  E8 0000 E                        CALL    RPRINT 
 01FE  80 3E 0000 E 00                  CMP     [PERMCOM],0 
 0203  74 0F                            JZ      FATALRET 
 0205  83 3E 0000 E 00                  CMP     [SINGLECOM],0                  
				 ; If PERMCOM and SINGLECOM 
 020A  75 08                            JNZ     FATALRET                       
				 ; Must take INT_2E exit 
 020C  BA 0000 E                        MOV     DX,OFFSET RESGROUP:HALTMES 
 020F  E8 0000 E                        CALL    RPRINT 
 0212                           STALL: 
 0212  EB FE                            JMP     STALL                          
				 ; Crash the system nicely 
                                 
 0214                           FATALRET: 
 0214  BA 0000 E                        MOV     DX,OFFSET RESGROUP:FRETMES 
 0217  E8 0000 E                        CALL    RPRINT 
 021A                           FATALRET2: 
 021A  80 3E 0000 E 00                  CMP     [PERMCOM],0                    
				 ; If we get here and PERMCOM, 
 021F  75 0C                            JNZ     RET_2E                         
				 ; must be INT_2E 
                                ENDIF 
 0221  A1 0000 E                        MOV     AX,[PARENT] 
 0224  2E: A3 0016                      MOV     WORD PTR CS:[PDB_Parent_PID],AX
				 
 0228  B8 4C00                          MOV     AX,(EXIT SHL 8)                
				 ; Return to lower level 
 022B  CD 21                            INT     int_command 
                                 
 022D                           RET_2E: 
 022D  0E                               PUSH    CS 
 022E  1F                               POP     DS 
                                ASSUME  DS:RESGROUP,ES:NOTHING,SS:NOTHING 
 022F  C7 06 0000 E 0000                MOV     [SINGLECOM],0   ; Turn off sing
				lecom 
 0235  8E 06 0000 E                     MOV     ES,[LTPA] 
 0239  B4 49                            MOV     AH,DEALLOC 
 023B  CD 21                            INT     int_command             ; Free 
				up space used by transient 
 023D  8B 1E 0000 E                     MOV     BX,[SAVE_PDB] 
 0241  B4 50                            MOV     AH,SET_CURRENT_PDB 
 0243  CD 21                            INT     int_command             ; Curre
				nt process is user 
 0245  A1 0000 E                        MOV     AX,[RETCODE] 
 0248  80 3E 0000 E 00                  CMP     [EXTCOM],0 
 024D  75 02                            JNZ     GOTECODE 
 024F  33 C0                            XOR     AX,AX           ; Internals alw
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-67
DEVICE TABLE AND SRH DEFINITION                             

				ays return 0 
 0251                           GOTECODE: 
 0251  C6 06 0000 E 01                  MOV     [EXTCOM],1      ; Force externa
				l 
 0256  FF 2E 0000 E                     JMP     [INT_2E_RET]    ;"IRET" 
                                 
 025A                           INT_2E:                         ; Magic command
				 executer 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 025A  2E: 8F 06 0000 E                 POP     WORD PTR [INT_2E_RET] 
 025F  2E: 8F 06 0002 E                 POP     WORD PTR [INT_2E_RET+2]    ;Get
				 return address 
 0264  58                               POP     AX              ;Chuck flags 
 0265  0E                               PUSH    CS 
 0266  07                               POP     ES 
 0267  BF 0080                          MOV     DI,80H 
 026A  B9 0040                          MOV     CX,64 
 026D  F3/ A5                           REP     MOVSW 
 026F  B4 51                            MOV     AH,GET_CURRENT_PDB 
 0271  CD 21                            INT     int_command             ; Get u
				ser's header 
 0273  2E: 89 1E 0000 E                 MOV     [SAVE_PDB],BX 
 0278  B4 50                            MOV     AH,SET_CURRENT_PDB 
 027A  8C CB                            MOV     BX,CS 
 027C  CD 21                            INT     int_command             ; Curre
				nt process is me 
 027E  2E: C7 06 0000 E 0081            MOV     [SINGLECOM],81H 
 0285  2E: C6 06 0000 E 01              MOV     [EXTCOM],1      ; Make sure thi
				s case forced 
                                 
 028B                           LODCOM:                         ; Termination h
				andler 
 028B  2E: 80 3E 0000 E 00              CMP     [EXTCOM],0 
 0291  74 3D                            JZ      LODCOM1         ; If internal, 
				memory already allocated 
 0293  BB FFFF                          MOV     BX,0FFFFH 
 0296  B4 48                            MOV     AH,ALLOC 
 0298  CD 21                            INT     int_command 
 029A  B8 000F E                        MOV     AX,OFFSET TRANGROUP:TRANSPACEEN
				D + 15 
 029D  B1 04                            MOV     CL,4 
 029F  D3 E8                            SHR     AX,CL 
                                 
                                        ENDIF 
                                 
 02A1  05 0020                          ADD     AX,20H 
 02A4  3B D8                            CMP     BX,AX           ; Is less than 
				512 byte buffer worth it? 
 02A6  73 03                            JNC     MEMOK 
 02A8                           BADMEMERRJ: 
 02A8  E9 01F6 R                        JMP BADMEMERR           ; Not enough me
				mory 
 02AB                           MEMOK: 
 02AB  B4 48                            MOV     AH,ALLOC 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-68
DEVICE TABLE AND SRH DEFINITION                             

 02AD  CD 21                            INT     int_command 
 02AF  72 F7                            JC      BADMEMERRJ      ; Memory arenas
				 probably trashed 
 02B1  2E: C6 06 0000 E 00              MOV     [EXTCOM],0      ; Flag not to A
				LLOC again 
 02B7  2E: A3 0000 E                    MOV     [LTPA],AX       ; New TPA is ba
				se just allocated 
 02BB  03 D8                            ADD     BX,AX 
 02BD  2E: 89 1E 0000 E                 MOV     [MEMSIZ],BX 
                                 
 02C2  B8 000F E                        MOV     AX,OFFSET TRANGROUP:TRANSPACEEN
				D + 15 
 02C5  B1 04                            MOV     CL,4 
 02C7  D3 E8                            SHR     AX,CL 
                                 
                                        ENDIF 
                                 
 02C9  2B D8                            SUB     BX,AX 
 02CB  2E: 89 1E 0000 E                 MOV     [TRNSEG],BX     ; Transient sta
				rts here 
 02D0                           LODCOM1: 
 02D0  8C C8                            MOV     AX,CS 
 02D2  8E D0                            MOV     SS,AX 
                                ASSUME  SS:RESGROUP 
 02D4  BC 0180 R                        MOV     SP,OFFSET RESGROUP:RSTACK 
 02D7  8E D8                            MOV     DS,AX 
                                ASSUME  DS:RESGROUP 
 02D9  E8 0359 R                        CALL    HEADFIX     ; Make sure files c
				losed stdin and stdout restored 
 02DC  33 ED                            XOR     BP,BP           ; Flag command 
				ok 
 02DE  B8 FFFF                          MOV     AX,-1 
 02E1  87 06 0000 E                     XCHG    AX,[VERVAL] 
 02E5  3D FFFF                          CMP     AX,-1 
 02E8  74 04                            JZ      NOSETVER 
 02EA  B4 2E                            MOV     AH,SET_VERIFY_ON_WRITE  ; AL ha
				s correct value 
 02EC  CD 21                            INT     int_command 
 02EE                           NOSETVER: 
 02EE  83 3E 0000 E FF                  CMP     [SINGLECOM],-1 
 02F3  75 03                            JNZ     NOSNG 
 02F5  E9 021A R                        JMP     FATALRET2       ; We have finis
				hed the single command 
 02F8                           NOSNG: 
 02F8  E8 045E R                        CALL    SETVECT 
                                 
                                ENDIF 
                                 
 02FB  E8 0447 R                        CALL    CHKSUM          ; Check the tra
				nsient 
 02FE  3B 16 0000 E                     CMP     DX,[SUM] 
 0302  74 16                            JZ      HAVCOM          ; Transient OK 
 0304                           BOGUS_COM: 
 0304  C6 06 0000 E 01                  MOV     [LOADING],1     ; Flag DSKERR r
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-69
DEVICE TABLE AND SRH DEFINITION                             

				outine 
 0309  E8 03F8 R                        CALL    LOADCOM 
 030C                           CHKSAME: 
                                 
                                ENDIF 
                                 
 030C  E8 0447 R                        CALL    CHKSUM 
 030F  3B 16 0000 E                     CMP     DX,[SUM] 
 0313  74 05                            JZ      HAVCOM          ; Same COMMAND 
 0315                           ALSO_BOGUS: 
 0315  E8 043F R                        CALL    WRONGCOM 
 0318  EB F2                            JMP     SHORT CHKSAME 
 031A                           HAVCOM: 
 031A  B8 3700                          MOV     AX,CHAR_OPER SHL 8 
 031D  CD 21                            INT     int_command 
 031F  88 16 0000 E                     MOV     [RSWITCHAR],DL 
 0323  80 FA 2F                         CMP     DL,'/' 
 0326  75 05                            JNZ     USESLASH 
 0328  C6 06 0000 E 5C                  MOV     [RDIRCHAR],'\'          ; Selec
				t alt path separator 
 032D                           USESLASH: 
 032D  C6 06 0000 E 00                  MOV     [LOADING],0             ; Flag 
				to DSKERR 
 0332  BE 0000 E                        MOV     SI,OFFSET RESGROUP:TRANVARS 
 0335  BF 0000 E                        MOV     DI,OFFSET TRANGROUP:HEADCALL 
 0338  8E 06 0000 E                     MOV     ES,[TRNSEG] 
 033C  FC                               CLD 
 033D  B9 0008                          MOV     CX,8 
 0340  F3/ A5                           REP     MOVSW                   ; Trans
				fer INFO to transient 
 0342  A1 0000 E                        MOV     AX,[MEMSIZ] 
 0345  A3 0002                          MOV     WORD PTR DS:[PDB_block_len],AX 
				 ; Adjust my own header 
 0348  FF 2E 0000 E                     JMP     DWORD PTR [TRANS] 
                                 
                                ; Far call to REMCHECK for TRANSIENT 
 034C                           TREMCHECK PROC   FAR 
 034C  E8 0350 R                        CALL    REMCHECK 
 034F  CB                               RET 
                                TREMCHECK ENDP 
                                 
 0350                           REMCHECK: 
                                ;All registers preserved. Returns zero if media
				 removable, NZ if fixed 
                                ; AL is drive (0=DEF, 1=A,...) 
                                        ELSE 
 0350  50                               PUSH    AX 
                                        ENDIF 
                                 
 0351  33 C0                            XOR     AX,AX           ;Zero 
                                 
                                        ENDIF 
                                 
 0353  58                               POP     AX 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-70
DEVICE TABLE AND SRH DEFINITION                             

 0354  C3                               RET 
                                 
                                ; Far call to HEADFIX for TRANSIENT 
 0355                           THEADFIX PROC   FAR 
 0355  E8 0359 R                        CALL    HEADFIX 
 0358  CB                               RET 
                                THEADFIX ENDP 
                                 
 0359                           HEADFIX: 
 0359  33 DB                            XOR     BX,BX           ; Clean up head
				er 
 035B  8B 0E 0000 E                     MOV     CX,[IO_SAVE] 
 035F  8B 16 0018                       MOV     DX,WORD PTR DS:[PDB_JFN_Table] 
 0363  3A CA                            CMP     CL,DL 
 0365  74 08                            JZ      CHK1            ; Stdin matches
				 
 0367  B4 3E                            MOV     AH,CLOSE 
 0369  CD 21                            INT     int_command 
 036B  88 0E 0018                       MOV     DS:[PDB_JFN_Table],CL   ; Resto
				re stdin 
 036F                           CHK1: 
 036F  43                               INC     BX 
 0370  3A EE                            CMP     CH,DH           ; Stdout matche
				s 
 0372  74 08                            JZ      CHKOTHERHAND 
 0374  B4 3E                            MOV     AH,CLOSE 
 0376  CD 21                            INT     int_command 
 0378  88 2E 0019                       MOV     DS:[PDB_JFN_Table+1],CH ; Resto
				re stdout 
 037C                           CHKOTHERHAND: 
 037C  83 C3 04                         ADD     BX,4                    ; Skip 
				2,3,4 
 037F  B9 000F                          MOV     CX,FilPerProc - 5       ; Alrea
				dy done 0,1,2,3,4 
 0382                           CLOSELOOP: 
 0382  B4 3E                            MOV     AH,CLOSE 
 0384  CD 21                            INT     int_command 
 0386  43                               INC     BX 
 0387  E2 F9                            LOOP    CLOSELOOP 
 0389  C3                               RET 
                                 
 038A                           SAVHAND: 
                                ASSUME  DS:NOTHING,ES:NOTHING,SS:NOTHING 
 038A  1E                               PUSH    DS 
 038B  53                               PUSH    BX              ; Set stdin to 
				sterr, stdout to stderr 
 038C  50                               PUSH    AX 
 038D  B4 51                            MOV     AH,GET_CURRENT_PDB 
 038F  CD 21                            INT     int_command             ; Get u
				ser's header 
 0391  8E DB                            MOV     DS,BX 
 0393  A1 0018                          MOV     AX,WORD PTR DS:[PDB_JFN_Table] 
 0396  2E: A3 0000 E                    MOV     [HANDLE01],AX           ; Save 
				user's stdin, stdout 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-71
DEVICE TABLE AND SRH DEFINITION                             

 039A  A0 001A                          MOV     AL,DS:[PDB_JFN_Table+2] 
 039D  8A E0                            MOV     AH,AL 
 039F  A3 0018                          MOV     WORD PTR DS:[PDB_JFN_Table],AX 
				  ; Dup stderr 
 03A2  58                               POP     AX 
 03A3  5B                               POP     BX 
 03A4  1F                               POP     DS 
 03A5  C3                               RET 
                                 
                                ASSUME  DS:RESGROUP 
 03A6                           GETCOMDSK2: 
 03A6  E8 03C5 R                        CALL    GETCOMDSK 
 03A9  E9 02D0 R                        JMP     LODCOM1         ; Memory alread
				y allocated 
                                 
 03AC                           RESTHAND: 
 03AC  1E                               PUSH    DS 
 03AD  53                               PUSH    BX              ; Restore stdin
				, stdout to user 
 03AE  50                               PUSH    AX 
 03AF  B4 51                            MOV     AH,GET_CURRENT_PDB 
 03B1  CD 21                            INT     int_command             ; Point
				 to user's header 
 03B3  A1 0000 E                        MOV     AX,[HANDLE01] 
 03B6  8E DB                            MOV     DS,BX 
                                ASSUME DS:NOTHING 
 03B8  A3 0018                          MOV     WORD PTR DS:[PDB_JFN_Table],AX 
				  ; Stuff his old 0 and 1 
 03BB  58                               POP     AX 
 03BC  5B                               POP     BX 
 03BD  1F                               POP     DS 
 03BE  C3                               RET 
                                ASSUME DS:RESGROUP,SS:RESGROUP 
                                 
 03BF                           HOPELESS: 
 03BF  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NOCOM 
 03C2  E9 01F9 R                        JMP     FATALC 
                                 
 03C5                           GETCOMDSK: 
 03C5  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NEEDCOM 
 03C8                           GETCOMDSK3: 
 03C8  A0 0000 E                        MOV     AL,[COMDRV] 
 03CB  E8 0350 R                        CALL    REMCHECK 
 03CE  75 EF                            JNZ     HOPELESS                ;Non-re
				movable media 
 03D0  E8 0000 E                        CALL    RPRINT 
 03D3  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DRVMSG 
 03D6  80 3E 0000 E 00                  CMP     [COMDRV],0 
 03DB  75 03                            JNZ     GETCOM1 
 03DD  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DEFMSG 
 03E0                           GETCOM1: 
 03E0  E8 0000 E                        CALL    RPRINT 
 03E3  BA 0000 E                        MOV     DX,OFFSET RESGROUP:PROMPT 
 03E6  E8 0000 E                        CALL    RPRINT 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-72
DEVICE TABLE AND SRH DEFINITION                             

 03E9  E8 03ED R                        CALL    GetRawFlushedByte 
 03EC  C3                               RET 
                                 
                                ; flush world and get raw input 
 03ED                           GetRawFlushedByte: 
 03ED  B8 0C07                          MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) 
				OR RAW_CON_INPUT 
 03F0  CD 21                            INT     int_command             ; Get c
				har without testing or echo 
 03F2  B8 0C00                          MOV     AX,(STD_CON_INPUT_FLUSH SHL 8) 
				+ 0 
 03F5  CD 21                            INT     int_command 
                                        return 
 03F7                         1 ??0000:
 03F7  C3                     1  RET
                                 
 03F8                           LOADCOM:                        ; Load in trans
				ient 
 03F8  45                               INC     BP              ; Flag command 
				read 
 03F9  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMSPEC 
 03FC  B8 3D00                          MOV     AX,OPEN SHL 8 
 03FF  CD 21                            INT     int_command             ; Open 
				COMMAND.COM 
 0401  73 10                            JNC     READCOM 
 0403  3D 0004                          CMP     AX,open_too_many_open_files 
 0406  75 06                            JNZ     TRYDOOPEN 
 0408  BA 0000 E                        MOV     DX,OFFSET RESGROUP:NOHANDMES 
 040B  E9 01F9 R                        JMP     FATALC          ; Fatal, will n
				ever find a handle 
                                 
 040E                           TRYDOOPEN: 
 040E  E8 03C5 R                        CALL    GETCOMDSK 
 0411  EB E5                            JMP     SHORT LOADCOM 
                                 
 0413                           READCOM: 
 0413  8B D8                            MOV     BX,AX           ; Handle 
 0415  BA 0000 R                        MOV     DX,OFFSET RESGROUP:TRANSTART 
 0418  33 C9                            XOR     CX,CX           ; Seek loc 
 041A  B8 4200                          MOV     AX,LSEEK SHL 8 
 041D  CD 21                            INT     int_command 
 041F  72 10                            JC      WRONGCOM1 
 0421  B9 FF00 E                        MOV     CX,OFFSET TRANGROUP:TRANSPACEEN
				D - 100H 
                                 
                                        ENDIF 
                                 
 0424  1E                               PUSH    DS 
 0425  8E 1E 0000 E                     MOV     DS,[TRNSEG] 
                                ASSUME  DS:NOTHING 
 0429  BA 0100                          MOV     DX,100H 
 042C  B4 3F                            MOV     AH,READ 
 042E  CD 21                            INT     int_command 
 0430  1F                               POP     DS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-73
DEVICE TABLE AND SRH DEFINITION                             

                                ASSUME  DS:RESGROUP 
 0431                           WRONGCOM1: 
 0431  9C                               PUSHF 
 0432  50                               PUSH    AX 
 0433  B4 3E                            MOV     AH,CLOSE 
 0435  CD 21                            INT     int_command             ; Close
				 COMMAND.COM 
 0437  58                               POP     AX 
 0438  9D                               POPF 
 0439  72 04                            JC      WRONGCOM        ; If error on R
				EAD 
 043B  3B C1                            CMP     AX,CX 
 043D  74 1E                            JZ      RET10           ; Size matched 
 043F                           WRONGCOM: 
 043F  BA 0000 E                        MOV     DX,OFFSET RESGROUP:COMBAD 
 0442  E8 03C8 R                        CALL    GETCOMDSK3 
 0445  EB B1                            JMP     SHORT LOADCOM   ; Try again 
                                 
 0447                           CHKSUM:                         ; Compute trans
				ient checksum 
 0447  1E                               PUSH    DS 
 0448  8E 1E 0000 E                     MOV     DS,[TRNSEG] 
 044C  BE 0100                          MOV     SI,100H 
 044F  B9 FF00 E                        MOV     CX,OFFSET TRANGROUP:TRANDATAEND
				 - 100H 
                                 
 0452                           CHECK_SUM: 
 0452  FC                               CLD 
 0453  D1 E9                            SHR     CX,1 
 0455  33 D2                            XOR     DX,DX 
 0457                           CHK: 
 0457  AD                               LODSW 
 0458  03 D0                            ADD     DX,AX 
 045A  E2 FB                            LOOP    CHK 
 045C  1F                               POP     DS 
 045D  C3                       RET10:  RET 
                                 
 045E                           SETVECT:                        ; Set useful ve
				ctors 
 045E  BA 028B R                        MOV     DX,OFFSET RESGROUP:LODCOM 
 0461  B8 2522                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 22H        ; Set Terminate address 
 0464  CD 21                            INT     int_command 
 0466  BA 01BD R                        MOV     DX,OFFSET RESGROUP:CONTC 
 0469  B8 2523                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 23H        ; Set Ctrl-C address 
 046C  CD 21                            INT     int_command 
 046E  BA 0000 E                        MOV     DX,OFFSET RESGROUP:DSKERR 
 0471  B8 2524                          MOV     AX,(SET_INTERRUPT_VECTOR SHL 8)
				 OR 24H        ; Set Hard Disk Error address 
 0474  CD 21                            INT     int_command 
 0476  C3                               RET 
                                 
 0477                           CODERES ENDS 
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Page     1-74
DEVICE TABLE AND SRH DEFINITION                             

                                 
                                ; This TAIL segment is used to produce a PARA a
				ligned label in the resident 
                                ; group which is the location where the transie
				nt segments will be loaded 
                                ; initial. 
                                 
 0000                           TAIL    SEGMENT PUBLIC PARA 
 0000                                   ORG     0 
 0000                           TRANSTART       LABEL   WORD 
 0000                           TAIL    ENDS 
                                 
                                ; This TAIL segment is used to produce a PARA a
				ligned label in the transient 
                                ; group which is the location where the exec se
				gments will be loaded 
                                ; initial. 
                                 
 0000                           TRANTAIL    SEGMENT PUBLIC PARA 
 0000                                   ORG     0 
 0000                           EXECSTART   LABEL   WORD 
 0000                           TRANTAIL    ENDS 
                                 
                                ENDIF 
                                 
                                        END     PROGSTART 

Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-1
                                                             

Macros:

		N a m e			Lines

BREAK  . . . . . . . . . . . . .  	   2
CONDRET  . . . . . . . . . . . .  	  19
CONTEXT  . . . . . . . . . . . .  	   3
DO_EXT . . . . . . . . . . . . .  	   0
ENTRY  . . . . . . . . . . . . .  	   2
ERROR  . . . . . . . . . . . . .  	   4
INVOKE . . . . . . . . . . . . .  	   8
I_AM . . . . . . . . . . . . . .  	  14
I_NEED . . . . . . . . . . . . .  	  11
JUMP . . . . . . . . . . . . . .  	  17
LONG_ADDR  . . . . . . . . . . .  	   7
MAKELAB  . . . . . . . . . . . .  	   4
PROCEDURE  . . . . . . . . . . .  	   2
RETC . . . . . . . . . . . . . .  	   1
RETNC  . . . . . . . . . . . . .  	   1
RETNZ  . . . . . . . . . . . . .  	   1
RETURN . . . . . . . . . . . . .  	   5
RETZ . . . . . . . . . . . . . .  	   1
SHORT_ADDR . . . . . . . . . . .  	  12
TRANSFER . . . . . . . . . . . .  	   8

Structures and Records:

                N a m e                 Width   # fields
                                        Shift   Width   Mask    Initial

ARENA  . . . . . . . . . . . . .  	0005	0003
  ARENA_SIGNATURE  . . . . . . .  	0000
  ARENA_OWNER  . . . . . . . . .  	0001
  ARENA_SIZE . . . . . . . . . .  	0003
BPBLOCK  . . . . . . . . . . . .  	000D	0008
  BPSECSZ  . . . . . . . . . . .  	0000
  BPCLUS . . . . . . . . . . . .  	0002
  BPRES  . . . . . . . . . . . .  	0003
  BPFTCNT  . . . . . . . . . . .  	0005
  BPDRCNT  . . . . . . . . . . .  	0006
  BPSCCNT  . . . . . . . . . . .  	0008
  BPMEDIA  . . . . . . . . . . .  	000A
  BPFTSEC  . . . . . . . . . . .  	000B
BUFFINFO . . . . . . . . . . . .  	0010	0009
  NEXTBUF  . . . . . . . . . . .  	0000
  BUFDRV . . . . . . . . . . . .  	0004
  BUFDIRTY . . . . . . . . . . .  	0005
  BUFPRI . . . . . . . . . . . .  	0006
  VISIT  . . . . . . . . . . . .  	0007
  BUFSECNO . . . . . . . . . . .  	0008
  BUFWRTCNT  . . . . . . . . . .  	000A
  BUFWRTINC  . . . . . . . . . .  	000B
  BUFDRVDP . . . . . . . . . . .  	000C
DIR_ENTRY  . . . . . . . . . . .  	0020	0008
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-2
                                                             

  DIR_NAME . . . . . . . . . . .  	0000
  DIR_ATTR . . . . . . . . . . .  	000B
  DIR_PAD  . . . . . . . . . . .  	000C
  DIR_TIME . . . . . . . . . . .  	0016
  DIR_DATE . . . . . . . . . . .  	0018
  DIR_FIRST  . . . . . . . . . .  	001A
  DIR_SIZE_L . . . . . . . . . .  	001C
  DIR_SIZE_H . . . . . . . . . .  	001E
DPB  . . . . . . . . . . . . . .  	005E	0012
  DPB_DRIVE  . . . . . . . . . .  	0000
  DPB_UNIT . . . . . . . . . . .  	0001
  DPB_SECTOR_SIZE  . . . . . . .  	0002
  DPB_CLUSTER_MASK . . . . . . .  	0004
  DPB_CLUSTER_SHIFT  . . . . . .  	0005
  DPB_FIRST_FAT  . . . . . . . .  	0006
  DPB_FAT_COUNT  . . . . . . . .  	0008
  DPB_ROOT_ENTRIES . . . . . . .  	0009
  DPB_FIRST_SECTOR . . . . . . .  	000B
  DPB_MAX_CLUSTER  . . . . . . .  	000D
  DPB_FAT_SIZE . . . . . . . . .  	000F
  DPB_DIR_SECTOR . . . . . . . .  	0010
  DPB_DRIVER_ADDR  . . . . . . .  	0012
  DPB_MEDIA  . . . . . . . . . .  	0016
  DPB_FIRST_ACCESS . . . . . . .  	0017
  DPB_NEXT_DPB . . . . . . . . .  	0018
  DPB_CURRENT_DIR  . . . . . . .  	001C
  DPB_DIR_TEXT . . . . . . . . .  	001E
EXEC0  . . . . . . . . . . . . .  	000E	0004
  EXEC0_ENVIRON  . . . . . . . .  	0000
  EXEC0_COM_LINE . . . . . . . .  	0002
  EXEC0_5C_FCB . . . . . . . . .  	0006
  EXEC0_6C_FCB . . . . . . . . .  	000A
EXEC1  . . . . . . . . . . . . .  	0016	0008
  EXEC1_ENVIRON  . . . . . . . .  	0000
  EXEC1_COM_LINE . . . . . . . .  	0002
  EXEC1_5C_FCB . . . . . . . . .  	0006
  EXEC1_6C_FCB . . . . . . . . .  	000A
  EXEC1_SP . . . . . . . . . . .  	000E
  EXEC1_SS . . . . . . . . . . .  	0010
  EXEC1_IP . . . . . . . . . . .  	0012
  EXEC1_CS . . . . . . . . . . .  	0014
EXEC3  . . . . . . . . . . . . .  	0004	0002
  EXEC3_LOAD_ADDR  . . . . . . .  	0000
  EXEC3_RELOC_FAC  . . . . . . .  	0002
EXE_FILE . . . . . . . . . . . .  	0020	000F
  EXE_SIGNATURE  . . . . . . . .  	0000
  EXE_LEN_MOD_512  . . . . . . .  	0002
  EXE_PAGES  . . . . . . . . . .  	0004
  EXE_RLE_COUNT  . . . . . . . .  	0006
  EXE_PAR_DIR  . . . . . . . . .  	0008
  EXE_MIN_BSS  . . . . . . . . .  	000A
  EXE_MAX_BSS  . . . . . . . . .  	000C
  EXE_SS . . . . . . . . . . . .  	000E
  EXE_SP . . . . . . . . . . . .  	0010
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-3
                                                             

  EXE_CHKSUM . . . . . . . . . .  	0012
  EXE_IP . . . . . . . . . . . .  	0014
  EXE_CS . . . . . . . . . . . .  	0016
  EXE_RLE_TABLE  . . . . . . . .  	0018
  EXE_IOV  . . . . . . . . . . .  	001A
  EXE_SYM_TAB  . . . . . . . . .  	001C
FIND_BUF . . . . . . . . . . . .  	002B	000C
  FIND_BUF_SATTR . . . . . . . .  	0000
  FIND_BUF_DRIVE . . . . . . . .  	0001
  FIND_BUF_NAME  . . . . . . . .  	0002
  FIND_BUF_LASTENT . . . . . . .  	000D
  FIND_BUF_THISDPB . . . . . . .  	000F
  FIND_BUF_DIRSTART  . . . . . .  	0013
  FIND_BUF_ATTR  . . . . . . . .  	0015
  FIND_BUF_TIME  . . . . . . . .  	0016
  FIND_BUF_DATE  . . . . . . . .  	0018
  FIND_BUF_SIZE_L  . . . . . . .  	001A
  FIND_BUF_SIZE_H  . . . . . . .  	001C
  FIND_BUF_PNAME . . . . . . . .  	001E
INTERNAT_BLOCK . . . . . . . . .  	0018	0015
  DATE_TIM_FORMAT  . . . . . . .  	0000
  CURRENCY_SYM . . . . . . . . .  	0002
  THOUS_SEP  . . . . . . . . . .  	0007
  DECIMAL_SEP  . . . . . . . . .  	0009
  DATE_SEP . . . . . . . . . . .  	000B
  TIME_SEP . . . . . . . . . . .  	000D
  BIT_FEILD  . . . . . . . . . .  	000F
  CURRENCY_CENTS . . . . . . . .  	0010
  TIME_24  . . . . . . . . . . .  	0011
  MAP_CALL . . . . . . . . . . .  	0012
  DATA_SEP . . . . . . . . . . .  	0016
PROCESS_DATA_BLOCK . . . . . . .  	005B	000E
  PDB_EXIT_CALL  . . . . . . . .  	0000
  PDB_BLOCK_LEN  . . . . . . . .  	0002
  PDB_CPM_CALL . . . . . . . . .  	0005
  PDB_EXIT . . . . . . . . . . .  	000A
  PDB_CTRL_C . . . . . . . . . .  	000E
  PDB_FATAL_ABORT  . . . . . . .  	0012
  PDB_PARENT_PID . . . . . . . .  	0016
  PDB_JFN_TABLE  . . . . . . . .  	0018
  PDB_ENVIRON  . . . . . . . . .  	002C
  PDB_USER_STACK . . . . . . . .  	002E
  PDB_PAD1 . . . . . . . . . . .  	0032
  PDB_CALL_SYSTEM  . . . . . . .  	0050
  PDB_PAD2 . . . . . . . . . . .  	0055
SFT  . . . . . . . . . . . . . .  	0008	0003
  SFT_LINK . . . . . . . . . . .  	0000
  SFT_COUNT  . . . . . . . . . .  	0004
  SFT_TABLE  . . . . . . . . . .  	0006
SF_ENTRY . . . . . . . . . . . .  	0028	0004
  SF_REF_COUNT . . . . . . . . .  	0000
  SF_MODE  . . . . . . . . . . .  	0001
  SF_ATTR  . . . . . . . . . . .  	0002
  SF_FCB . . . . . . . . . . . .  	0003
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-4
                                                             

SRHEAD . . . . . . . . . . . . .  	000D	0005
  REQLEN . . . . . . . . . . . .  	0000
  REQUNIT  . . . . . . . . . . .  	0001
  REQFUNC  . . . . . . . . . . .  	0002
  REQSTAT  . . . . . . . . . . .  	0003
SYMBOL_ENTRY . . . . . . . . . .  	0106	0004
  SYM_VALUE  . . . . . . . . . .  	0000
  SYM_TYPE . . . . . . . . . . .  	0004
  SYM_LEN  . . . . . . . . . . .  	0006
  SYM_NAME . . . . . . . . . . .  	0007
SYSDEV . . . . . . . . . . . . .  	0012	0005
  SDEVNEXT . . . . . . . . . . .  	0000
  SDEVATT  . . . . . . . . . . .  	0004
  SDEVSTRAT  . . . . . . . . . .  	0006
  SDEVINT  . . . . . . . . . . .  	0008
  SDEVNAME . . . . . . . . . . .  	000A
SYS_FCB  . . . . . . . . . . . .  	0025	0010
  FCB_DRIVE  . . . . . . . . . .  	0000
  FCB_NAME . . . . . . . . . . .  	0001
  FCB_EXT  . . . . . . . . . . .  	0009
  FCB_EXTENT . . . . . . . . . .  	000C
  FCB_RECSIZ . . . . . . . . . .  	000E
  FCB_FILSIZ . . . . . . . . . .  	0010
  FCB_DRVBP  . . . . . . . . . .  	0012
  FCB_FDATE  . . . . . . . . . .  	0014
  FCB_FTIME  . . . . . . . . . .  	0016
  FCB_DEVID  . . . . . . . . . .  	0018
  FCB_FIRCLUS  . . . . . . . . .  	0019
  FCB_CLUSPOS  . . . . . . . . .  	001B
  FCB_LSTCLUS  . . . . . . . . .  	001D
  FCB_NR . . . . . . . . . . . .  	0020
  FCB_RR . . . . . . . . . . . .  	0021
USER_ENVIRON . . . . . . . . . .  	0018	000C
  USER_AX  . . . . . . . . . . .  	0000
  USER_BX  . . . . . . . . . . .  	0002
  USER_CX  . . . . . . . . . . .  	0004
  USER_DX  . . . . . . . . . . .  	0006
  USER_SI  . . . . . . . . . . .  	0008
  USER_DI  . . . . . . . . . . .  	000A
  USER_BP  . . . . . . . . . . .  	000C
  USER_DS  . . . . . . . . . . .  	000E
  USER_ES  . . . . . . . . . . .  	0010
  USER_IP  . . . . . . . . . . .  	0012
  USER_CS  . . . . . . . . . . .  	0014
  USER_F . . . . . . . . . . . .  	0016
VARSTRUC . . . . . . . . . . . .  	0059	0005
  ISDIR  . . . . . . . . . . . .  	0000
  SIZ  . . . . . . . . . . . . .  	0001
  TTAIL  . . . . . . . . . . . .  	0002
  INFO . . . . . . . . . . . . .  	0004
  BUF  . . . . . . . . . . . . .  	0005
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-5
                                                             

Segments and Groups:

                N a m e         	Size	Align	Combine Class

EGROUP . . . . . . . . . . . . .  	GROUP
  ZEXEC_CODE . . . . . . . . . .  	0000	PARA	PUBLIC	
  ZEXEC_DATA . . . . . . . . . .  	0000	BYTE	PUBLIC	
RESGROUP . . . . . . . . . . . .  	GROUP
  CODERES  . . . . . . . . . . .  	0477	PARA	PUBLIC	
  DATARES  . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  ENVIRONMENT  . . . . . . . . .  	00B0	PARA	PUBLIC	
  INIT . . . . . . . . . . . . .  	0000	PARA	PUBLIC	
  TAIL . . . . . . . . . . . . .  	0000	PARA	PUBLIC	
TRANGROUP  . . . . . . . . . . .  	GROUP
  TRANCODE . . . . . . . . . . .  	0000	PARA	PUBLIC	
  TRANDATA . . . . . . . . . . .  	0000	BYTE	PUBLIC	
  TRANSPACE  . . . . . . . . . .  	0000	BYTE	PUBLIC	
  TRANTAIL . . . . . . . . . . .  	0000	PARA	PUBLIC	

Symbols:            

                N a m e         	Type	Value	Attr         

ABORT  . . . . . . . . . . . . .  	Number	0000	
ADDR_INT_ABORT . . . . . . . . .  	Number	0080	
ADDR_INT_COMMAND . . . . . . . .  	Number	0084	
ADDR_INT_CTRL_C  . . . . . . . .  	Number	008C	
ADDR_INT_DISK_READ . . . . . . .  	Number	0094	
ADDR_INT_DISK_WRITE  . . . . . .  	Number	0098	
ADDR_INT_FASTCON . . . . . . . .  	Number	00A4	
ADDR_INT_FATAL_ABORT . . . . . .  	Number	0090	
ADDR_INT_KEEP_PROCESS  . . . . .  	Number	009C	
ADDR_INT_SPOOLER . . . . . . . .  	Number	00A0	
ADDR_INT_TERMINATE . . . . . . .  	Number	0088	
ALLOC  . . . . . . . . . . . . .  	Number	0048	
ALLOCOPER  . . . . . . . . . . .  	Number	0058	
ALLOC_ARENA_TRASHED  . . . . . .  	Alias	 ERROR_ARENA_TRASHED		
ALLOC_NOT_ENOUGH_MEMORY  . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
ALSO_BOGUS . . . . . . . . . . .  	L NEAR	0315	CODERES
ALTVECT  . . . . . . . . . . . .  	Number	0000	
ARENA_OWNER_SYSTEM . . . . . . .  	Number	0000	
ARENA_SIGNATURE_END  . . . . . .  	Number	005A	
ARENA_SIGNATURE_NORMAL . . . . .  	Number	004D	
ASKEND . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
ASSIGNOPER . . . . . . . . . . .  	Number	005F	
ASWITCH  . . . . . . . . . . . .  	Number	0004	
ATTR_ALL . . . . . . . . . . . .  	Number	0016	
ATTR_ARCHIVE . . . . . . . . . .  	Number	0020	
ATTR_CHANGEABLE  . . . . . . . .  	Number	0027	
ATTR_DIRECTORY . . . . . . . . .  	Number	0010	
ATTR_HIDDEN  . . . . . . . . . .  	Number	0002	
ATTR_IGNORE  . . . . . . . . . .  	Number	0021	
ATTR_READ_ONLY . . . . . . . . .  	Number	0001	
ATTR_SYSTEM  . . . . . . . . . .  	Number	0004	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-6
                                                             

ATTR_VOLUME_ID . . . . . . . . .  	Number	0008	

BADMEMERR  . . . . . . . . . . .  	L NEAR	01F6	CODERES
BADMEMERRJ . . . . . . . . . . .  	L NEAR	02A8	CODERES
BATCH  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
BMEMMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
BOGUS_COM  . . . . . . . . . . .  	L NEAR	0304	CODERES
BSWITCH  . . . . . . . . . . . .  	Number	0008	
BUFINSIZ . . . . . . . . . . . .  	Number	0010	

CHAR_OPER  . . . . . . . . . . .  	Number	0037	
CHDIR  . . . . . . . . . . . . .  	Number	003B	
CHDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CHECK_SUM  . . . . . . . . . . .  	L NEAR	0452	CODERES
CHK  . . . . . . . . . . . . . .  	L NEAR	0457	CODERES
CHK1 . . . . . . . . . . . . . .  	L NEAR	036F	CODERES
CHKOTHERHAND . . . . . . . . . .  	L NEAR	037C	CODERES
CHKSAME  . . . . . . . . . . . .  	L NEAR	030C	CODERES
CHKSUM . . . . . . . . . . . . .  	L NEAR	0447	CODERES	Global
CHMOD  . . . . . . . . . . . . .  	Number	0043	
CHMOD_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CHMOD_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CHMOD_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CLOSE  . . . . . . . . . . . . .  	Number	003E	
CLOSELOOP  . . . . . . . . . . .  	L NEAR	0382	CODERES
CLOSE_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
CLOSE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
COMBAD . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
COMBUFLEN  . . . . . . . . . . .  	Number	0080	
COMDRV . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
COMSPEC  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
CONPROC  . . . . . . . . . . . .  	L NEAR	0000	INIT	External
CONTC  . . . . . . . . . . . . .  	L NEAR	01BD	CODERES	Global
CONTCTERM  . . . . . . . . . . .  	L NEAR	01D1	CODERES	Global
COUNTRY_NOT_FOUND  . . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
CREAT  . . . . . . . . . . . . .  	Number	003C	
CREATENEWFILE  . . . . . . . . .  	Number	005B	
CREATETEMPFILE . . . . . . . . .  	Number	005A	
CREATE_PROCESS_DATA_BLOCK  . . .  	Number	0026	
CREAT_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
CREAT_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
CREAT_TOO_MANY_OPEN_FILES  . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		
CURDIR_INVALID_DRIVE . . . . . .  	Alias	 ERROR_INVALID_DRIVE		
CURRENT_DIR  . . . . . . . . . .  	Number	0047	
C_BS . . . . . . . . . . . . . .  	Number	0008	
C_CR . . . . . . . . . . . . . .  	Number	000D	
C_DEL  . . . . . . . . . . . . .  	Number	007F	
C_ETB  . . . . . . . . . . . . .  	Number	0017	
C_ETX  . . . . . . . . . . . . .  	Number	0003	
C_HT . . . . . . . . . . . . . .  	Number	0009	
C_LF . . . . . . . . . . . . . .  	Number	000A	
C_NAK  . . . . . . . . . . . . .  	Number	0015	

DBPBHL . . . . . . . . . . . . .  	Number	0016	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-7
                                                             

DEALLOC  . . . . . . . . . . . .  	Number	0049	
DEALLOC_ARENA_TRASHED  . . . . .  	Alias	 ERROR_ARENA_TRASHED		
DEALLOC_INVALID_BLOCK  . . . . .  	Alias	 ERROR_INVALID_BLOCK		
DEFMSG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
DEVBPB . . . . . . . . . . . . .  	Number	0002	
DEVID_BLOCK_DEV  . . . . . . . .  	Number	001F	
DEVID_DEVICE . . . . . . . . . .  	Number	0080	
DEVID_DEVICE_CLOCK . . . . . . .  	Number	0008	
DEVID_DEVICE_CON_IN  . . . . . .  	Number	0001	
DEVID_DEVICE_CON_OUT . . . . . .  	Number	0002	
DEVID_DEVICE_EOF . . . . . . . .  	Number	0040	
DEVID_DEVICE_NULL  . . . . . . .  	Number	0004	
DEVID_DEVICE_RAW . . . . . . . .  	Number	0020	
DEVID_DEVICE_SPECIAL . . . . . .  	Number	0010	
DEVID_EOF  . . . . . . . . . . .  	Number	0040	
DEVID_FILE_CLEAN . . . . . . . .  	Number	0040	
DEVID_FILE_MASK_DRIVE  . . . . .  	Number	003F	
DEVID_ISCIN  . . . . . . . . . .  	Number	0001	
DEVID_ISCLK  . . . . . . . . . .  	Number	0008	
DEVID_ISCOT  . . . . . . . . . .  	Number	0002	
DEVID_ISDEV  . . . . . . . . . .  	Number	0080	
DEVID_ISNUL  . . . . . . . . . .  	Number	0004	
DEVID_RAW  . . . . . . . . . . .  	Number	0020	
DEVID_SPECIAL  . . . . . . . . .  	Number	0010	
DEVIFL . . . . . . . . . . . . .  	Number	0007	
DEVINIT  . . . . . . . . . . . .  	Number	0000	
DEVIOCTL . . . . . . . . . . . .  	Number	4000	
DEVIST . . . . . . . . . . . . .  	Number	0006	
DEVMDCH  . . . . . . . . . . . .  	Number	0001	
DEVOFL . . . . . . . . . . . . .  	Number	000B	
DEVOST . . . . . . . . . . . . .  	Number	000A	
DEVRD  . . . . . . . . . . . . .  	Number	0004	
DEVRDIOCTL . . . . . . . . . . .  	Number	0003	
DEVRDND  . . . . . . . . . . . .  	Number	0005	
DEVTYP . . . . . . . . . . . . .  	Number	8000	
DEVWRIOCTL . . . . . . . . . . .  	Number	000C	
DEVWRT . . . . . . . . . . . . .  	Number	0008	
DEVWRTV  . . . . . . . . . . . .  	Number	0009	
DFLSHL . . . . . . . . . . . . .  	Number	000F	
DINITHL  . . . . . . . . . . . .  	Number	001A	
DIRPRI . . . . . . . . . . . . .  	Number	000F	
DIRSTRLEN  . . . . . . . . . . .  	Number	0040	
DIR_SEARCH_FIRST . . . . . . . .  	Number	0011	
DIR_SEARCH_NEXT  . . . . . . . .  	Number	0012	
DISK_RESET . . . . . . . . . . .  	Number	000D	
DMEDHL . . . . . . . . . . . . .  	Number	000F	
DODAB  . . . . . . . . . . . . .  	L NEAR	01F4	CODERES
DOSVER . . . . . . . . . . . . .  	Number	00D3	
DOS_MAJOR_VERSION  . . . . . . .  	Number	0002	
DOS_MINOR_VERSION  . . . . . . .  	Number	000B	
DPBSIZ . . . . . . . . . . . . .  	Number	005E	
DRDNDHL  . . . . . . . . . . . .  	Number	000E	
DRDWRHL  . . . . . . . . . . . .  	Number	0016	
DRVCHAR  . . . . . . . . . . . .  	Number	003A	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-8
                                                             

DRVMSG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
DSKERR . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
DSKSIZ . . . . . . . . . . . . .  	Number	000D	
DSTATHL  . . . . . . . . . . . .  	Number	000D	
DUP2_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_INVALID_HANDLE . . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
DUP_PDB  . . . . . . . . . . . .  	Number	0055	
DUP_TOO_MANY_OPEN_FILES  . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

ECOMSPEC . . . . . . . . . . . .  	L BYTE 	001E	ENVIRONMENT	Global
ENTRYPOINT . . . . . . . . . . .  	Number	00C0	
ENVARENA . . . . . . . . . . . .  	L BYTE 	0000	ENVIRONMENT	Length = 0010
ENVIREND . . . . . . . . . . . .  	L BYTE 	00B0	ENVIRONMENT	Global
ENVIRONSIZ . . . . . . . . . . .  	Number	00A0	
ENVIRONSIZ2  . . . . . . . . . .  	Number	0092	
ERROR_ACCESS_DENIED  . . . . . .  	Number	0005	
ERROR_ARENA_TRASHED  . . . . . .  	Number	0007	
ERROR_BAD_ENVIRONMENT  . . . . .  	Number	000A	
ERROR_BAD_FORMAT . . . . . . . .  	Number	000B	
ERROR_CURRENT_DIRECTORY  . . . .  	Number	0010	
ERROR_FILE_NOT_FOUND . . . . . .  	Number	0002	
ERROR_INVALID_ACCESS . . . . . .  	Number	000C	
ERROR_INVALID_BLOCK  . . . . . .  	Number	0009	
ERROR_INVALID_DATA . . . . . . .  	Number	000D	
ERROR_INVALID_DRIVE  . . . . . .  	Number	000F	
ERROR_INVALID_FUNCTION . . . . .  	Number	0001	
ERROR_INVALID_HANDLE . . . . . .  	Number	0006	
ERROR_NOT_ENOUGH_MEMORY  . . . .  	Number	0008	
ERROR_NOT_SAME_DEVICE  . . . . .  	Number	0011	
ERROR_NO_MORE_FILES  . . . . . .  	Number	0012	
ERROR_PATH_NOT_FOUND . . . . . .  	Number	0003	
ERROR_TOO_MANY_OPEN_FILES  . . .  	Number	0004	
EXEBAD . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXEC . . . . . . . . . . . . . .  	Number	004B	
EXECEMES . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
EXECSTART  . . . . . . . . . . .  	L WORD 	0000	TRANTAIL
EXEC_BAD_ENVIRONMENT . . . . . .  	Alias	 ERROR_BAD_ENVIRONMENT		
EXEC_BAD_FORMAT  . . . . . . . .  	Alias	 ERROR_BAD_FORMAT		
EXEC_ERR . . . . . . . . . . . .  	L NEAR	0180	CODERES
EXEC_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
EXEC_FUNC_NO_EXECUTE . . . . . .  	Number	0001	
EXEC_FUNC_OVERLAY  . . . . . . .  	Number	0002	
EXEC_INVALID_FUNCTION  . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
EXEC_NOT_ENOUGH_MEMORY . . . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
EXEC_WAIT  . . . . . . . . . . .  	L NEAR	01B2	CODERES
EXE_VALID_OLD_SIGNATURE  . . . .  	Number	4D5A	
EXE_VALID_SIGNATURE  . . . . . .  	Number	5A4D	
EXIT . . . . . . . . . . . . . .  	Number	004C	
EXIT_ABORT . . . . . . . . . . .  	Number	0000	
EXIT_CTRL_C  . . . . . . . . . .  	Number	0001	
EXIT_HARD_ERROR  . . . . . . . .  	Number	0002	
EXIT_KEEP_PROCESS  . . . . . . .  	Number	0003	
EXIT_TERMINATE . . . . . . . . .  	Number	0000	
EXTCOM . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-9
                                                             

EXT_EXEC . . . . . . . . . . . .  	L NEAR	01A7	CODERES	Global

FALSE  . . . . . . . . . . . . .  	Number	0000	
FATALC . . . . . . . . . . . . .  	L NEAR	01F9	CODERES
FATALRET . . . . . . . . . . . .  	L NEAR	0214	CODERES
FATALRET2  . . . . . . . . . . .  	L NEAR	021A	CODERES
FATPRI . . . . . . . . . . . . .  	Number	001E	
FCB  . . . . . . . . . . . . . .  	Number	005C	
FCB_CLOSE  . . . . . . . . . . .  	Number	0010	
FCB_CREATE . . . . . . . . . . .  	Number	0016	
FCB_DELETE . . . . . . . . . . .  	Number	0013	
FCB_OPEN . . . . . . . . . . . .  	Number	000F	
FCB_RANDOM_READ  . . . . . . . .  	Number	0021	
FCB_RANDOM_READ_BLOCK  . . . . .  	Number	0027	
FCB_RANDOM_WRITE . . . . . . . .  	Number	0022	
FCB_RANDOM_WRITE_BLOCK . . . . .  	Number	0028	
FCB_RENAME . . . . . . . . . . .  	Number	0017	
FCB_SEQ_READ . . . . . . . . . .  	Number	0014	
FCB_SEQ_WRITE  . . . . . . . . .  	Number	0015	
FILDIRENT  . . . . . . . . . . .  	Number	0010	
FILETIMES_INVALID_FUNCTION . . .  	Alias	 ERROR_INVALID_FUNCTION		
FILETIMES_INVALID_HANDLE . . . .  	Alias	 ERROR_INVALID_HANDLE		
FILE_TIMES . . . . . . . . . . .  	Number	0057	
FILPERPROC . . . . . . . . . . .  	Number	0014	
FINDFIRST_FILE_NOT_FOUND . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
FINDFIRST_NO_MORE_FILES  . . . .  	Alias	 ERROR_NO_MORE_FILES		
FINDNEXT_NO_MORE_FILES . . . . .  	Alias	 ERROR_NO_MORE_FILES		
FIND_FIRST . . . . . . . . . . .  	Number	004E	
FIND_NEXT  . . . . . . . . . . .  	Number	004F	
FORFLAG  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
FREEPRI  . . . . . . . . . . . .  	Number	0000	
FRETMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External

GETCOM1  . . . . . . . . . . . .  	L NEAR	03E0	CODERES
GETCOMDSK  . . . . . . . . . . .  	L NEAR	03C5	CODERES
GETCOMDSK2 . . . . . . . . . . .  	L NEAR	03A6	CODERES	Global
GETCOMDSK3 . . . . . . . . . . .  	L NEAR	03C8	CODERES
GETEXTENDEDERROR . . . . . . . .  	Number	0059	
GETRAWFLUSHEDBYTE  . . . . . . .  	L NEAR	03ED	CODERES
GET_CURRENT_PDB  . . . . . . . .  	Number	0051	
GET_DATE . . . . . . . . . . . .  	Number	002A	
GET_DEFAULT_DPB  . . . . . . . .  	Number	001F	
GET_DEFAULT_DRIVE  . . . . . . .  	Number	0019	
GET_DMA  . . . . . . . . . . . .  	Number	002F	
GET_DPB  . . . . . . . . . . . .  	Number	0032	
GET_DRIVE_FREESPACE  . . . . . .  	Number	0036	
GET_FCB_FILE_LENGTH  . . . . . .  	Number	0023	
GET_FCB_POSITION . . . . . . . .  	Number	0024	
GET_INDOS_FLAG . . . . . . . . .  	Number	0034	
GET_INTERRUPT_VECTOR . . . . . .  	Number	0035	
GET_IN_VARS  . . . . . . . . . .  	Number	0052	
GET_TIME . . . . . . . . . . . .  	Number	002C	
GET_VERIFY_ON_WRITE  . . . . . .  	Number	0054	
GET_VERSION  . . . . . . . . . .  	Number	0030	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-10
                                                             

GOTECODE . . . . . . . . . . . .  	L NEAR	0251	CODERES
GOTEXECEMES  . . . . . . . . . .  	L NEAR	01A0	CODERES
GOTSWITCH  . . . . . . . . . . .  	Number	8000	

HALTMES  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
HANDLE01 . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
HAVCOM . . . . . . . . . . . . .  	L NEAR	031A	CODERES
HEADCALL . . . . . . . . . . . .  	V DWORD	0000	TRANSPACE	External
HEADFIX  . . . . . . . . . . . .  	L NEAR	0359	CODERES
HIGHMEM  . . . . . . . . . . . .  	Alias	 FALSE		
HOPELESS . . . . . . . . . . . .  	L NEAR	03BF	CODERES

IBM  . . . . . . . . . . . . . .  	Alias	 FALSE		
IBMJAPAN . . . . . . . . . . . .  	Alias	 FALSE		
IBMVER . . . . . . . . . . . . .  	Alias	 IBM		
INTBASE  . . . . . . . . . . . .  	Number	0080	
INTERNATIONAL  . . . . . . . . .  	Number	0038	
INTERNATIONAL_INVALID_FUNCTION .  	Alias	 ERROR_INVALID_FUNCTION		
INTERNAT_BLOCK_MAX . . . . . . .  	Number	0020	
INTTAB . . . . . . . . . . . . .  	Number	0020	
INT_2E . . . . . . . . . . . . .  	L NEAR	025A	CODERES	Global
INT_2E_RET . . . . . . . . . . .  	V DWORD	0000	DATARES	External
INT_ABORT  . . . . . . . . . . .  	Alias	 INTTAB		
INT_COMMAND  . . . . . . . . . .  	Number	0021	
INT_CTRL_C . . . . . . . . . . .  	Number	0023	
INT_DISK_READ  . . . . . . . . .  	Number	0025	
INT_DISK_WRITE . . . . . . . . .  	Number	0026	
INT_FASTCON  . . . . . . . . . .  	Number	0029	
INT_FATAL_ABORT  . . . . . . . .  	Number	0024	
INT_KEEP_PROCESS . . . . . . . .  	Number	0027	
INT_SPOOLER  . . . . . . . . . .  	Number	0028	
INT_TERMINATE  . . . . . . . . .  	Number	0022	
IOCTL  . . . . . . . . . . . . .  	Number	0044	
IOCTL_INVALID_DATA . . . . . . .  	Alias	 ERROR_INVALID_DATA		
IOCTL_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
IOCTL_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
IO_SAVE  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
ISCIN  . . . . . . . . . . . . .  	Number	0001	
ISCLOCK  . . . . . . . . . . . .  	Number	0008	
ISCOUT . . . . . . . . . . . . .  	Number	0002	
ISFATBYDEV . . . . . . . . . . .  	Number	2000	
ISIBM  . . . . . . . . . . . . .  	Number	0010	
ISNULL . . . . . . . . . . . . .  	Number	0004	

KANJI  . . . . . . . . . . . . .  	Alias	 FALSE		
KEEP_PROCESS . . . . . . . . . .  	Number	0031	

LBRPRI . . . . . . . . . . . . .  	Number	0002	
LBWPRI . . . . . . . . . . . . .  	Number	0004	
LINPERPAG  . . . . . . . . . . .  	Number	0017	
LOADCOM  . . . . . . . . . . . .  	L NEAR	03F8	CODERES	Global
LOADING  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
LOCKOPER . . . . . . . . . . . .  	Number	005C	
LODCOM . . . . . . . . . . . . .  	L NEAR	028B	CODERES	Global
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-11
                                                             

LODCOM1  . . . . . . . . . . . .  	L NEAR	02D0	CODERES	Global
LSEEK  . . . . . . . . . . . . .  	Number	0042	
LSEEK_INVALID_FUNCTION . . . . .  	Alias	 ERROR_INVALID_FUNCTION		
LSEEK_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
LTPA . . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External

MEMOK  . . . . . . . . . . . . .  	L NEAR	02AB	CODERES
MEMSIZ . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
MI_INT . . . . . . . . . . . . .  	Number	00CD	
MI_LONG_CALL . . . . . . . . . .  	Number	009A	
MI_LONG_JMP  . . . . . . . . . .  	Number	00EA	
MI_LONG_RET  . . . . . . . . . .  	Number	00CB	
MKDIR  . . . . . . . . . . . . .  	Number	0039	
MKDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
MKDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
MSVER  . . . . . . . . . . . . .  	Number	FFFF	

NEEDCOM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NOCOM  . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NOEXEC . . . . . . . . . . . . .  	L NEAR	01BA	CODERES
NOHANDMES  . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
NORMPERLIN . . . . . . . . . . .  	Number	0001	
NOSETSING  . . . . . . . . . . .  	L NEAR	01EA	CODERES
NOSETVER . . . . . . . . . . . .  	L NEAR	02EE	CODERES
NOSNG  . . . . . . . . . . . . .  	L NEAR	02F8	CODERES
NO_ERROR_OCCURRED  . . . . . . .  	Text  0                                                              ?		

OEM  . . . . . . . . . . . . . .  	Text  		
OEM_C1 . . . . . . . . . . . . .  	Number	00F9	
OEM_C2 . . . . . . . . . . . . .  	Number	00FA	
OEM_C3 . . . . . . . . . . . . .  	Number	00FB	
OEM_C4 . . . . . . . . . . . . .  	Number	00FC	
OEM_C5 . . . . . . . . . . . . .  	Number	00FD	
OEM_C6 . . . . . . . . . . . . .  	Number	00FE	
OEM_C7 . . . . . . . . . . . . .  	Number	00FF	
OPEN . . . . . . . . . . . . . .  	Number	003D	
OPEN_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
OPEN_FILE_NOT_FOUND  . . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
OPEN_FOR_BOTH  . . . . . . . . .  	Number	0002	
OPEN_FOR_READ  . . . . . . . . .  	Number	0000	
OPEN_FOR_WRITE . . . . . . . . .  	Number	0001	
OPEN_INVALID_ACCESS  . . . . . .  	Alias	 ERROR_INVALID_ACCESS		
OPEN_TOO_MANY_OPEN_FILES . . . .  	Alias	 ERROR_TOO_MANY_OPEN_FILES		

PARENT . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
PARSE_FILE_DESCRIPTOR  . . . . .  	Number	0029	
PATHSTRING . . . . . . . . . . .  	L BYTE 	0010	ENVIRONMENT	Global
PERMCOM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PIPEFLAG . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PROGSTART  . . . . . . . . . . .  	L NEAR	0100	CODERES
PROMPT . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
PSWITCH  . . . . . . . . . . . .  	Number	0002	

RAW_CON_INPUT  . . . . . . . . .  	Number	0007	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-12
                                                             

RAW_CON_IO . . . . . . . . . . .  	Number	0006	
RBADNAM  . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
RDIRCHAR . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
READ . . . . . . . . . . . . . .  	Number	003F	
READCOM  . . . . . . . . . . . .  	L NEAR	0413	CODERES
READ_ACCESS_DENIED . . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
READ_INVALID_HANDLE  . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
REMCHECK . . . . . . . . . . . .  	L NEAR	0350	CODERES
RENAME . . . . . . . . . . . . .  	Number	0056	
RENAME_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RENAME_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
RENAME_NOT_SAME_DEVICE . . . . .  	Alias	 ERROR_NOT_SAME_DEVICE		
RESTHAND . . . . . . . . . . . .  	L NEAR	03AC	CODERES	Global
RET10  . . . . . . . . . . . . .  	L NEAR	045D	CODERES
RETCODE  . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
RET_2E . . . . . . . . . . . . .  	L NEAR	022D	CODERES
RET_L  . . . . . . . . . . . . .  	NEAR 	03F7	CODERES
RMDIR  . . . . . . . . . . . . .  	Number	003A	
RMDIR_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
RMDIR_CURRENT_DIRECTORY  . . . .  	Alias	 ERROR_CURRENT_DIRECTORY		
RMDIR_PATH_NOT_FOUND . . . . . .  	Alias	 ERROR_PATH_NOT_FOUND		
RPRI . . . . . . . . . . . . . .  	Number	0006	
RPRINT . . . . . . . . . . . . .  	L NEAR	0000	CODERES	External
RSTACK . . . . . . . . . . . . .  	L WORD 	0180	CODERES	Global
RSWITCHAR  . . . . . . . . . . .  	V BYTE 	0000	DATARES	External

SAVE_PDB . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
SAVHAND  . . . . . . . . . . . .  	L NEAR	038A	CODERES	Global
SERVERCALL . . . . . . . . . . .  	Number	005D	
SETBLOCK . . . . . . . . . . . .  	Number	004A	
SETBLOCK_ARENA_TRASHED . . . . .  	Alias	 ERROR_ARENA_TRASHED		
SETBLOCK_INVALID_BLOCK . . . . .  	Alias	 ERROR_INVALID_BLOCK		
SETBLOCK_INVALID_FUNCTION  . . .  	Alias	 ERROR_INVALID_FUNCTION		
SETBLOCK_NOT_ENOUGH_MEMORY . . .  	Alias	 ERROR_NOT_ENOUGH_MEMORY		
SETDPB . . . . . . . . . . . . .  	Number	0053	
SETVECT  . . . . . . . . . . . .  	L NEAR	045E	CODERES	Global
SET_CTRL_C_TRAPPING  . . . . . .  	Number	0033	
SET_CURRENT_PDB  . . . . . . . .  	Number	0050	
SET_DATE . . . . . . . . . . . .  	Number	002B	
SET_DEFAULT_DRIVE  . . . . . . .  	Number	000E	
SET_DMA  . . . . . . . . . . . .  	Number	001A	
SET_INTERRUPT_VECTOR . . . . . .  	Number	0025	
SET_OEM_HANDLER  . . . . . . . .  	Number	00F8	
SET_TIME . . . . . . . . . . . .  	Number	002D	
SET_VERIFY_ON_WRITE  . . . . . .  	Number	002E	
SF_DEFAULT_NUMBER  . . . . . . .  	Number	0005	
SINGLECOM  . . . . . . . . . . .  	V WORD 	0000	DATARES	External
STALL  . . . . . . . . . . . . .  	L NEAR	0212	CODERES
STBUI  . . . . . . . . . . . . .  	Number	0200	
STDAUX . . . . . . . . . . . . .  	Number	0003	
STDERR . . . . . . . . . . . . .  	Number	0002	
STDIN  . . . . . . . . . . . . .  	Number	0000	
STDON  . . . . . . . . . . . . .  	Number	0100	
STDOUT . . . . . . . . . . . . .  	Number	0001	
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-13
                                                             

STDPRN . . . . . . . . . . . . .  	Number	0004	
STD_AUX_INPUT  . . . . . . . . .  	Number	0003	
STD_AUX_OUTPUT . . . . . . . . .  	Number	0004	
STD_CON_INPUT  . . . . . . . . .  	Number	0001	
STD_CON_INPUT_FLUSH  . . . . . .  	Number	000C	
STD_CON_INPUT_NO_ECHO  . . . . .  	Number	0008	
STD_CON_INPUT_STATUS . . . . . .  	Number	000B	
STD_CON_OUTPUT . . . . . . . . .  	Number	0002	
STD_CON_STRING_INPUT . . . . . .  	Number	000A	
STD_CON_STRING_OUTPUT  . . . . .  	Number	0009	
STD_PRINTER_OUTPUT . . . . . . .  	Number	0005	
STECODE  . . . . . . . . . . . .  	Number	00FF	
STERR  . . . . . . . . . . . . .  	Number	8000	
SUM  . . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
SYM  . . . . . . . . . . . . . .  	Number	003E	

THEADFIX . . . . . . . . . . . .  	F PROC	0355	CODERES	Global	Length = 0004
TOOBIG . . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
TRANDATAEND  . . . . . . . . . .  	V BYTE 	0000	TRANDATA	External
TRANS  . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
TRANSPACEEND . . . . . . . . . .  	V BYTE 	0000	TRANSPACE	External
TRANSTART  . . . . . . . . . . .  	L WORD 	0000	TAIL
TRANVARS . . . . . . . . . . . .  	V BYTE 	0000	DATARES	External
TREMCHECK  . . . . . . . . . . .  	F PROC	034C	CODERES	Global	Length = 0004
TRNSEG . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
TRUE . . . . . . . . . . . . . .  	Number	FFFF	
TRYDOOPEN  . . . . . . . . . . .  	L NEAR	040E	CODERES

UNLINK . . . . . . . . . . . . .  	Number	0041	
UNLINK_ACCESS_DENIED . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
UNLINK_FILE_NOT_FOUND  . . . . .  	Alias	 ERROR_FILE_NOT_FOUND		
USERIDOPER . . . . . . . . . . .  	Number	005E	
USERPATH . . . . . . . . . . . .  	L BYTE 	0015	ENVIRONMENT
USESLASH . . . . . . . . . . . .  	L NEAR	032D	CODERES

VER  . . . . . . . . . . . . . .  	Text  		
VERVAL . . . . . . . . . . . . .  	V WORD 	0000	DATARES	External
VSWITCH  . . . . . . . . . . . .  	Number	0010	

WAIT . . . . . . . . . . . . . .  	Number	004D	
WIDEPERLIN . . . . . . . . . . .  	Number	0005	
WPRI . . . . . . . . . . . . . .  	Number	0008	
WRECODE  . . . . . . . . . . . .  	Number	0000	
WRITE  . . . . . . . . . . . . .  	Number	0040	
WRITE_ACCESS_DENIED  . . . . . .  	Alias	 ERROR_ACCESS_DENIED		
WRITE_INVALID_HANDLE . . . . . .  	Alias	 ERROR_INVALID_HANDLE		
WRONGCOM . . . . . . . . . . . .  	L NEAR	043F	CODERES
WRONGCOM1  . . . . . . . . . . .  	L NEAR	0431	CODERES
WSWITCH  . . . . . . . . . . . .  	Number	0001	

XDUP . . . . . . . . . . . . . .  	Number	0045	
XDUP2  . . . . . . . . . . . . .  	Number	0046	

ZERO . . . . . . . . . . . . . .  	NEAR 	0000	CODERES
Microsoft (R) Macro Assembler  Version 4.00                 11/21/18 14:40:56
                                                            Symbols-14
                                                             

ZZY  . . . . . . . . . . . . . .  	F PROC	01F5	CODERES	Length = 0001

??0000 . . . . . . . . . . . . .  	L NEAR	03F7	CODERES


   2184 Source  Lines
   2255 Total   Lines
    681 Symbols

  16470 Bytes symbol space free

      0 Warning Errors
      0 Severe  Errors
